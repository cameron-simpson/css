PREFIX          = /opt/css
weblocal        = $(HOME)/@/ezos/html/cs/css
##hg_bitbucket    = https://bitbucket.org/cameron_simpson/css
hg_bitbucket    = ssh://hg@bitbucket.org/cameron_simpson/css
www_bitbucket   = https://bitbucket.org/cameron_simpson/css/commits/all
title           = Cameron Simpson's Scripts

target  = bin

dev = env-dev -d $. -x
venvdir = $./venv
venv_requirements = $./venv-requirements.txt

rewrite = rewriteif -0 -v

JAVADIR	= $(ETCDIR)/www/java/classes
java	= $(localjava) $(subjava)
localjava= $('*.java' G)
subjava	= $('cs/*.java' G?)
classes	= $((java P)).class
subclasses=$((subjava P)).class
html	= $('*.html' G)

htdocs	= $(HOME)/@/ezos/html/cs
htmandir = $(htdocs)/css/manuals
pmsets	= lib/perl/cs
pmset(set) = $('$(set)/*.pm' EG?) \
	     $('$(set)/*/*.pm' EG?) \
	     $('$(set)/*/*/*.pm' EG?)
pmsetmans(set) = $(MANDIR)/man3/$(('$(pmset($(set)))' Es[/]P :|/|::|)).3
pmsethtml(set) = $(htmandir)/$(('$(pmset($(set)))' Es[/]P :|/|::|)).3.html
pmmans = $('$$(pmsetmans($((pmsets))))' EE)
pmhtml = $('$$(pmsethtml($((pmsets))))' EE)
podman(podf) = $(MANDIR)/man$(podf FPS)/$(podf FP)
podmans = $('$$(podman($(("man/*.pod" G))))' EE)
pmFromMan(manf) = lib/$(manf FP :|::|/|).pm
pmFromHtml(html) = lib/$(html FPP :|::|/|).pm
podFromMan(manf) = man/$(manf F).pod

venv_dir = $./venv
venv_reqs = requirements.txt
venv_pip = $(venv_dir)/bin/pip

##  pymanmods = cs.vt
##  pymansrcs = $( "$((pymanmods :|\.|/|))/*.?.md" EG )
##  pymanmoddirs = $(pymansrcs DU)
##  pymandst(src) = $(MANDIR)/man$(src FPS)/$(src FP)
##  pymandsts = $( '$$(pymandst("$((pymansrcs))"))' EE )
##  pymansrc(dst) = $
##  
##  _t:
##      echo $(pymansrcs)
##      echo $(pymanmoddirs)
##      echo $(pymandsts)

subdirs = $('*/.' GD)
allscripts = $('bin/*' GF !/\./ +"bin/rc.mobile" F)

scriptmandir = $(MANDIR)/man1
scriptmans = $(scriptmandir)/$((allscripts)).1
scriptfromman(manf) = $(manf FP)

py2files        = $("lib/python/cs/*.py lib/python/cs/*/*.py lib/python/cs/*/*/*.py" G)
py3files        = $(py2files :|/python/|/python3/|)

rsync = rsync -iOt --exclude='.*.swp' --exclude='*.pyc'

_help:
        @echo '_test              - do syntax checks and self tests (may set $$MYKE_TEST_PYTHON_MODULES if desired)'
        @echo '_test3             - do python 3 syntax checks and self tests'
        @echo '_home              - deploy scripts to ~/bin etc'
        @echo '_venv              - prepare local venv from $(venv_reqs)'
        @echo '_deploy            - deploy current release to /opt/css'
        @echo '_publish_ezos      - deploy current release to /opt/css, ezos'
        @echo '_publish_bitbucket - deploy tip to bitbucket'
        @echo '_publish           - deploy current release to /opt/css, ezos and tip to bitbucket'
        @echo '_pending           - report unreleased changelog and [M]odified files'
        @echo '_release           - mark tip as new release'
        @echo '_freshmeat         - announce current release to freshmeat'
        @echo '_updcss            - deploy current tip to /opt/css'
        @echo '_tarball           - make a tarball of the tip'

_setup:
    :make _tags _venv

_venv: $(venvdir)
$(venvdir): $(venv_requirements)
    :make $@/.
    $(dev) pip install -U -r $(venv_requirements)

_tags:  tags
tags:   $("cs/*.py cs/*/*.py cs/*/*/*.py" G)
        ctags-update -o '$@' $?

_venv:
        :make $(venv_dir)

$(venv_dir):    $(venv_reqs)
        python3 -m venv $(venv_dir)
        $(venv_pip) install -U pip
        $(venv_pip) install -U -r $(venv_reqs)

_updcss:
        ./bin-cs/updcss

_testhost:
        set -ue \
        hosts=$$(hostlist "$$TESTHOST") \
        for testhost in $$hosts \
        do \
          for basedir in . $(PREFIX) \
          do \
            target=$$testhost:$$basedir \
            pfx "$$target/bin" set-x \\
              rsync -iOtrl "bin/" "$$target/bin/" & \
            pfx "$$target/lib/python/cs" set-x \\
              rsync -iOtrl '--include=*/' '--include=*.py' '--exclude=*' \\
                lib/python/cs/ "$$target/lib/python/cs/" & \
          done \
        done \
        wait

_tarball:
        set -uex \
        rev=tip \
        today=$$(daycode | tr -d -) \
        tardir=css-$$rev-$$today \
        tarball=$$tardir.tar.gz \
        [ -d "$$tardir/." ] || mkdir "$$tardir" \
        ./bin-cs/updcss -r "$$rev" "$$tardir" \
        tar czf "$$tarball" "$$tardir"

_test:
        find lib/python -type f -name '*.py[co]' -exec rm {} \;
        set -x; ./bin-cs/selftest -v --python lib/python cs $$MYKE_TEST_PYTHON_MODULES

_test3:
        find lib/python -type f -name '*.py[co]' -exec rm {} \;
        set -x; ./bin-cs/selftest -v --state state3 --pycmd python3 --python lib/python cs $$MYKE_TEST_PYTHON_MODULES

_macrotest:
        echo $(py2files)
        echo $(py3files)
_2to3:
        :make $(py3files)

$(py3files): lib/python/$(@ :|lib/python3/||)
        echo "$@ <- $?"

_home:
        @echo 'update $(HOME)/bin ...' \
        skip=`hg status | sed -n 's:^? \(.*\):--exclude=/\1:p'` \
        binskip=`hg status | sed -n 's:^? bin/\(.*\):--exclude=/\1:p'` \
        pfx bin $(rsync) -a --delete \\
                --include=/CHANGELOG.txt \\
                $$binskip \\
                --include=synonyms/ \\
                --exclude=squid_redirect \\
                --exclude=/\*/ \\
                bin/. $(HOME)/bin/.
        :make _bin_$((bin_suffixes))
        @echo 'update $(HOME)/lib ...' \
        libskip=`hg status | sed -n 's:^? lib/\(.*\):--exclude=/\1:p'` \
        pfx lib $(rsync) -a --delete \\
                --include=/js \\
                --include=/js/cs \\
                --exclude=/js/* \\
                --include=/perl \\
                --include=/perl/cs \\
                --exclude=/perl/* \\
                --include=/python \\
                --include=/python/cs \\
                --exclude=/python/* \\
                $$libskip \\
                --exclude=/* \\
                --exclude=testdata* \\
                lib/. $(HOME)/lib/.

bin_suffixes = cs darwin

_bin_$((bin_suffixes)):
    @sfx=$(@S[_]) \
    base=bin-$$sfx \
    target=$(HOME)/$$base \
    if [ -d "$$target/" ] \
    then \
      if [ -d "$$base/" ] \
      then \
        echo "update $$target ..." \
        skip=$$( hg status | sed -n 's:^? '"$$base"'/\(.*\):--exclude=/\1:p' ) \
        pfx "$$base" $(rsync) -a --delete $$skip "$$base/" "$$target/" \
      else \
        echo "WARNING: no $$base" >&2 \
      fi \
    else \
      echo "WARNING: no $$target" >&2 \
    fi

# squid_redirect
_all: 1INDEX.txt _submakes _man

_deploy:
        :make _home
        OPTCSS=$(PREFIX) updcss

_publish _pub:
        :make _publish_bitbucket
        #:make _publish_ezos

_publish_ezos:
        :make _deploy
        syncezos

_publish_bitbucket:
        hg push --new-branch -r tip $(hg_bitbucket)
        @echo 'changes visible at $(www_bitbucket)'

# mark the tip as a new release
_release:
        :make _test
        :make _release_force

_release_force:
        cs-release add

_pending:
        cs-release log
        cs-release status
        hg status | grep '^[^?]'; :

_freshmeat:
        cs-release freshmeat-submit

CHANGELOG.txt:	_always
	>>$@; $(rewrite) $@ hglog

CHANGELOG.html:	_always
	>>$@; $(rewrite) $@ cvslog2html -O .

1INDEX.txt: $(allscripts)
	@echo make $@ \
         ( cat INSTALL; mkscriptndx `ls -d $(allscripts) | sort` ) >$@

_man:
        :make _podmans
        :make _pmmans
        :make _scriptmans

_podmans: $(podmans)

$(podmans):     $(podFromMan($@))
        :make $(@D)/.
        >>$@; $(rewrite) $@ pod2man --center="$(title): $?" $?
        chmod 644 $@
        set -uex; htman=$(htmandir)/$(@F).html \
        >>$$htman; $(rewrite) $$htman pod2html --title="$(title): $?" $? \
        chmod 644 $$htman

_pmmans: $(pmmans)

$(pmmans):	$(pmFromMan($@))
	:make $(@D)/.
	@if grep '^=head1 NAME' <$? >/dev/null \
	then \
	    >>$@; $(rewrite) $@ pod2man --center="$(title): $?" $? \
	    chmod 644 $@ \
	    htman=$(htmandir)/$(@F).html \
	    >>$$htman; $(rewrite) $$htman pod2html --title="$(title): $?" $? \
	    chmod 644 $$htman \
	else \
	    : \
	fi

_scriptmans:
        ( cd bin; exec egrep -l '^(# *)?=head1 NAME' $(allscripts) ) \\
	| sed 's|.*|$(scriptmandir)/&.1|' \\
	| xxargs $(MAKE) MANDIR=$(MANDIR)

$(scriptmandir)/%.1: bin/%
	:make $(@D)/.
	@htman=$(htmandir)/$(@F).html \
	 case "`sed 1q <$?`" in \
	    '#!/usr/bin/perl'*) \
		grep '^=head1 NAME' <$? >/dev/null || exit 0 \
		>>$@; $(rewrite) $@ pod2man --release=CSS --section=1cs --center="$(title)" $? \
		>>$$htman; $(rewrite) $$htman pod2html --title="$(title): $?" $? \
		;; \
	    *) \
		grep '^# *=head1 NAME' <$? >/dev/null || exit 0 \
		tmp=$${TMPDIR:-/tmp}/$(@F).$$ \
		unhashpod <$? >$$tmp \
		>>$@; $(rewrite) $@ pod2man --section=1cs --center="$(title)" $$tmp \
		>>$$htman; $(rewrite) $$htman pod2html --title="$(title): $?" $$tmp \
		rm $$tmp \
		;; \
	 esac \
	 chmod 644 $@ $$htman

noads	= $(HOME)/@/adzapper.sf/html/rc/patterns

squid_redirect: $(noads)
	@cd $(?DD) || exit 1 \
	pwd; \
	exec $(MAKE) _scripts

%.class: %.java %.class-prereqs : $(("%.class-prereqs" G?<P)).class
	:make $(("$@-prereqs" E<P)).class
	$(JAVAC) $(@P).java

%.class-prereqs: %.java
	javaprereqs $(@P).java >$@
