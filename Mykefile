:import ARCH

PREFIX          = /opt/css
weblocal        = $(HOME)/@/ezos/html/cs/css
##hg_repos        = sr.ht-css ssh://janus-wg/hg/css ssh://borg-wg/hg/css
hg_repos        = sr.ht-css $${CSS_HG_REPOS}
git_repos       = bitbucket-css github-css
www_sr_ht       = https://hg.sr.ht/~cameron-simpson/css/log
www_bitbucket   = https://bitbucket.org/cameron_simpson/css/commits/all
www_github      = https://github.com/cameron-simpson/css
title           = Cameron Simpson's Scripts

# used for pushing live code direct
RSYNC_TARGET_PYTHON_ENVVAR = RSYNC_TARGET_PYTHON

target  = bin

dev = env-dev -d $. -x
trace = set-x
base_python = "$${PYTHON_EXE:-python3}"
venv_dir = "$${VIRTUAL_ENV:-$./venv-$$ARCH}"
venv_requirements = $./venv-requirements.txt
venv_pip = $(trace) $(venv_python) -m pip
venv_python = $(trace) $(venv_dir)/bin/python
uv = VIRTUAL_ENV=$(venv_dir) $(trace) uv

rewrite = rewriteif -0 -v

JAVADIR	= $(ETCDIR)/www/java/classes
java	= $(localjava) $(subjava)
localjava= $('*.java' G)
subjava	= $('cs/*.java' G?)
classes	= $((java P)).class
subclasses=$((subjava P)).class
html	= $('*.html' G)

htdocs	= $(HOME)/@/ezos/html/cs
htmandir = $(htdocs)/css/manuals
pmsets	= lib/perl/cs
pmset(set) = $('$(set)/*.pm' EG?) \
	     $('$(set)/*/*.pm' EG?) \
	     $('$(set)/*/*/*.pm' EG?)
pmsetmans(set) = $(MANDIR)/man3/$(('$(pmset($(set)))' Es[/]P :|/|::|)).3
pmsethtml(set) = $(htmandir)/$(('$(pmset($(set)))' Es[/]P :|/|::|)).3.html
pmmans = $('$$(pmsetmans($((pmsets))))' EE)
pmhtml = $('$$(pmsethtml($((pmsets))))' EE)
podman(podf) = $(MANDIR)/man$(podf FPS)/$(podf FP)
podmans = $('$$(podman($(("man/*.pod" G))))' EE)
pmFromMan(manf) = lib/$(manf FP :|::|/|).pm
pmFromHtml(html) = lib/$(html FPP :|::|/|).pm
podFromMan(manf) = man/$(manf F).pod

##  pymanmods = cs.vt
##  pymansrcs = $( "$((pymanmods :|\.|/|))/*.?.md" EG )
##  pymanmoddirs = $(pymansrcs DU)
##  pymandst(src) = $(MANDIR)/man$(src FPS)/$(src FP)
##  pymandsts = $( '$$(pymandst("$((pymansrcs))"))' EE )
##  pymansrc(dst) = $
##  
##  _t:
##      echo $(pymansrcs)
##      echo $(pymanmoddirs)
##      echo $(pymandsts)

subdirs = $('*/.' GD)
allscripts = $('bin/*' GF !/\./ +"bin/rc.mobile" F)

scriptmandir = $(MANDIR)/man1
scriptmans = $(scriptmandir)/$((allscripts)).1
scriptfromman(manf) = $(manf FP)

pymdmans= $("lib/python/cs/*.[1-9].md" G?) \
          $("lib/python/cs/*/*.[1-9].md" G?) \
          $("lib/python/cs/*/*/*.[1-9].md" G?)
md2man  = md2man-roff

rsync   = rsync -iJOt --exclude='.*.swp' --exclude='*.pyc' --exclude='__pycache__'

_help:
        @echo '_deploy            - deploy current release to /opt/css'
        @echo '_freshmeat         - announce current release to freshmeat'
        @echo '_home              - deploy scripts to ~/bin etc'
        @echo '_pending           - report unreleased changelog and [M]odified files'
        @echo '_pub               - push to upstream repos'
        @echo '_publish           - deploy current release to /opt/css, ezos and tip to bitbucket'
        @echo '_publish_ezos      - deploy current release to /opt/css, ezos'
        @echo '_publish_hg        - publish to upstream repos'
        @echo '_release           - mark tip as new release'
        @echo '_remote            - rsync the Python tree to $$$(RSYNC_TARGET_PYTHON_ENVVAR)'
        @echo '_tarball           - make a tarball of the tip'
        @echo '_test              - do syntax checks and self tests (may set $$MYKE_TEST_PYTHON_MODULES if desired)'
        @echo '_test3             - do python 3 syntax checks and self tests'
        @echo '_updcss            - deploy current tip to /opt/css'
        @echo '_venv              - make the Python virtual environment based off $(base_python) using $(venv_requirements)'

_setup:
    :make _tags _venv

_venv:
    [ -d $(venv_dir) ] || $(uv) venv --seed $(venv_dir)
    uv_reqs=$$TMPDIR/reqs-uv-$$$$.txt \
    if grep -i '^ *[a-z]' $(venv_requirements) >"$$uv_reqs" \
    then  $(uv) pip install -r "$$uv_reqs" \
    fi
    pip_reqs=$$TMPDIR/reqs-pip-$$$$.txt \
    if grep -i '^ *[^a-z#]' $(venv_requirements) >"$$pip_reqs" \
    then  $(venv_pip) install -r "$$pip_reqs" \
    fi

_tags:  tags
tags:   $("cs/*.py cs/*/*.py cs/*/*/*.py" G)
        ctags-update -o '$@' $?

_updcss:
        ./bin-cs/updcss

_testhost:
        set -ue \
        hosts=$$(hostlist "$$TESTHOST") \
        for testhost in $$hosts \
        do \
          for basedir in . $(PREFIX) \
          do \
            target=$$testhost:$$basedir \
            pfx "$$target/bin" set-x \\
              $(rsync) -a "bin/" "$$target/bin/" & \
            pfx "$$target/lib/python/cs" set-x \\
              $(rsync) -a '--include=*/' '--include=*.py' '--exclude=*' \\
                lib/python/cs/ "$$target/lib/python/cs/" & \
          done \
        done \
        wait

_tarball:
        set -uex \
        rev=tip \
        today=$$(daycode | tr -d -) \
        tardir=css-$$rev-$$today \
        tarball=$$tardir.tar.gz \
        [ -d "$$tardir/." ] || mkdir "$$tardir" \
        ./bin-cs/updcss -r "$$rev" "$$tardir" \
        tar czf "$$tarball" "$$tardir"

_test:
        find lib/python -type f -name '*.py[co]' -ls -delete
        set -x; ./bin-cs/selftest -v --python lib/python cs $$MYKE_TEST_PYTHON_MODULES

_test3:
        find lib/python -type f -name '*.py[co]' -ls -delete
        set -x; ./bin-cs/selftest -v --state state3 --pycmd python3 --python lib/python cs $$MYKE_TEST_PYTHON_MODULES

deploy_dir(targetdir, base, includes) = \
        ( \
          set -ue \
          echo 'update $(targetdir)/$(base) ...' \
          [ -d $(targetdir)/$(base) ] || ( \
            set -x; mkdir -p $(targetdir)/$(base) \
          ) \
          pfx $(targetdir)/$(base) \\
              $(rsync) -a --delete $(base)/. $(targetdir)/$(base)/. \
        )

deploy(targetdir) = \
        ( \
          set -ue \
          tmpdir=$$TMPDIR/css-deploy-$$$$ \
          mkdir "$$tmpdir" \
          ( set -ue \
            hg archive -t files -r tip "$$tmpdir" \
            hg-apply-manifest-dates -r "tip" "$$tmpdir" \
            cd "$$tmpdir" \
            $(deploy_dir($(targetdir), bin, synonyms)) \
            $(deploy_dir($(targetdir), bin-cs, synonyms)) \
            $(deploy_dir($(targetdir), bin-darwin, synonyms)) \
            $(deploy_dir($(targetdir), lib/js/cs, "")) \
            $(deploy_dir($(targetdir), lib/perl/cs, "")) \
            $(deploy_dir($(targetdir), lib/python/cs, "")) \
          ) \
          xit=$$? \
          rm -rf "$$tmpdir" \
          exit $$xit \
        )

_optcss:
        @$(deploy(/opt/css))

_home:
        @$(deploy($(HOME)))

_push:
        set -ue; hg push "ssh://$$HG_PUSH_HOST/$$HG_PUSH_PATH"
        set -ue; incd "$$HG_PUSH_HOST:$$HG_PUSH_PATH" hg up

_remote:
        set -uex; rsync -ia --include=*/ --include=*.py --exclude=* cs/ "$$$(RSYNC_TARGET_PYTHON_ENVVAR)/"


bin_suffixes = cs darwin

_bin_$((bin_suffixes)):
    @sfx=$(@S[_]) \
    base=bin-$$sfx \
    target=$(HOME)/$$base \
    if [ -d "$$target/" ] \
    then \
      if [ -d "$$base/" ] \
      then \
        echo "update $$target ..." \
        skip=$$( hg status | sed -n 's:^? '"$$base"'/\(.*\):--exclude=/\1:p' ) \
        pfx "$$base" hg-shelved $(rsync) -a --delete $$skip "$$base/" "$$target/" \
      else \
        echo "WARNING: no $$base" >&2 \
      fi \
    else \
      echo "WARNING: no $$target" >&2 \
    fi

# squid_redirect
_all: 1INDEX.txt _submakes _man

_deploy:
        :make _home
        OPTCSS=$(PREFIX) updcss

_publish _pub:
        :make _publish_hg _publish_git
        #:make _publish_ezos

_publish_ezos:
        :make _deploy
        syncezos

_publish_git:
        for repo in $(git_repos) \
        do  pfx "$$repo" hg-gitup -a -f -x "$$repo" \
        done
        @echo 'changes visible at $(www_bitbucket)'
        @echo 'code visible at $(www_github)'

_publish_hg:
        for repo in $(hg_repos) \
        do  pfx "$$repo" hg push --new-branch -r tip "$$repo" & \
        done \
        wait
        @echo 'changes visible at $(www_sr_ht)'

# mark the tip as a new release
_release:
        :make _test
        :make _release_force

_release_force:
        cs-release add

_pending:
        cs-release log
        cs-release status
        hg status | grep '^[^?]'; :

_freshmeat:
        cs-release freshmeat-submit

CHANGELOG.txt:	_always
	>>$@; $(rewrite) $@ hglog

CHANGELOG.html:	_always
	>>$@; $(rewrite) $@ cvslog2html -O .

1INDEX.txt: $(allscripts)
	@echo make $@ \
         ( cat INSTALL; mkscriptndx `ls -d $(allscripts) | sort` ) >$@

_man:
        :make _podmans
        :make _pmmans
        :make _scriptmans

_podmans: $(podmans)

$(podmans):     $(podFromMan($@))
        :make $(@D)/.
        >>$@; $(rewrite) $@ pod2man --center="$(title): $?" $?
        chmod 644 $@
        set -uex; htman=$(htmandir)/$(@F).html \
        >>$$htman; $(rewrite) $$htman pod2html --title="$(title): $?" $? \
        chmod 644 $$htman

_pmmans: $(pmmans)

$(pmmans):	$(pmFromMan($@))
	:make $(@D)/.
	@if grep '^=head1 NAME' <$? >/dev/null \
	then \
	    >>$@; $(rewrite) $@ pod2man --center="$(title): $?" $? \
	    chmod 644 $@ \
	    htman=$(htmandir)/$(@F).html \
	    >>$$htman; $(rewrite) $$htman pod2html --title="$(title): $?" $? \
	    chmod 644 $$htman \
	else \
	    : \
	fi

_scriptmans:
        ( cd bin; exec egrep -l '^(# *)?=head1 NAME' $(allscripts) ) \\
	| sed 's|.*|$(scriptmandir)/&.1|' \\
	| xxargs $(MAKE) MANDIR=$(MANDIR)

$(scriptmandir)/%.1: bin/%
	:make $(@D)/.
	@htman=$(htmandir)/$(@F).html \
	 case "`sed 1q <$?`" in \
	    '#!/usr/bin/perl'*) \
		grep '^=head1 NAME' <$? >/dev/null || exit 0 \
		>>$@; $(rewrite) $@ pod2man --release=CSS --section=1cs --center="$(title)" $? \
		>>$$htman; $(rewrite) $$htman pod2html --title="$(title): $?" $? \
		;; \
	    *) \
		grep '^# *=head1 NAME' <$? >/dev/null || exit 0 \
		tmp=$${TMPDIR:-/tmp}/$(@F).$$ \
		unhashpod <$? >$$tmp \
		>>$@; $(rewrite) $@ pod2man --section=1cs --center="$(title)" $$tmp \
		>>$$htman; $(rewrite) $$htman pod2html --title="$(title): $?" $$tmp \
		rm $$tmp \
		;; \
	 esac \
	 chmod 644 $@ $$htman

noads	= $(HOME)/@/adzapper.sf/html/rc/patterns

squid_redirect: $(noads)
	@cd $(?DD) || exit 1 \
	pwd; \
	exec $(MAKE) _scripts

%.class: %.java %.class-prereqs : $(("%.class-prereqs" G?<P)).class
	:make $(("$@-prereqs" E<P)).class
	$(JAVAC) $(@P).java

%.class-prereqs: %.java
	javaprereqs $(@P).java >$@
