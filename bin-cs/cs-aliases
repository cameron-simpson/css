#!/usr/bin/env python -tt
#
# Tool to manipulate my email address table.
#       - Cameron Simpson <cs@cskk.id.au> 26apr2008
#

import sys
import re
import string
from os import environ
import os.path
from email.parser import Parser
from email.utils import getaddresses, formataddr
from getopt import GetoptError
import cs.sh
from cs.lex import unrfc2047
from cs.mailAddresses import addressKey, loadAddresses, addrsRegexp
import cs.logutils
from cs.logutils import setup_logging, error, Pfx, warning

aliases = environ.get('CS_ALIASES',
                      os.path.join(environ['HOME'], 'rc', 'mail', 'aliases2'))
re_syntax = 'TEXT'
re_prefix = 'cs_aliases'
new_syntax = 'MAILITEM'

def main(argv):
  global aliases, byCategory, byAddress
  cmd = os.path.basename(sys.argv[0])
  setup_logging(cmd)

  usage = '''Usage:
  %s [-f aliasfile] [list]
    Recite categories and core addresses.
  %s [-f aliasfile] new <addresses"
    Print new addresses.
  %s [-f aliasfile] re [-sh] [categories...]
    Print categories and regular expressions.
      -sh        Use /bin/sh syntax.
  Global options:
    -f aliasfile Specify alias file. Default: %s, from $CS_ALIASES.''' \
  % (cmd, cmd, cmd, aliases)

  xit = 0

  badopts = False
  args = sys.argv[1:]
  if args and args[0] == '-f':
    with Pfx(args.pop(0)):
      if not args:
        error("missing 'aliases'")
        badopts = True
      else:
        aliases = args.pop(0)

  if not args:
    op = "list"
  else:
    op = args.pop(0)

  with Pfx(op):
    try:
      op_func = getattr(sys.modules[__name__], "cmd_" + op)
    except AttributeError:
      error("unknown operation")
      badopts = True

    if not badopts:
      with Pfx(aliases):
        ok, byCategory, byAddress = loadAddresses(aliases)
        if not ok:
          warning("some aliases failed to load")
          xit = 1
      cats = byCategory.keys()
      cats.sort()
      try:
        xit = op_func(args)
      except GetoptError, e:
        error("%s", e)
        badopts = True

  if badopts:
    print >>sys.stderr, usage
    xit = 2

  return xit

def cmd_list(args):
  if not args:
    args = byAddress.keys()
    args.sort()
  for addr in args:
    info = byAddress[addr]
    print "%-23s %s" % (','.join(info.categories), info.address)
  return 0

def cmd_new(args):
  ''' Read address information from stdin, recite new addresses on stdout.
  '''
  if args:
    raise GetoptError, "extra arguments: %s" % (" ".join(args),)
  xit = 0
  if new_syntax == 'PLAIN':
    # Raw email addresses.
    lineno = 0
    for line in sys.stdin:
      lineno+=1
      with Pfx("stdin, line %d" % (lineno,)):
        if not line.endswith('\n'):
          error("unexpected EOF")
          xit = 1
          break
        addr = line.strip()
        if len(addr) == 0:
          continue
        with Pfx("addr"):
          addrkey = addressKey(addr)
          if addrkey is None:
            error("unparsed")
            xit = 1
          elif addrkey not in byAddress:
            print "%s %s" % (addr, parseaddr(addr))
  elif new_syntax == 'MAILITEM':
    # A mail message.
    M = Parser().parse(sys.stdin, True)
    seen = []
    for hdr in 'from', 'sender', 'to', 'cc', 'bcc', 'return-path':
      hdr_values = []
      for value in M.get_all(hdr, []):
        try:
          hdr_values.append(unrfc2047(value))
        except ValueError:
          hdr_value.append(value)
      for name, coreaddr in getaddresses(hdr_values):
        addrkey = coreaddr.lower()
        if addrkey not in byAddress and addrkey not in seen:
          seen.append(addrkey)
          print formataddr((name,coreaddr))
  return xit

def cmd_re(args):
  global re_syntax
  if args and args[0] == '-sh':
    args.pop(0)
    re_syntax = 'SH'
  if not args:
    args = byCategory.keys()
    args.sort()
  for cat in args:
    re = '\\<('+addrsRegexp(byCategory[cat].keys())+')\\>'
    if re_syntax == 'TEXT':
      print cat, re
    elif re_syntax == 'SH':
      print "%s_%s=%s; export %s_%s" \
            % (re_prefix, cat, cs.sh.quotestr(re), re_prefix, cat)
    else:
      error("unimplemented re syntax \"%s\"")
      return 1
  return 0

if __name__ == '__main__':
  sys.exit(main(sys.argv))
