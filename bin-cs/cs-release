#!/bin/sh -ue
#
# General release stuff for packages.
#       - Cameron Simpson <cs@zip.com.au> 28feb2009
#

trace=set-x
relpfx=release

cmd=$( basename "$0" )
usage="Usage: $cmd [-p relpfx] op [args...]
  -p relpfx Prefix for new release tag names. Default: $relpfx
  op:
    add         Issue a new release.
    last        Report last release issued.
    next        Generate a new release number.
    log         Changelog from last release to now.
    export      Export release to temporary directory, report directory.
    freshmeat-submit
                Announce last release to freshmeat."

badopts=

while [ $# -gt 0 ]
do
  case $1 in
    -p) relpfx=$2; shift ;;
    --) shift; break ;;
    -?*)echo "$cmd: unrecognised option: $1" >&2; badopts=1 ;;
    *)  break ;;
  esac
  shift
done

case "$relpfx" in
  [a-z]*) ;; *) echo "$cmd: -p: invalid relpfx, must start with a lowercase letter, got: $relpfx" >&2
                badopts=1
                ;;
esac

if [ $# = 0 ]
then
  echo "$cmd: missing op" >&2
  badopts=1
else
  op=$1
  shift
fi

[ $badopts ] && { echo "$usage" >&2; exit 2; }

# self invoke, passing tunable settings
self(){
  $trace "$0" -p "$relpfx" ${1+"$@"}
}

case $op in
  last)
    lastrelease=$( $trace hg tags | sed -n "/^$relpfx-[1-9][01][0-9][0-9][01][0-9][0-3][0-9]/{s/^release-//; s/ .*//; p; q;}" )
    [ -n "$lastrelease" ] || exit 1
    printf "%s\n" "$lastrelease"
    exit 0
    ;;

  next)
    lastrelease=$( self last ) || lastrelease=
    today=$( date +%Y%m%d )
    if [ -z "$lastrelease" ]
    then
      release=$today
    else
      if [ "x$lastrelease" '<' "x$today" ]
      then
        release=$today
      else 
        if [ "x$lastrelease" = "x$today" ]
        then
          release=${today}.2
        else
          case "$lastrelease" in
            "$today".[1-9] )
              sfx=$( expr "x$lastrelease" : "x$today".'\([1-9][0-9]*\).*' )
              release=$today.$( expr "$sfx" + 1 )
              ;;
            *)
              echo "$cmd: can't compute next release from \"$lastrelease\"" >&2
              exit 1
              ;;
          esac
        fi
      fi
    fi
    printf "%s\n" "$release"
    exit 0
    ;;

  log)
    lastrelease=$relpfx-$( self last ) || lastrelease=0
    $trace hg log -r "$lastrelease:" \
                  --template '{files}: {desc|firstline}\n' \
    | $trace sed "/^\\.hg/d; /^CHANGELOG/d; /^$relpfx-/d"
    ;;

  add)
    lastrelease=$relpfx-$( self last ) || lastrelease=0
    log=$( self log )
    [ -n "$log" ] || exit 1
    uncommited=$( $trace hg status | grep -v '^?' || : )
    if [ -n "$uncommited" ]
    then
      echo "Uncommited changes exist:"
      printf "%s\n" "$uncommited"
      echo "These changes will not be included in the release."
      ask "Proceed anyway" || exit 1
    fi
    echo "Changes since $lastrelease:"
    self log
    echo
    echo "Enter short change summary since $lastrelease."
    changefile=$TMPDIR/$cmd.$$.changes
    readdottext >"$changefile"
    [ -s "$changefile" ] || exit 1
    while echo
          cat "$changefile"
          echo
          ask "Edit the changes"
    do
      "$EDITOR" "$changefile"
    done
    [ -s "$changefile" ] || exit 1
    newrelease=$( self next )
    [ -n "$newrelease" ] || exit 1
    echo
    ask "Ok to mark release as $newrelease" || exit 1
    newtag=$relpfx-$newrelease
    reldir=$relpfx/$newrelease
    $trace mkdir "$reldir"
    printf "%s\n" "$newtag" >"$reldir/release-tag.txt"
    $trace mv "$changefile" "$reldir/SUMMARY.txt"
    $trace hg log -r "$lastrelease:tip" >"$reldir/CHANGES.txt"
    $trace hg add "$reldir"
    summary_text=$( cat "$reldir/SUMMARY.txt" )
    $trace hg commit -m "Release information for $newtag.
Summary:
$summary_text" "$reldir"
    $trace hg tag "$newtag"
    ;;

  export)
    exec 3>&1 1>&2
    rev=
    usage="Usage: $cmd $op [-r rev]"
    badopts=
    while [ $# -gt 0 ]
    do
      case $1 in
        -r) rev=$2; shift ;;
        --) shift; break ;;
        -?*)echo "$cmd: $op: unrecognised option: $1" >&2
            badopts=1
            ;;
        *)  break ;;
      esac
      shift
    done

    [ $# = 0 ] || { echo "$cmd: extra arguments: $*" >&2
                    badopts=1
                  }

    [ $badopts ] && { echo "$usage" >&2; exit 2; }

    if [ -z "$rev" ]
    then
      rev=$( self last )
      rev=$relpfx-$rev
    fi

    xit=0

    set -ue

    unset tmpdir
    trap '[ ! -d "$tmpdir" ] || rm -rf $tmpdir; exit 1' 1 2 13 15
    tmpdir=$( mkdirn "$TMPDIR/$cmd" )

    dstdir=$tmpdir
    echo archive revision $rev ...
    hg archive -t files -r "$rev" "$dstdir"
    echo update file timestamps ...
    hg-apply-manifest-dates -r "$rev" "$dstdir"

    echo "$dstdir" >&3
    exit $xit
    ;;

  freshmeat-submit)
    unset fm_project \
          fm_url_home \
          fm_url_tarball \
          fm_url_changelog
    cf=.freshmeatrc
    [ -s "$cf" ] || { echo "$cmd: missing $cf" >&2; exit 1; }
    eval $( winclausevars "$cf" freshmeat fm )
    lastrelease=$( self last )
    [ -n "$lastrelease" ] || exit 1
    summary=$( $trace cat release/$lastrelease/SUMMARY.txt )
    [ -n "$summary" ] || exit 1
    printf "%s\n" "$summary"
    ask "Confirm freshmeat-submit of release $lastrelease to project $fm_project"
    ( echo "Project: $fm_project"
      echo "Version: $lastrelease"
      echo "Release-Focus: Minor feature enhancements"
      echo "Hide: N"
      echo "Website-URL: $fm_url_home"
      echo "Tar/GZ-URL: $fm_url_tarball"
      echo "Changelog-URL: $fm_url_changelog"
      echo
      printf "%s\n" "$summary"
    ) \
    | $trace freshmeat-submit
    ;;

  *)echo "$cmd: unimplemented op \"$op\"" >&2
    exit 2
    ;;

esac
