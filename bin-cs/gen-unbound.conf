#!/bin/sh
#
# Construct an unbound.conf(5) file.
# Extracted from rig-unbound.
#       - Cameron Simpson <cs@cskk.id.au> 26jul2012
#

set -ue

: "${HOST:=$( hostname | sed 's/\..*//' )}"
: "${VARRUN:=$HOME/var/run}"
: "${LOGDIR:=$HOME/var/log}"
: "${TMPDIR:=/tmp}"
: "${UNBOUND_DNS_UPSTREAM:=}"     # server set, eg: opennic
: "${UNBOUND_INCOMING_IPS:='127.0.0.1'}"
: "${UNBOUND_INCOMING_RANGES:='127.0.0.1'}"

trace=
username=`id -un`
outgoing_ip=
logdir=$LOGDIR/unbound
pidfile=$VARRUN/unbound.pid
wkdir=$HOME/var/unbound
log=$logdir/unbound.log
localzones="l local"
localnets="127 192.168 172.16 10.0"
host_conf=$HOME/rc/dns/unbound.conf-$HOST
verbose=0

cmd=`basename "$0"`
usage="Usage: $cmd [-I incoming-address] [-O outgoing-address] [-u username] [--] [upstream-forwards...]
    -I incoming-addresses Interface addresses. Default from \$UNBOUND_INCOMING_IPS: $UNBOUND_INCOMING_IPS
    -O outgoing-address Outgoing address. Default from interface with default route.
    -u username         Username for \"server:\" section. Default from \`id -un\`.
    -v                  Verbose. Each use increases the verbose: setting.
    -x                  Trace execution of some parts."

badopts=

while [ $# -gt 0 ]
do
  case $1 in
    -I) UNBOUND_INCOMING_IPS=$2; shift ;;
    -O) outgoing_ip=$2; shift ;;
    -u) username=$2; shift ;;
    -v) verbose=$(( verbose + 1 )) ;;
    -x) trace=set-x ;;
    --) shift; break ;;
    -?*)echo "$cmd: unrecognised option: $1" >&2
        badopts=1
        ;;
    *)  break ;;
  esac
  shift
done

[ $badopts ] && { echo "$usage" >&2; exit 2; }

if [ -z "$outgoing_ip" ]
then
  # pick the first mentioned default interface
  outgoing_if=$( netstat -rn | awk '$1 == "default" { print $6; exit }' )
  [ -n "$outgoing_if" ] || outgoing_if=$( netstat -rn | awk '$1 == "default" { print $4; exit }' )
  if [ -z "$outgoing_if" ]
  then
    netstat -rn >&2
    echo >&2
    echo "$cmd: warning: no outbound interface" >&2
  else
    outgoing_ip=$( ifconfig "$outgoing_if" | sed -n 'y/	/ /; s/.* inet  *\([1-9][0-9.]*[0-9]\) .*/\1/p' )
    if [ -z "$outgoing_ip" ]
    then
      echo "$cmd: warning: no inet addr on interface $outgoing_if" >&2
      ifconfig "$outgoing_if" >&2
    fi
  fi
fi

tmppfx=$TMPDIR/$cmd.$$
tmplocal=$tmppfx.local.txt
tidy(){
  rm -f -- "$tmppfx".*
}
trap tidy 0 1 3 15

cat <<X
server:
  directory: "$wkdir"
  do-ip6: no
  username: "$username"
  logfile: "$log"
  pidfile: "$pidfile"
  log-queries: yes
  verbosity: $verbose
  ##interface-automatic: yes
  ## # default is "3 2 1 0 0"
  ## target−fetch−policy: "−1 −1 −1 −1 −1"
X

for ip in $UNBOUND_INCOMING_IPS
do  eth=$( eth "$ip" )
    [ -n "$eth" ] && echo "  interface: $ip"
done

for iprange in $UNBOUND_INCOMING_RANGES
do  echo "  access-control: $iprange allow"
done

# specify an outgoing interface for the primary IP of each interface
# in the default route
netstat -rn \
| awk '$1 == "default" { if ($6 != "") {print $6} else if ($4 != "") { print $4}}' \
| sort -u \
| while read ifname
  do
    ifconfig "$ifname" \
    | awk '$1 == "inet" { ipv4=$2 }
           END { if (ipv4 != "") {
                   print "  outgoing-interface:", ipv4
                 } }'
  done

sed 's/^/  /' "$host_conf"

( while read ip hosts
  do
    case "$ip" in
      '' | \#* ) continue ;;
    esac
    for host in $hosts
    do
      for zone in $localzones
      do
        case "$host" in
          *.$zone)
            hostbase=`basename "$host" ".$zone"`
            echo "$ip $hostbase"
            ;;
          *.*) ;;
          *)echo "$ip $host" ;;
        esac
      done
    done
  done
) </etc/hosts >"$tmplocal"

# forward mappings
for zone in $localzones
do
  echo
  echo "local-zone: \"$zone.\" static"
  awk '{print $2, $1}' <"$tmplocal" \
  | sort -u \
  | \
  while read host ip
  do
    case "$ip" in
      *::*) echo "  local-data: \"$host.$zone. 10 IN AAAA $ip\"" ;;
      *)    echo "  local-data: \"$host.$zone. 10 IN A $ip\"" ;;
    esac
  done
done

# reverse mappings
for zone in $localnets
do
  echo
  echo "local-zone: \"$zone.in−addr.arpa.\" static"
  sort -u <"$tmplocal" \
  | \
  while read ip host
  do
    case "$ip" in
      $zone.*)
        in_addr=
        for octet in `echo $ip | tr . '\012' | reverse`
        do  in_addr=$in_addr$octet.
        done
        for lzone in $localzones
        do
          echo "  local-data: \"${in_addr}in-addr.arpa. 10 IN PTR $host.$lzone.\""
        done
        ;;
    esac
  done
done

for zonefile in $HOME/rc/dns/*.zone
do
  zone=$( basename "$zonefile" | sed 's/\..*//' )
  echo "local-zone: \"$zone\" static"
  sed 's/ *\(.*\)/  local-data: "\1"/' "$zonefile"
done

if [ $# -gt 0 ]
then
  cat <<X
  forward-zone:
    name: "."
X
  for dnsup
  do
    case "$dnsup" in
      [a-z]*)
        resolv=$HOME/rc/dns/resolv-$dnsup.conf
        $trace sed -n 's/ *#.*//; s/^nameserver  *//p' "$resolv" | shuffle
        ;;
      *)$trace echo "$dnsup"
        ;;
    esac
  done \
  | while read dnsip
    do  echo "    forward-addr: $dnsip"
    done
fi
