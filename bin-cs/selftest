#!/bin/sh
#
# Run self tests.
#       - Cameron Simpson <cs@zip.com.au> 10dec2011
#

set -ue

cmd=`basename "$0"`

main()
{
  usage="Usage: $cmd [-v] [-x] [--state statedir] [--pycmd python-shcmd] [--python pylibdir pysubtree [modules...]]..."

  trace=${DEBUG:+set-x}
  vecho=${DEBUG:+echo}${DEBUG:-:}
  vvecho=${DEBUG:+echo}${DEBUG:-:}
  statedir=state
  pycmd='python -3 -tt'
  ##[ -t 1 ] && vecho=echo

  badopts=

  while [ $# -gt 0 ]
  do
    case $1 in
      -x)
        trace=set-x ;;
      -v)
        vecho=echo ;;
      -vv)
        vecho=echo
        vvecho=echo
        ;;
      --state)
        statedir=$2; shift ;;
      --pycmd)
        pycmd=$2; shift ;;
      --python)
        pylibdir=$2
        pysubdir=$3
        shift; shift; shift
        pymodules=
        while [ $# -gt 0 ]
        do
          case "$1" in
            [a-z]*)
              pymodules="$pymodules $1"
              shift
              continue
              ;;
          esac
          break
        done
        test_python "$pycmd" "$pylibdir" "$pysubdir" $pymodules || return $?
        continue
        ;;
      --)
        shift; break ;;
      -?*)
        echo "$cmd: unrecognised option: $1" >&2
        badopts=1
        ;;
    esac
    shift
  done

  [ $# = 0 ] || { echo "$cmd: extra arguments: $*" >&2; badopts=1; }

  [ $badopts ] && { echo "$usage" >&2; return 2; }

  return 0
}

stateful()
{
  [ $# -gt 2 ] \
  || { echo "$cmd: Usage: stateful type srcfile command [args...]" >&2
       return 2
     }
  _s_type=$1
  _s_srcfile=$2
  shift; shift
  _s_statefile=$statedir/$_s_type/$_s_srcfile
  if [ "$_s_statefile" -nt "$_s_srcfile" ]
  then
    if [ -s "$_s_statefile" ]
    then $vvecho "SKIP $_s_type $_s_srcfile - newer $_s_statefile"
    else $vecho "FAIL $_s_type $_s_srcfile (cached)" >&2
    fi
  else
    [ ! -e "$_s_statefile" ] || rm -f -- "$_s_statefile"
    _s_statedir=`dirname "$_s_statefile"`
    [ -d "$_s_statedir" ] || mkdir -p "$_s_statedir"
    if $trace pfx "$_s_srcfile" env-dev "$@"
    then
      $vecho "OK $_s_type $_s_srcfile"
      echo 1 >"$_s_statefile"
    else
      echo "FAIL $_s_type $_s_srcfile" >&2
      >"$_s_statefile"
    fi
  fi
  [ -s "$_s_statefile" ]
}

list_python_files()
{
  [ $# -ge 2 ] \
  || { echo "$cmd: Usage: list_python_files pylibdir pysubdir [modules...]" >&2
       echo "  got $# args: 0=$0 $*" >&2
       return 2
     }
  _lpf_pylibdir=$1
  _lpf_pysubdir=$2
  shift; shift

  if [ $# -gt 0 ]
  then
    for _lpf_module
    do
      echo "$_lpf_pylibdir/"`echo "$_lpf_module" | tr . /`.py
    done
  else
    find "$_lpf_pylibdir/$_lpf_pysubdir" -type f -name \*.py -print
  fi \
  | sort
}

test_python()
{
  [ $# -ge 3 ] \
  || { echo "$cmd: Usage: test_python pycmd pylibdir pysubdir [modules...]" >&2
       echo "  got $# args: 0=$0 $*" >&2
       return 2
     }

  (
    set -ue
    _tpy_pycmd=$1
    _tpy_pylibdir=$2
    _tpy_pysubdir=$3
    shift; shift; shift

    _tpy_xit=0

    $vecho "syntax check $_tpy_pylibdir/$_tpy_pysubdir ..."
    list_python_files "$_tpy_pylibdir" "$_tpy_pysubdir" ${1+"$@"} \
    | \
    ( xit=0 
      while read -r py 
      do 
        stateful syntax "$py" $_tpy_pycmd -m py_compile "$py" \
        || xit=1
      done 
      exit $xit 
    ) || _tpy_xit=1

    $vecho "import check $_tpy_pylibdir/$_tpy_pysubdir ..."
    list_python_files "$_tpy_pylibdir" "$_tpy_pysubdir" ${1+"$@"} \
    | \
    ( xit=0 
      while read -r py 
      do 
        pym=`expr "x$py" : "x$_tpy_pylibdir"'/\(.*\).py' | tr / .` 
        stateful import "$py" $_tpy_pycmd -c "import $pym" \
        || xit=1
      done 
      exit $xit 
    ) || _tpy_xit=1

    $vecho "unit test $_tpy_pylibdir/$_tpy_pysubdir ..."
    list_python_files "$_tpy_pylibdir" "$_tpy_pysubdir" ${1+"$@"} \
    | \
    ( xit=0 
      while read -r py 
      do 
        unitest=`sed -n '${/^ *unittest\.main(/p;/^ *selftest(/p;}' "$py"` 
        [ -n "$unitest" ] || continue 
        pym=`expr "x$py" : "x$_tpy_pylibdir"'/\(.*\).py' | tr / .` 
        stateful unittest "$py" $_tpy_pycmd -tt -u -B -m "$pym" \
        || xit=1
      done 
      exit $xit 
    ) || _tpy_xit=1

    exit $_tpy_xit
  ) || return $?

  return 0
}

main ${1+"$@"}
