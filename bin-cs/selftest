#!/bin/sh
#
# Run self tests.
#       - Cameron Simpson <cs@zip.com.au> 10dec2011
#

set -ue

cmd=`basename "$0"`

main()
{
  usage="Usage: $cmd [-v] [-x] [--python pylibdir pysubtree]..."

  trace=${DEBUG:+set-x}
  vecho=:
  vvecho=:
  ##[ -t 1 ] && vecho=echo

  badopts=

  while [ $# -gt 0 ]
  do
    case $1 in
      -x)
        trace=set-x ;;
      -v)
        vecho=echo ;;
      -vv)
        vecho=echo
        vvecho=echo
        ;;
      --python)
        pylibdir=$2
        pysubdir=$3
        shift; shift
        test_python "$pylibdir" "$pysubdir" || return $?
        ;;
      --)
        shift; break ;;
      -?*)
        echo "$cmd: unrecognised option: $1" >&2
        badopts=1
        ;;
    esac
    shift
  done

  [ $# = 0 ] || { echo "$cmd: extra arguments: $*" >&2; badopts=1; }

  [ $badopts ] && { echo "$usage" >&2; return 2; }

  return 0
}

test_python()
{
  [ $# = 2 ] || { echo "$cmd: Usage: test_python pylibdir pysubdir" >&2; return 2; }

  (
    pylibdir=$1
    pysubdir=$2

    $vecho "syntax check $pylibdir/$pysubdir ..."
    find "$pylibdir/$pysubdir" -type f -name \*.py -print \
    | sort \
    | \
    ( xit=0 
      while read -r py 
      do 
        pyc_state=state/pyc/$py
        if [ "$pyc_state" -nt "$py" ]
        then  $vvecho "SKIP syntax $py - newer $pyc_state"
        else
          rm -f -- "$pyc_state"
          if $trace pfx "$py" env-dev python -3 -tt -m py_compile "$py"
          then  $vecho "OK syntax $py"; d=`dirname "$pyc_state"`; mkdir -p "$d"; >>"$pyc_state"
          else  echo "FAIL syntax $py" >&2; xit=1
          fi
        fi
      done 
      exit $xit 
    ) || exit $?

    $vecho "import check $pylibdir/$pysubdir ..."
    find "$pylibdir/$pysubdir" -type f -name \*.py -print \
    | sort \
    | \
    ( xit=0 
      while read -r py 
      do 
        pyc_state=state/pyi/$py
        if [ "$pyc_state" -nt "$py" ]
        then  $vvecho "SKIP import $py - newer $pyc_state"
        else
          rm -f -- "$pyc_state"
          pym=`expr "x$py" : "x$pylibdir"'/\(.*\).py' | tr / .` 
          if $trace pfx "$py" env-dev python -3 -tt -c "import $pym"
          then  $vecho "OK import $py"; d=`dirname "$pyc_state"`; mkdir -p "$d"; >>"$pyc_state"
          else  echo "FAIL syntax $py" >&2; xit=1
          fi
        fi
      done 
      exit $xit 
    ) || exit $?

    $vecho "unit test $pylibdir/$pysubdir ..."
    find "$pylibdir/$pysubdir" -type f -name \*.py -print \
    | sort \
    | \
    ( xit=0 
      while read -r py 
      do 
        unitest=`sed -n '${/^ *unittest\.main(/p;/^ *selftest(/p;}' "$py"` 
        [ -n "$unitest" ] || continue 
        pyu_state=state/pyu/$py
        if [ "$pyu_state" -nt "$py" ]
        then  $vvecho "SKIP unittest $py - newer $pyu_state"
        else
          d=`dirname "$pyu_state"`; [ -d "$d" ] || mkdir -p "$d"
          >>"$pyu_state"
          rm -f "$pyu_state"
          pym=`expr "x$py" : "x$pylibdir"'/\(.*\).py' | tr / .` 
          if $trace env-dev -x python -tt -u -B -m "$pym"
          then  $vecho "OK unittest $py"; >>"$pyu_state"
          else  echo "FAIL: unitest $py" >&2; exit 1
          fi
        fi
      done 
      exit $xit 
    ) || exit $?
  ) || return $?

  return 0
}

main ${1+"$@"}
