#!/usr/bin/env python3
#
# Shorten a path (the current directory by default) using various criteria.
#   - Cameron Simpson <cs@cskk.id.au>
#
# prefix ==> ~ or ~user
# do not shorten VCS top
# look for SYMLINK to lower path and replace
# while 

import os
from os.path import basename, dirname, join as joinpath
import pwd
import stat
import sys
from cs.logutils import setup_logging, warning, error

USAGE = "Usage: %s [path]"

def main(argv):
  cmd = basename(argv.pop(0))
  setup_logging(cmd)
  usage = USAGE % (cmd,)
  badopts = False
  if argv:
    path = argv.pop(0)
  else:
    path = os.getcwd()
  if argv:
    warning("extra arguments: %s", argv)
    badopts = True
  if badopts:
    print(usage, file=sys.stderr)
    return 2
  print(short_path(path))

def short_path(path, no_tilde=False, no_symlinks=False):
  # stat the path components
  components = []
  while True:
    P = PathInfo(path)
    components.append(P)
    newpath = dirname(path)
    if newpath == path:
      break
    path = newpath
  # post: path is '/' or the empty string, useful as prefix
  components = list(reversed(components))
  components[0].present_as = path + components[0].path
  # construct new path
  # look for ~ or ~user
  homedirs = {}
  i = len(components)
  for P in reversed(components):
    i -= 1
    uid = P.uid
    if uid is None:
      continue
    if uid not in homedirs:
      try:
        pw = pwd.getpwuid(uid)
      except KeyError as e:
        ##warning("getpwuid(%d): %s", uid, e)
        homedirs[uid] = None
        continue
      homedirs[uid] = (pw, PathInfo(pw.pw_dir))
    PH = homedirs[uid]
    if PH is None:
      # known bad uid
      continue
    pw, UH = PH
    if UH == P:
      if pw.pw_uid == os.geteuid():
        prefix = '~'
      else:
        prefix = '~' + pw.pw_name
      components = components[i:]
      components[0].present_as = prefix
      break
  # now look for SYM => later component
  pos = 0
  while pos < len(components) - 1:
    P = components[pos]
    if not P.is_dir:
      break
    probe_dir = P.path
    # examine symbolic links at this level
    matched_name = None
    matched_pos = None
    for entry in sorted(os.listdir(probe_dir)):
      if not entry.isalpha():
        continue
      E = PathInfo(joinpath(probe_dir, entry))
      if not E.is_lnk:
        continue
      # follow the symlink
      try:
        ES = os.stat(E.path)
      except OSError as e:
        ##warning("%s: skipping: %s", E.path, e)
        continue
      else:
        E.stat = ES
      Ekey = statkey(ES)
      # see if it reaches deep into the remaining components
      i2 = len(components)
      for P2 in reversed(components):
        i2 -= 1
        if i2 <= pos + 1:
          break
        if E != P2:
          continue
        if matched_name is None or matched_pos <= i2:
          matched_name = entry
          matched_pos = i2
          matched_P = P2
          break
    if matched_name is not None:
      components = components[:pos+1] + components[matched_pos:]
      matched_P.present_as = matched_name
    pos += 1
  if components[0].path == '.':
    components.pop(0)
  return joinpath(*[P.present_as for P in components])

def statkey(S):
  return S.st_dev, S.st_ino

pathinfo = {}
statinfo = {}

class PathInfo:
  def __init__(self, path):
    global pathinfo, statinfo
    if path == '':
      path = '.'
    self.path = path
    self.present_as = self.base
    try:
      self.stat = os.lstat(path)
    except OSError as e:
      ##warning("lstat(%s): %s", path, e)
      self.stat = None
    pathinfo[path] = self
    statinfo[self.key] = self
  def __repr__(self):
    if self.present_as == self.path:
      return "PathInfo(%r)" % (self.path,)
    return "PathInfo(%r:%r)" % (self.path, self.present_as)
  def __eq__(self, other):
    key = self.key
    if key is None:
      return False
    okey = other.key
    if okey is None:
      return False
    return key == okey
  @property
  def key(self):
    S = self.stat
    if S is None:
      return None
    return statkey(S)
  @property
  def base(self):
    return basename(self.path)
  @property
  def uid(self):
    S = self.stat
    if S is None:
      return None
    return S.st_uid
  @property
  def is_lnk(self):
    S = self.stat
    return S is not None and stat.S_ISLNK(S.st_mode)
  @property
  def is_dir(self):
    S = self.stat
    return S is not None and stat.S_ISDIR(S.st_mode)

if __name__ == '__main__':
  sys.exit(main(sys.argv))
