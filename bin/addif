#!/bin/sh
#
# Add a logical interface with the specified address.
# Allocates a fresh logical interface on the fly.
#	- Cameron Simpson <cs@zip.com.au> 12may2005
#

set -ue

: ${ADDIF:=eth0}	# default base interface
: ${ADDIF_LOW:=1}	# default base subinterface number

trace=
baseif=$ADDIF
basen=$ADDIF_LOW
netmask=

cmd=`basename "$0"`
usage="Usage: $cmd [-b basen] [-i baseif] [-m netmask] [-n] ipaddr...
	-b basen	Base number. Default, from \$ADDIF_LOW: $basen
	-i baseif	Base interface. Default, from \$ADDIF: $baseif
	-m mask		Interface netmask. Default: from the base interface.
	-n		No action. Recite commands."

badopts=

while [ $# -gt 0 ]
do
  case $1 in
    -b)	basen=$2; shift ;;
    -i)	baseif=$2; shift ;;
    -m)	netmask=$2; shift ;;
    -n)	trace=echo ;;
    --)	shift; break ;;
    -?*)echo "$cmd: unrecognised option: $1" >&2
	badopts=1
	;;
    *)	break ;;
  esac
  shift
done

if [ $# = 0 ]
then
  echo "$cmd: missing ipaddrs" >&2
  badopts=1
else
  [ "x$*" = x- ] && set -- `cat`
fi

# check final baseif
synok=1
case "$baseif" in
  *:* | *[!a-z0-9]* )
    synok=
    ;;
  lo | [a-z]*[0-9])
    ;;
  *)synok=
    ;;
esac
if [ $synok ]
then
  ifconfig "$baseif" >/dev/null \
  || { echo "$cmd: can't find baseif \"$baseif\"" >&2
       badopts=1
     }
else
  echo "$cmd: bad baseif name \"$baseif\": should match ^[a-z]+[0-9]+\$" >&2
  badopts=1
fi

[ $badopts ] && { echo "$usage" >&2; exit 2; }

xit=0

os=`uname -s` || exit 1
usecolons=
case "$os" in
  # the BSDs have much saner ifconfig use
  OpenBSD|Darwin|FreeBSD|NetBSD) ;;
  *) usecolons=1 ;;
esac

if [ -z "$netmask" ]
then
  netmask=`ifconfig "$baseif" | sed -n 's/.* Mask:\([^ ]*\).*/\1/p' | sed 1q`
  [ -n "$netmask" ] || netmask=`ifconfig "$baseif" | sed -n 's/.* netmask \(0x[0-9a-f]*\).*/\1/p' | sed 1q`
  [ -n "$netmask" ] || { echo "$cmd: can't deduce netmask for $baseif" >&2
			 exit 1
		       }
fi

if [ $usecolons ]
then
  inuse=`ifconfig -a | sed -n "s/^$baseif"':\\([0-9][0-9]*\\) .*/\\1/p' | tr '\012' ' '`
  n=1
fi

for host
do
  case "$host" in
    *[a-z]* | *-* )
      set -- `hostips "$host"` ;;
    *)set -- "$host" ;;
  esac
  if [ $# = 0 ]
  then
    echo "$cmd: no ip addresses for \"$host\"" >&2
    xit=1
    continue
  fi

  for ipaddr
  do
    if [ $usecolons ]
    then
      # choose new interface number
      while :
      do  case " $inuse " in
            *" $n "*)     n=$(( n + 1 )) ;;
            *)            break ;;
          esac
      done
      # apply and then bump $basen
      ( set -x; $trace ifconfig "$baseif:$nextn" "$ipaddr" netmask "$netmask" ) || xit=1
      inuse="$inuse $n"
    else
      # no silly :n logical interfaces for BSD!
      ( set -x; $trace ifconfig "$baseif" alias "$ipaddr" netmask "$netmask" ) || xit=1
    fi
  done
done

exit $xit
