#!/bin/sh
#
# =head1 NAME
#
# buglog - take a log message and attachment data on stdin and log it appropriately
#
# =head1 SYNOPSIS
#
# buglog [-B bugsystem] [-n] headline < description
#
# buglog [-B bugsystem] [-n] headline command [args...]
#
# =head1 DESCRIPTION
#
# I<buglog> takes a change I<headline> on the command line and a I<description> on its input
# and logs it to the bug subsystems enumerated by the environment variable B<$BUGSYSTEMS>.
# B<$BUGSYSTEMS> is a space separated list of subsystems that accept log information.
#

: ${TMPDIR:=/tmp}
: ${USER:=`whoami`}
: ${BUGSYSTEMS:=`bugsystems`}

readstdin=1

cmd=`basename "$0"`
usage="Usage: $cmd [-B bugsystems] [-n] headline < description
  -B bugsystems Space separated list of bugsystems to consider.
                Default from \$BUGSYSTEMS or \`bugsystems\`:
                $BUGSYSTEMS
  -n            No description on input."

badopts=

# =head1 OPTIONS
#
# =over 4
#
while :
do
  case "$1" in
    # =item B<-B> I<bugsystems>
    #
    # Deliver reports to the specified I<bugsystems> instead of the default.
    #
    -B)	BUGSYSTEMS=$2; export BUGSYSTEMS; shift ;;
    # =item B<-n>
    #
    # No description.
    #
    -n)	readstdin= ;;
    --)	shift; break ;;
    -?*)echo "$cmd: unrecognised option: $1" >&2; badopts=1 ;;
    *)	break ;;
  esac
  shift
done
# =back
#

if [ $# = 0 ]
then
  echo "$cmd: missing headline" >&2
  badopts=1
else
  headline=$1
  shift
  [ $# = 0 ] || { echo "$cmd: extra arguments after headline: $*" >&2
		  badopts=1
		}
fi

[ $badopts ] && { echo "$usage" >&2; exit 2; }

attachment=$TMPDIR/bugids$$
trap 'rm -f "$attachment"' 0
trap 'rm -f "$attachment"; exit 1' 1 2 13 15
>>"$attachment"

if [ $# -gt 0 ]
then
  if [ -t 0 -a -t 1 ]
  then
    logscript "$attachment" "$@"
  else
    "$@" >"$attachment" 2>&1
  fi
else
  [ $readstdin ] && cat >"$attachment"
fi

exec </dev/null

[ -s "$attachment" ] && filteredit -s "$attachment" sh -c 'detab | unbs | unctrl'

xit=0

# =head1 BUG SYSTEM BACKENDS
#
# The follow bugsystems are known:
#
# =over 4
#

for bugsystem in $BUGSYSTEMS
do

  # =item B</>I<prefix>B</>I<bugsystem>
  #
  # Any I<bugsystem> name may be prefixed with B</>I<prefix>B</>
  # to constrain its use.
  # If the I<headline> does not commence with a string
  # matching the regular expression I<prefix>
  # that bugsystem is skipped.
  # For example,
  # including the bugsystem "B</BORG:/mailto:borglog@b.org>"
  # in your bugsystems
  # will only dispatch buglogs to B<borglog@b.org> if the headline commences
  # with "B<BORG:>".
  #
  case "$bugsystem" in
    /?*/?*)
      pfxre=`expr "$bugsystem" : '/\([^/][^/]*\)/.*'` || { xit=1; continue; }
      sfxbugsys=`expr "$bugsystem" : '/[^/][^/]*/\(.*\)'` || { xit=1; continue; }
      if expr "x$headline" : "x$pfxre" >/dev/null
      then
	bugsystem=$sfxbugsys
      else
	continue
      fi
      ;;
  esac
	  
  case "$bugsystem" in

    # =item B<dlog>
    #
    # The headline alone is passed to the I<buglog-daily> command.
    # If the headline has a leading I<category,...>B<:> prefix,
    # pass the tail of the headline to I<log-tsline> for each category.
    #
    dlog)
      ##dlog "$headline" || xit=1
      buglog-daily "$headline"
      # handle FOO: headlines
      if pfx=`expr "x$headline" : 'x\([A-Z][A-Z_0-9,]*\):.*'`
      then
        sfx=` expr "x$headline" : 'x[A-Z][A-Z_0-9,]*: *\(.*\)'`
        for category in `printf "%s\n" "$pfx" | tr , ' '`
        do
          log-tsline -\? -- "$category" "$sfx"
        done
      fi
      ;;

    # =item B<mailto:>I<email-address>[B<?subject=>I<prefix>]
    #
    # The I<description> is sent as the body of an email message
    # to the specified I<email-address>
    # with the B<Subject:> line "I<prefix>: I<headline>".
    # Also, the header line "B<X-Buglog-Date:> I<date>" is included
    # to assist with automatic filtering.
    #
    mailto:*)
      echo "$bugsystem" \
      | sed 's/^mailto://
	     s/?/ /' \
      | \
      (
	# ensure no spurious envvars
	params=`env | sed -n 's/^\(PARAM_[A-Za-z0-9_]*\)=.*/\1/p'`
	eval unset $params	# no quotes to turn newlines into spaces

	read addr args || exit 1
	hdrs="To: $addr"
	subj=$headline

	( qsvals=`query_string2sh "$args"`
	  eval "$qsvals"
	  [ -n "${PARAM_subject:-}" ] && subj="$PARAM_subject: $subj"

	  echo "To: $addr"
	  echo "Subject: $subj"
	  echo "X-Buglog-Date: `date`"
	  echo
	  cat "$attachment"
	) | sendmail -oi "$addr"
      ) || xit=1
      ;;

    # =item B<|>I<command>
    #
    # Run I<command>
    # (which may have no whitespace and must name an executable)
    # with the I<headline> as its sole argument
    # and the I<description> on its standard input.
    #
    \|*)
      { command=`expr "x$bugsystem" : 'x.\(.*\)'` \
        && "$command" "$headline" <"$attachment"
      } || xit=1
      ;;

    # =item B<ddts>
    #
    # Submit the I<description>
    # as an enclosure text to any ClearDDTS bug identifiers
    # (as identified by the ddtsids(1) script)
    # mentioned in the headline.
    # For example,
    # we routinely commit trivial CVS changes with headlines like:
    #
    #	moved user home dir from here to there [CISaa12345]
    #
    # which would add an enclosure to bug B<CISaa12345>.
    #
    ddts)
      { ddtsids=`echo "$headline" | ddtsids` \
	&& { [ -z "$ddtsids" ] \
	     || ( printf "%s\n\n" "$headline"
		  exec cat "$attachment"
		) | mailif -s "$headline" $ddtsids
	   }
      } || xit=1
      ;;

    # =item B<infra>
    #
    # Submit the I<description>
    # as an attachment called "log.txt" to any Infra bug identifiers
    # (as identified by the infraids(1) script)
    # mentioned in the headline.
    # For example,
    # we routinely commit trivial CVS changes with headlines like:
    #
    #	moved user home dir from here to there [infra12345]
    #
    # which would add an attachment to Infra bug B<12345>.
    #
    infra)
      infraids=`echo "$headline" | infraids`
      [ -z "$infraids" ] || buglog-infra "$headline" <"$attachement" || xit=1
      ;;

    # =item B<logger>
    #
    # Submit the I<headline> alone
    # to syslog
    # using the I<logger> command, thus:
    #
    #	logger -t buglog -- "$USER: $headline"
    #
    logger)
      logger -t buglog -- "$USER: $headline" || xit=1
      ;;

    *)
      echo "$cmd: unsupported bug system \"$bugsystem\"" >&2
      xit=1
      ;;
  esac

done

# =back
#

exit $xit

# =head1 ENVIRONMENT
#
# B<$BUGSYSTEMS>, the list of bug subsystems to notify.
# Default: "B<dlog logger>".
#
# =head1 SEE ALSO
#
# dlog(1cs), logger(1)
#
# =head1 AUTHOR
#
# Cameron Simpson <cs@zip.com.au> 09jul2004
#
