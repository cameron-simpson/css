#!/bin/sh
#
# Return the transform of some input data, keeping a cache.
#       - Cameron Simpson <cs@zip.com.au> 22oct2011
#

set -ue

: ${TMPDIR:=/tmp}
: ${CACHEDIR=$HOME/var/cache/transforms}

cmd=$0
usage="Usage: $cmd [-l] cachedir command [args...]
  -l    List filename of cached output instead of emitting the output."

listmode=

badopts=

while [ $# -gt 0 ]
do
  case $1 in
    -l) listmode=1 ;;
    --) shift; break ;;
    -?*)echo "$cmd: unrecognised option: $1" ?&2
        badopts=1
        ;;
    *)  break ;;
  esac
  shift
done

if [ $# = 0 ]
then
  echo "$cmd: missing cachedir" >&2
  badopts=1
else
  cachedir=$1
  shift
  case "$cachedir" in
    /* | ./* | ../* )
        ;;
    *)  cachedir=$CACHEDIR/$cachedir
        ;;
  esac
fi

if [ $# = 0 ]
then
  echo "$cmd: missing command" >&2
  badopts=1
fi

[ $badopts ] && { echo "$usage" >&2; exit 2; }

[ -d "$cachedir/." ] || ( set -x; exec mkdir -p "$cachedir" )

tmppfx=$cachedir/.tmp.$$
input=$tmppfx.input
output=$tmppfx.output
trap 'rm -f -- "$input" "$output"' 0 1 3 15

# save the input and compute its SHA1 hash
cat >"$input" || exit $?
sha1=`sha1sum - <"$input" | sed 's/ .*//'`
[ -n "$sha1" ] || exit 1
cachefile=$cachedir/$sha1

if [ -s "$cachefile" ]
then
  if [ $listmode ]
  then printf '%s\n' "$cachefile"
  else cat "$cachefile"
  fi
else
  if "$@" <"$input" >"$output"
  then
    mv "$output" "$cachefile"
    if [ $listmode ]
    then printf '%s\n' "$cachefile"
    else cat "$cachefile"
    fi
  else
    xit=$?
    [ $listmode ] || cat "$output"       # user should still see the output
  fi
fi
