#!/usr/bin/python -tt
#
# Convert my categories file to procmail recipes.
#       - Cameron Simpson <cs@zip.com.au> 02mar2001
#
# Release version: 2011-02-19
#
# =head1 NAME
#
# cats2procmailrc - generate a procmail recipe from my mail categories file
#
# =head1 SYNOPSIS
#
# cats2procmailrc [B<-a> I<alert>] [B<-A> I<addresses>] [B<-C>] [B<-d> I<dirpath>] [B<-D> I<subst>B<=>I<val>] [B<-L>] [B<-m> I<maildomains>] [-S] [B<-t> I<type>] [B<-T>] [LOG=value] [category-files...] E<gt>procmailrc
#
# =head1 DESCRIPTION
#
# I<cats2procmailrc> reads human friendly mail category description files
# and emits a matching procmail(1) recipe to implement it.
# The intent is to have an extremely succinct file
# of easily editable one line rules,
# generally of the form:
#
#       folder  tag     pattern
#
# Raw procmailrc(5) clauses are also supported for less trivial rules
# and also an inclusion syntax.
#
# I build my B<.procmailrc> like this:
#
#       cats2procmailrc \
#               -a 'announce-email "+%"' \
#               -A "$HOME/rc/mail/aliases" \
#               -t maildir -L \
#               -m cskk.homeip.net \
#               <categories >$HOME/.procmailrc
#
# =head1 OPTIONS
#
# =over 4
#
# =item B<-a> I<alert>
#
# Specify a shell command to run as the alert function (see L<FILE FORMAT> below),
# such as mailblink(1).
# The character percent (B<'%'>) is replaced by the I<folder> name.
#
# =item B<-A> I<addresses>
#
# Read the file I<addresses> expecting lines of the form:
#
#  cat[,cat...] rfc2822-address
#
# and define macros named B<re_>I<cat> for each category
# that contain regexps to match all the addresses in each category I<cat>.
#
# =item B<-C>
#
# Continue mode.
# Alters the semantics of the generated rules.
# Default mode is to stop filing when a matching rule is found unless
# it commences with a "+".
# In continue mode, file continues after a rule match unless the rule
# commences with an "=".
#
# =item B<-d> I<dirpath>
#
# If a relative filename is used in a '<' include line,
# look for it in the directories specified by I<dirpath>
# in addition to the current input directory.
# I<dirpath> is a colon (':') separated directory list.
#
# =item B<-D> I<subst>=I<val>
#
# Add a macro definition.
#
# =item B<-L>
#
# Put the tag into the B<X-Label> header field
# instead of as a prefix to the subject line.
#
# =item B<-m> I<maildomains>
#
# A comma separated list of default mail domain for rule addresses
# lacking an B<@I<domain>>.
# The default comes from the environment variable B<$MAILDOMAIN>.
#
# =item B<-S>
#
# Synchronous. All continue rules will use a lock file.
# This constrains procmail(1) from becoming a fork bomb
# if there are many continue rules,
# such as may occur in a cross-referencing rule list.
#
# =item B<-t> I<type>
#
# Specify the default mailbox type.
# If the mailbox exists the type is deduced automatically,
# but otherwise uses this default, which may be one of
# B<unix>, B<maildir> or B<mh>.
# The default is B<unix>.
#
# =item B<-T>
#
# Don't track rule matches.
# Normally a C<X-Cats2Procmailrc-Matching-Rule> header
# is inserted describing the match rule.
# This is done with formail
# and so can incur a noticable penalty on slow machines
# with lots of messages.
# If you're using the B<-L> option
# the labels will mostly track stuff for you anyway.
#
# =back
#
# The optional argument B<LOG=>I<value> will be prepended to the start
# of recipe actions.
# This can be a useful adjunct to the LOGABSTRACT facility in procmail.
#
# If no I<category-files> are supplied, standard input is used.
#
# =head1 FILE FORMAT
#
# =head2 LINE FORMAT
#
# Lines ending in a slosh ('\\') are continued to the next line,
# keeping the newline and discarding the slosh.
#
# Blank lines and lines beginning with an octothorpe ('#') are passed
# through unchanged.
#
# Lines of the form:
#
#       VARIABLE=value
#
# are passed through unchanged.
#
# Lines beginning with a colon (':') introduce a raw procmail recipe,
# and this line through to the first line commencing with a closing curly
# bracket ('}') are passed through unchanged.
#
# Lines of the form:
#
#       < filename
#
# include the specified file.
# Relative filenames are sought in the directory containing the current input file
# (taken to be the current working directory if the current input is stdin)
# and then in the list of directories specified by the B<-d> option.
#
# Other lines are of the form:
#
#       [+][!]target[,target...] tag pattern [newline pattern...]
#
# where each I<target> has the form:
#
#       folder
#       who@where
#       |progname
#
# Multiple I<targets> may be specified to file the message
# to multiple places for this rule.
#
# A I<target> may be enclosed in double quotes ('"').
#
# A leading plus sign (B<'+'>) means that this rule should be a continue rule,
# and not abort processing.
#
# A leading exclaimation mark (B<'!'>) means that mail items matching this rule
# should generate an alert.
# The alert can be any action you desire, such as the mailblink(1) command;
# see the B<-a> option.
# For me, this means a single line summary of the mail item
# appears in yellow in a small log window
# I have at the top of my screen for mail items I should read I<now>.
#
# A I<target> commencing with a pipe symbol ('|')
# is considered a shell command to which to feed the message.
# The I<tag> is appended to the shell command
# unless the I<tag> is "B<.>" in which case it is omitted.
#
# Otherwise, if the I<target> contains an "at" (B<@>) character
# it is considered an email address
# and the mail item is forwarded to that address.
#
# Otherwise the I<target> names a mail folder in which to place the mail item.
# Normal UNIX mail files,
# MH style directories and Maildir style directories are autodetetected.
# If the folder does not yet exist, the folder type specified by the B<-m>
# option is used.
# Relative folder names are considered to be in the directory specified
# by the B<$MAILDIR> environment variable.
#
# The I<tag> is placed at the start of the message's B<Subject> line for ready recognition in mixed folders
# unless the B<-L> option is used,
# in which case it is placed in the B<X-Label:> header line.
# The special tag dot (".") suppresses this action.
#
# The I<pattern>s select the mail items.
# All the patterns in a rule must match the mail item for the rule to apply.
# The special pattern "B<.>" always matches.
#
# The I<folder> or I<who@where> or I<|shell-command> may be enclosed in
# double quotes if desired,
# for example if the folder name or program invocation contains whitespace.
# Note that the quotes must not enclose the leading "B<+>" or "B<!>".
#
# Substrings of the form "B<{{I<WORD>}}>" are replaced
# with macro values of the same name if defined.
# Any environment variable of the form B<$CATS2PROCMAILRC_>I<WORD>
# prepopulates the macros a macro called I<WORD> containing the value
# of the environment variable.
# I<WORD> must match the regexp B<^[A-Z][A-Z_0-9]*$>.
# Further or overriding macros may be specified with the B<-D> option.
#
# =head2 Example Patterns
#
# The usual form is simply an address (see RFC822 and RFC2822)
# to be present in the B<To>, B<CC> or B<BCC> header lines.
# If the address string lacks an at ("@") then an at ("@")
# and the value of the environment variable B<$MAILDOMAIN>
# is appended.
# If the address string lacks the local part, any localpart is accepted.
#
# I have rules like this:
#
#       !attn   Personal        cs
#       !attn   Personal        cameron@cskk.homeip.net
#       attn    EFF-Cafe-News   cafe-news@eff.org
#       crypto  AUCrypto        aucrypto@suburbia.net
#
# matching B<cs@zip.com.au>, B<cameron@cskk.homeip.net>, B<cafe-news@eff.org>
# and B<aucrypto@suburbia.net> respectively. The "Personal" items generate
# an alert.
#
# It is also possible to select on a different header line
# by prefixing the I<pattern> string with a header name, viz:
#
#       applix  ApplixWare      sender:owner-applixware-list@applix.com
#
# which selects for an address in the B<Sender> header line.
#
# The I<pattern> may also be an arbitrary regular expression in egrep(1) syntax.
# In this case the I<pattern> starts with a slash ("/")
# and optionally ends in a slash, viz:
#
#       !adzap  AdZap           subject:/(noads|add?[-  s]*zap|squid_?redir|zapp(er|ing)|wrapzap)/
#
# which matches mail items with subjects probably regarding my adzap program.
# A leading "^.*" is added to the regexp unless it already starts with a "^".
#
# A typical use of the "at" sign is in conjunction with the plus sign above
# to copy particular mail items to another account while still delivering locally.
# For example:
#
#       +fred@that.isp.com . fred@this.isp.com
#       fredmail Fred fred@this.isp.com
#
# to accept mail aimed at B<fred@this.isp.com> and also copy it to
# B<fred@that.isp.com>.
# This could also be written:
#
#       +fred@that.isp.com,fredmail . fred@this.isp.com
#
# Patterns with more than one condition:
#
#       logs    cron    root \
#                       subject:/Cron <root
#
# Example:
#
#         !me     interesting     {{ME}} \
#                                 from:{{KNOWN}}
#
# This rule matches email to me from people I know, filing it with an alert action.
# The variables B<$CATS2PROCMAILRC_ME> and B<$CATS2PROCMAILRC_KNOWN> are
# constructed in advance to match these addresses; the former from my mutt
# B<alternates> line and the latter from my mail alias file.
#
# A pattern that always fires:
#
#       +all-mail       .       .
#
# to copy everything into the "all-mail" folder, and continue processing.
#
# =head1 ENVIRONMENT
#
# MAILDIR, the directory containing mail folders.
#
# MAILDOMAIN, the local mail domain (eg B<cskk.homeip.net> for my home domain).
#
# CATS2PROCMAILRC_[A-Z]*, macro definitions
#
# =head1 SEE ALSO
#
# procmail(1), procmailrc(1), procmailex(1), egrep(1)
#
# =head1 AUTHOR
#
# Cameron Simpson E<lt>cs@zip.com.auE<gt>
#
# =cut
#

import sys
import os
import os.path
from getopt import getopt, GetoptError
import string
from cStringIO import StringIO
import re
if sys.hexversion < 0x02060000: from sets import Set as set
from cs.mailAddresses import loadAddresses, addrsRegexp
import cs.logutils
from cs.logutils import setup_logging, Pfx, error, warning, info, debug

assign_re=re.compile(r'[a-z]\w+=', re.I)
target_re=re.compile(r'("[^"]*"|[^",\s]+)')
hdrlist_re=re.compile(r'([a-z][\-a-z0-9]*(,[a-z][\-a-z0-9]*)*):', re.I)

def main(argv):
  setup_logging()
  cmd = cs.logutils.cmd

  trackRules=True       # add X-Cats2Procmailrc line to show rule
  useXLabel=False       # put tag in X-Label header instead of subject
  alertComand=None      # command to display alerts
  dfltType='UNIX'       # UNIX mbox folders by default
  dfltDomains=()        # default email domain
  includePath=()        # where else to look for relative included files
  substitutions={}      # replace {{foo}} in rules
  syncRules=False       # let procmail be fork happy on continue/copy rules
  logline=None          # optional LOG= line for recipes
  modeContinue=False    # stop filing on rule match

  # cats2procmailrc [B<-a> I<alert>] [B<-d> I<dirpath>] [B<-D> I<subst>B<=>I<val>] [B<-L>] [B<-m> I<maildomains>] [-S] [B<-t> I<type>] [B<-T>] [LOG=value] [category-files...] E<gt>procmailrc
  usage='''Usage: %s [-a alert] [-d dir] [-D subst=val] [-L] [-m domains] [-S] \\
                  [-t {unix|mh|maildir}] -T [LOG=value] [category-files...] \\
                  >procmailrc
          -a alert        Command line to generate the alert.
                          The mail item is present on standard input.
          -A addresses    Read address categories from file, make category macros.
          -C              Continue mode: continue filing after matching rule.
          -d dirpath      Look for relative included files in these directories.
          -D subst=val    Add a macro definition just as $CATS2PROCMAILRC_subst=val does.
          -L              Use X-Label: header instead of Subject: for tag.
          -m domains      Select default mail domain(s).
                          Default from $MAILDOMAIN.
          -S              Synchronous. Use a lock on all continue/copy rules.
          -t type         Select default mailbox type.
                          Default: %s
          -T              Don't track rule matches by inserting an
                          X-Cats2Procmailrc-Matching-Rule header.
  ''' % (cmd, dfltType)

  alladdrs = set()
  alertCommand = None

  badopts=False

  opts=()
  argv=sys.argv[1:]
  try:
    opts, argv = getopt(argv, 'a:A:Cd:D:Lm:St:T')
  except GetoptError, e:
    error("bad options: %s", e)
    badopts=True

  for opt, arg in opts:
    if opt == '-a':
      alertCommand=arg
    elif opt == '-A':
      ok, catmap, addrmap = loadAddresses(arg)
      if not ok:
        xit = 1
      for cat in catmap.keys():
        addrs=catmap[cat].keys()
        assert all(addr.find('@') > 0 for addr in addrs), \
               "bad address in %s" % addrs
        alladdrs.update(addrs)
        retext=addrsRegexp(addrs)
        ##print >>sys.stderr, "re[%s]=%s" % (cat, retext)
        assert not retext.startswith('\<') and not retext.endswith('\>')
        substitutions["re_%s" % cat]='\\<('+retext+')\\>'
    elif opt == '-C':
      modeContinue=True
    elif opt == '-d':
      includePath=arg.split(':')
    elif opt == '-D':
      m=assign_re.match(arg)
      if not m:
        error("invalid subst=val argument to -D: %s", arg)
        badopts=True
      else:
        substitutions[arg[:m.end()-1]]=arg[m.end():]
    elif opt == '-L':
      useXLabel=True
    elif opt == '-m':
      dfltDomains=arg.split(',')
    elif opt == '-S':
      syncRules=True
    elif opt == '-t':
      dfltType=arg.upper()
      if dfltType not in ('UNIX', 'MH', 'MAILDIR'):
        error("invalid mailbox type (%s), expected one of unix, mh or maildir", arg)
        badopts=True
    elif opt == '-T':
      trackRules=False
    else:
      error("unhandled option: %s", opt)
      badopts=True

  if len(dfltDomains) == 0:
    dfltDomains=(os.environ['MAILDOMAIN'],)

  if len(argv) > 0 and argv[0].startswith("LOG="):
    logline=argv.pop(0)

  if len(argv) == 0:
    argv='-'

  if badopts:
    sys.stderr.write(usage)
    return 2

  for subname in [v[16:] for v in os.environ.keys() if v.startswith('CATS2PROCMAILRC_')]:
    # -A and -D trump envvars
    if subname not in substitutions:
      substitutions[subname]=os.environ['CATS2PROCMAILRC_'+subname]

  # uber category for all known categories
  substitutions["re_ALL"]='\\<('+addrsRegexp(alladdrs)+')\\>'

  xit=0

  conv = C2P(logline, trackRules, useXLabel, dfltType, alertCommand, syncRules, dfltDomains, substitutions, includePath, modeContinue)
  for arg in argv:
    if arg == '-':
      if not conv.c2p(sys.stdin, sys.stdout):
        xit = 1
    else:
      if not conv.c2p(open(arg), sys.stdout):
        xit = 1

  return xit

def resolveTarget(target, dfltType):
  if target[0] == '"':
    target=target[1:-1]
  if target[0] != '|':
    # not a pipe-to-command
    if target.find('@') > 0:
      # forward to address
      target='!'+target
    else:
      # presume it is a mail folder
      if not os.path.isabs(target):
        target=os.path.join(os.environ['MAILDIR'],target)
      ftype=dfltType
      if os.path.isfile(target):
        ftype='UNIX'
      elif os.path.isdir(target):
        if os.path.isfile(os.path.join(target,'.mh_sequences')):
          ftype='MH'
        else:
          ftype='MAILDIR'
      if ftype == 'UNIX':
        pass
      elif ftype == 'MAILDIR':
        target+='/'
      elif ftype == 'MH':
        target+='/.'
      else:
        error('unsupported folder type: %s', ftype)
        target = None

  return target

# Pulled fro cs/sh.py.
def quotestr(s):
  qs=StringIO()
  qs.write("'")
  for c in s:
    if c == "'":
      qs.write("'\\''")
    else:
      qs.write(c)
  qs.write("'")
  return qs.getvalue()

class C2P(object):

  def __init__(self, logline, trackRules, useXLabel, dfltType, alertCommand, syncRules, dfltDomains, substitutions, includePath, modeContinue):
    self.logline = logline
    self.trackRules = trackRules
    self.useXLabel = useXLabel
    self.dfltType = dfltType
    self.alertCommand = alertCommand
    self.syncRules = syncRules
    self.dfltDomains = dfltDomains
    self.substitutions = substitutions
    subnames = substitutions.keys()
    if len(subnames) == 0:
      curly_re=None
    else:
      subnames.sort()
      curly=r'\{\{(%s)\}\}' % '|'.join(subnames)
      curly_re=re.compile(curly)
    self.curly_re = curly_re
    self.includePath = includePath
    self.modeContinue = modeContinue

  def c2p(self, ifp, ofp):
    global assign_re, target_re, hdrlist_re
    ok = True
    with Pfx(ifp.name):
      info("%s ...", ifp.name)
      lineno=0
      oline=None
      while True:
        line=ifp.readline()
        if len(line) == 0:
          break
        lineno+=1

        with Pfx("line %d" % lineno):
          if line[-1:] != '\n':
            error("%d: unexpected EOF (no newline)", lineno)
            ok = False
            break

          if oline is not None:
            line=oline+'\n'+line
            oline=None

          line=line[:-1]
          if line[-1:] == '\\':
            oline=line[:-1]
            continue

          line=line.strip()
          if len(line) == 0 or line[0] == '#':
            continue

          debug("%s", line)
          line0=line
          ruledesc="%s: %s" % (ifp.name, line.replace('\n','; '))
          if len(ruledesc) > 200:
            ruledesc=ruledesc[:197]+'...'

          if self.curly_re:
            curlies=[m for m in self.curly_re.finditer(line)]
            if curlies:
              curlies.reverse()
              for m in curlies:
                line=line[:m.start()]+self.substitutions[m.group()[2:-2]]+line[m.end():]

          # assignments
          m=assign_re.match(line)
          if m:
           ofp.write(line)
           ofp.write('\n')
           continue

          ofp.write('# %s\n' % ruledesc)

          # inclusions
          if line[0] == '<':
            for filename in line[1:].split():
              if not os.path.isabs(filename):
                inc=[i for i in self.includePath]
                if ifp.name[0] != '<':        # <stdin> etc
                  here=os.path.dirname(ifp.name)
                else:
                  here='.'
                inc.insert(0,here)
                for path in inc:
                  nfilename=os.path.join(path,filename)
                  if os.path.isfile(nfilename):
                    filename=nfilename
                    break
              try:
                fp=open(filename)
              except IOError, e:
                error("%s: cannot open: %s", filename, str(e))
                ok = False
                continue
              self.c2p(fp, ofp)
            continue

          # recipes - copy from ^: until ^}
          if line[0] == ':':
            ofp.write(line)
            ofp.write('\n')
            while True:
              line=ifp.readline()
              lineno+=1
              with Pfx("line %d" % (lineno,)):
                if line[-1:] != '\n':
                  error("unexpected EOF (no newline)")
                  ok = False
                  break

              ofp.write(line)
              if line[0] == '}':
                break
            continue

          # a cats2procmailrc rule!
          doAlert=False
          doContinue=self.modeContinue
          while line[0] in ('!','+','='):
            if line[0] == '!':
              doAlert=True
            elif line[0] == '+':
              doContinue=True
              if self.modeContinue:
                warning("redundant '+' in continue mode")
            elif line[0] == '=':
              doContinue=False
              if not self.modeContinue:
                warning("redundant '=' in first match mode")
            else:
              assert "unhandled !/+ flag: "+line[0]
            line=line[1:]

          if len(line) == 0 or line[0] in string.whitespace:
            error("missing targets")
            ok = False
            continue

          targets=[]
          m=target_re.match(line)
          while m is not None:
            target=m.group(0)
            line=line[len(target):]
            targets.append(target)
            if line[:1] != ',':
              break
            line=line[1:]
            m=target_re.match(line)

          if len(targets) == 0:
            error("no targets!")
            ok = False
            continue

          if len(line) == 0 or line[0] not in string.whitespace:
            error("missing tag")
            ok = False
            continue

          try:
            tag, patterns = line.lstrip().split(None,1)
          except ValueError:
            error("missing patterns")
            ok = False
            continue
          if tag == '.':
            tag=None

          ofp.write(':0\n')

          for pattern in [p.lstrip() for p in patterns.split('\n')]:
            if pattern == '.':
              continue

            m=hdrlist_re.match(pattern)
            if not m:
              hdrs=('to','cc','bcc')
            else:
              hdrs=[h.lower() for h in m.group(1).split(',')]
              pattern=pattern[m.end():]

            if pattern[0] == '/':
              # pure regexp
              pattern=pattern[1:]
              if pattern[0] == '^':
                pattern=' *'+pattern[1:]
              else:
                pattern='.*'+pattern
            else:
              # email addresses
              pattern=pattern.strip()
              if pattern.find('@') < 0:
                # no "@" - permute across dfltDomains
                pattern='%s@(%s)' % (pattern, '|'.join(self.dfltDomains))
              # skip replace('.','\\.')
              pattern='.*\\<('+pattern.replace('+','\\+')+')\\>'

            if len(hdrs) == 1:
              hdrs=hdrs[0]
            else:
              hdrs='('+'|'.join(hdrs)+')'
            pattern='^'+hdrs+':'+pattern

            ofp.write('* %s\n'%pattern)

          needBrackets=( doContinue
                      or len(targets) > 1
                      or tag is not None
                      or self.logline is not None
                      or self.trackRules
                      or doAlert
                       )

          if not needBrackets:
            ofp.write('%s\n' % resolveTarget(targets[0], self.dfltType))
          else:
            ofp.write('{\n');

            if doContinue:
              ofp.write(' DEFAULT=/dev/null\n')
              ofp.write(' :0c')
              if self.syncRules:
                ofp.write(':.lock-global-procmail')
              ofp.write('\n {\n')

            if self.logline is not None:
              ofp.write("  %s\n" % (self.logline,))

            if self.trackRules:
              ofp.write('  :0whf\n  | formail -f -A %s\n' % quotestr('X-Cats2Procmailrc-Rule: '+ruledesc))

            if tag is not None:
              if self.useXLabel:
                pipe='formail -f -A %s' % quotestr('X-Label: '+tag)
              else:
                sedtag=tag.replace('/','\\/')
                pipe="sed -e %s" % quotestr('s/^[Ss][Uu][Bb][Jj][Ee][Cc][Tt]: */& ['+sedtag+'] /')
              ofp.write('  :0whf\n  | %s\n' % pipe)

            if doAlert:
              if self.alertCommand is None:
                error("alert rule found but no alert command - see -a option")
                ok = False
              else:
                ofp.write('  :0hwc\n  | %s\n' % (self.alertCommand.replace('%',','.join(targets)),))

            while len(targets) > 0:
              target0=targets.pop(0)
              target=resolveTarget(target0, self.dfltType)
              assert target is not None
              ofp.write('  :0')
              if len(targets) > 0:
                ofp.write('c')
              if self.syncRules and target0.startswith('|'):
                ofp.write(':.lock-global-procmail-pipe')
              ofp.write('\n')
              ofp.write('  %s\n'% (target,))

            if doContinue:
              ofp.write(' }\n')

            ofp.write('}\n');

          ofp.write('\n')

      if oline is not None:
        error("unexpected EOF in slosh-extended line")
        ok = False

    return ok

if __name__ == '__main__':
  sys.exit(main(sys.argv))
