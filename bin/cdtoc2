#!/usr/bin/env python3
#
# Extract discid and track info from a CD as a preliminary to
# constructing a FreeDB CDDB entry. Used by cdsubmit.
# Rework of cddiscinfo in Python, since the Perl libraries aren't
# working any more; update to work on OSX and use MusicBrainz.
#	- Cameron Simpson <cs@zip.com.au> 31mar2016
#

from __future__ import print_function
import os
from os.path import basename
import sys
from getopt import getopt, GetoptError
from pprint import pprint
import discid
import musicbrainzngs

USAGE = '''Usage: %s [-d tocdir] [-f] [--] [device]
  -d tocdir Use tocdir as a directory of contents cached by discid
            In this mode the cache TOC file pathname is recited to standard
            output instead of the contents.
  -f        Force. Read disc and consult Musicbrainz even if a toc file exists.
  device    Device to access. This may be omitted or "default" or
            "" for the default device as determined by the discid module.'''

APP_VERSION = '2.0a'

def main(argv):
  cmd = basename(argv.pop(0))
  usage = USAGE % (cmd,)
  musicbrainzngs.set_useragent(cmd, APP_VERSION, os.environ['EMAIL'])
  tocdir = None
  force = False
  device = None
  badopts = False
  try:
    opts, argv = getopt(argv, 'd:f')
  except GetoptError as e:
    print("%s: %s" % (cmd, e), file=sys.stderr)
    badopts = True
  else:
    for opt, val in opts:
      if opt == '-d':
        tocdir = val
      elif opt == '-f':
        force = True
      else:
        raise RuntimeError("unhandled option: %s %s" % (opt, val))
  if argv:
    device = argv.pop(0)
    if device == '' or device == 'default':
      device = None
  if argv:
    print("%s: extra arguments: %r" % (cmd, argv), file=sys.stderr)
    badopts = True
  if tocdir is not None and not os.path.isdir(tocdir):
    print("%s: tocdir not a directory: %s" % (cmd, tocdir), file=sys.stderr)
    badopts = True
  if badopts:
    print(usage, file=sys.stderr)
    return 2
  D = discid.read(device)
  if tocdir is None:
    tocpath = None
  else:
    tocpath = os.path.join(tocdir, D.id + '.txt')
  if tocpath is not None and os.path.exists(tocpath) and not force:
    print(tocpath)
    return 0
  try:
    artist, title, tracks = get_disc_info(D.id)
  except musicbrainzngs.musicbrainz.ResponseError as e:
    print('%s: no information obtained for discid %r: %s'
          % (cmd, D.id, e), file=sys.stderr)
    if e.cause.code != 404:
      return 1
    artist = ''
    title = ''
    tracks = sorted( [ [track.number, '', track.length]
                       for track in discid.read(device=device).tracks
                     ] )
  if tocpath is None:
    tocfp = sys.stdout
  else:
    tocfp = open(tocpath, "w")
  print(artist if artist else 'ARTIST', file=tocfp)
  print(title if title else 'TITLE', file=tocfp)
  for n, trackname, length in tracks:
    print(n, trackname, file=tocfp)
  tocfp.close()
  if tocpath is not None:
    print(tocpath)
  return 0

def get_disc_info(disc_id):
  X('musicbrainzngs.get_releases_by_discid(%r)...', disc_id)
  info = musicbrainzngs.get_releases_by_discid(disc_id, includes=['recordings'])
  pprint(info, sys.stderr, indent=2, width=16)
  X("process...")
  if 'disc' in info:
    matches = list(disc_info_from_mbdisc(info['disc'], disc_id))
    if not matches:
      raise ValueError('no disc_id %r matches: %r' % (disc_id, disc_info_from_mbdisc))
    if len(matches) > 1:
      print("using first of multiple matches for disc_id %r: %r" % (disc_id, matches), file=sys.stderr)
    return matches[0]
  if 'cdstub' in info:
    return disc_info_from_mbcdstub(info['cdstub'])
  pprint(info, sys.stderr, indent=2)
  raise ValueError('cannot get album track info: get_releases_by_discid(%r) gave: %r'
                   % (disc_id, info))

def disc_info_from_mbcdstub(cdstub):
  artist = cdstub['artist']
  title = cdstub['title']
  tracks = []
  for n, track in enumerate(cdstub['track-list'], 1):
    tracks.append( (n, track['title'], track['length']) )
  return artist, title, tracks

def disc_info_from_mbdisc(disc, disc_id):
  artist = None
  for release in disc['release-list']:
    for medium in release['medium-list']:
      for disc in medium['disc-list']:
        if disc['id'] == disc_id:
          # matched disc: yield info
          title = release['title']
          tracks = []
          for track in medium['track-list']:
            tracks.append( (int(track['number']),
                            track['recording']['title'],
                            int(track['recording']['length'])) )
          yield artist, title, tracks

def X(msg, *a):
  if a:
    msg = msg % a
  print(msg, file=sys.stderr)

if __name__ == '__main__':
  sys.exit(main(sys.argv))
