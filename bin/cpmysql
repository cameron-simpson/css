#!/bin/sh -u
#
# Pull mysql databases from one mysql server to another.
# Adapted from dumpmysql and loadmysql.
#	- Cameron Simpson <cs@zip.com.au> 28dec2006
#

trace=eecho
doit=
bytable=
dfltport=3306

cmd=`basename "$0"` || cmd=$0
usage="Usage: $cmd -T [-q] [-x] src dst [databases...]
  -T    Do a table based copy. Now mandatory.
  -q    Execute quietly.
        Default is to do nothing, and recite a plan of action.
  -x    Trace execution.
        Default is to do nothing, and recite a plan of action.
  src and dst may take three forms:
    /path/to/dir
      The path to a directory of *.sql.gz files.
    user:password@host[:port]
      A user,password,host tuple with which to connect to a database.
      An optional :port may be used instead of the default $dfltport.
    user:password@/socket-path
      A user,password,socket tuple with which to connect to a database.
    secret
      The name of a secret as accessed by the secret(1cs) command.
      This includes /path/to/file (vs /path/to/dir above).
  databases...
    Databases to copy. These may take the form db1:db2 to copy tables
    from src.db1 to dst.db2.
    Default is to copy everything except \"mysql\" and \"information_schema\"
    from the db on src to the same named db on dst."

badopts=

while [ $# -gt 0 ]
do
  case $1 in
    -q) doit=1 trace= ;;
    -T) bytable=1 ;;
    -x) doit=1 trace=set-x ;;
    --)	shift; break ;;
    -?*)echo "$cmd: unrecognised option: $1" >&2
	badopts=1
	;;
    *)	break ;;
  esac
  shift
done

[ $bytable ] || { echo "$cmd: -T option now required" >&2
                  badopts=1
                }

if [ $# = 0 ]
then
  echo "$cmd: missing src-secret" >&2
  badopts=1
else
  src=$1
  shift
fi

if [ $# = 0 ]
then
  echo "$cmd: missing dst-secret" >&2
  badopts=1
else
  dst=$1
  shift
fi

if [ -n "${src:-}" ]
then
  src_pfx=$src
  case $src in
    /*)
      unset src_user src_password src_host src_port src_socket
      if [ -d "$src/." ]
      then
        :
      else
        if [ -f "$src" ]
        then
          src_secret=`secret "$src"` || exit 1
          eval "$src_secret"
          src_user=$secretLOGIN
          src_password=$secretPASSWORD
          src_host=${secretHOST:-''}
          src_port=${secretPORT:-$dfltport}
          src_socket=${secretSOCKET:-''}
          src=
        else
          echo "$cmd: src $src: neither a directory (db dump) nor file (secret)" >&2
          badopts=1
        fi
      fi
      ;;
    *:*@*)
      src_upart=`   expr "x$src" : 'x\(.*\)@.*'` || exit 1
      src_hpart=`   expr "x$src" : 'x.*@\(.*\)'` || exit 1
      src_user=`    expr "x$src_upart" : 'x\([^:]*\):.*'` || exit 1
      src_password=`expr "x$src_upart" : 'x[^:]*:\(.*\)'` || exit 1
      src_socket=
      src_host=
      src_port=
      case "$src_hpart" in
        /*)
          src_socket=$src_hpart
          ;;
        *:*)
          src_host=`expr "x$src_hpart" : 'x\(.*\):.*'` || exit 1
          src_port=`expr "x$src_hpart" : 'x.*:\(.*\)'` || exit 1
          ;;
        *)src_host=$src_hpart
          src_port=$dfltport
          ;;
      esac
      src_pfx=${src_user}@${src_hpart}
      ;;
    *)
      src_secret=`secret "$src"` || exit 1
      eval "$src_secret"
      src_user=$secretLOGIN
      src_password=$secretPASSWORD
      src_host=${secretHOST:-''}
      src_port=${secretPORT:-$dfltport}
      src_socket=${secretSOCKET:-''}
      ;;
  esac
fi

if [ -n "${dst:-}" ]
then
  dst_pfx=$dst
  case $dst in
    /*)
      unset dst_user dst_password dst_host dst_port dst_socket
      if [ -d "$dst/." ]
      then
        :
      else
        if [ -f "$dst" ]
        then
          dst_secret=`secret "$dst"` || exit 1
          eval "$dst_secret"
          dst_user=$secretLOGIN
          dst_password=$secretPASSWORD
          dst_host=${secretHOST:-''}
          dst_port=${secretPORT:-$dfltport}
          dst_socket=${secretSOCKET:-''}
          dst=
        else
          echo "$cmd: dst $dst: neither a directory (db dump) nor file (secret)" >&2
          badopts=1
        fi
      fi
      ;;
    *:*@*)
      dst_upart=`   expr "x$dst" : 'x\(.*\)@.*'` || exit 1
      dst_hpart=`   expr "x$dst" : 'x.*@\(.*\)'` || exit 1
      dst_user=`    expr "x$dst_upart" : 'x\([^:]*\):.*'` || exit 1
      dst_password=`expr "x$dst_upart" : 'x[^:]*:\(.*\)'` || exit 1
      dst_socket=
      dst_host=
      dst_port=
      case "$dst_hpart" in
        /*)
          dst_socket=$dst_hpart
          ;;
        *:*)
          dst_host=`expr "x$dst_hpart" : 'x\(.*\):.*'` || exit 1
          dst_port=`expr "x$dst_hpart" : 'x.*:\(.*\)'` || exit 1
          ;;
        *)dst_host=$dst_hpart
          dst_port=$dfltport
          ;;
      esac
      dst_pfx=${dst_user}@${dst_hpart}
      ;;
    *)
      dst_secret=`secret "$dst"` || exit 1
      eval "$dst_secret"
      dst_user=$secretLOGIN
      dst_password=$secretPASSWORD
      dst_host=${secretHOST:-''}
      dst_port=${secretPORT:-$dfltport}
      dst_socket=${secretSOCKET:-''}
      ;;
  esac
fi

[ $badopts ] && { echo "$usage" >&2; exit 2; }

# run mysql command (mysqldump etc) using the supplied user/pass/host/port/sock
_mysqlcmd()
{ mc_user=$1 mc_pass=$2 mc_h=$3 mc_p=$4 mc_s=$5 mc_cmd=$6
  shift; shift; shift; shift; shift; shift
  if [ -n "$mc_h" ]
  then  set -- -u "$mc_user" "-p$mc_pass"  -h "$mc_h" -P "$mc_p" ${1+"$@"}
        mc_trace="$mc_cmd -u $mc_user -p.. -h $mc_h -P $mc_P $*"
  else  set -- -u "$mc_user" "-p$mc_pass"  -S "$mc_s"            ${1+"$@"}
        mc_trace="$mc_cmd -u $mc_user -p.. -S $mc_s $*"
  fi
  [ -z "$trace" ] || eecho "$mc_trace"  # conceals the password string
  tag_fd 2 "$mysqlcmd_pfx:$mc_cmd" "$mc_cmd" "$@"
}
# run a mysql command against the source database
mysqlcmd_src()
{ mysqlcmd_pfx=$src_pfx \
    _mysqlcmd "$src_user" "$src_password" \
              "$src_host" "$src_port" "$src_socket" "$@"
}
# run a mysql command against the destination database
mysqlcmd_dst()
{ mysqlcmd_pfx=$dst_pfx \
    _mysqlcmd "$dst_user" "$dst_password" \
              "$dst_host" "$dst_port" "$dst_socket" "$@"
}

# pull_table srcdb dstdb tablename
pull_table()
{ _pull_table_srcdb=$1
  _pull_table_dstdb=$2
  _pull_table=$3

  if [ -z "$trace" ] && [ -t 2 ]
  then
    eecho "pull_table $* ..."
  fi

  case "$src" in
    /*)
      $trace gzip -dc "$src/$_pull_table_srcdb.$_pull_table.sql.gz"
      ;;
    *)
      mysqlcmd_src mysqldump --opt "$_pull_table_srcdb" "$_pull_table"
      ;;
  esac \
  | if [ $doit ]
    then
      if [ -n "$trace" ] && [ -t 2 ]
      then prcat
      else cat
      fi
    fi \
  | case "$dst" in
      /*)
        $trace sed '${/^-- Dump completed on /d;}' \
        | $trace gzip -n --fast >"$dst/$_pull_table_dstdb.$_pull_table.sql.gz"
        ;;
      *)
        mysqlcmd_dst mysql "$_pull_table_dstdb"
        ;;
    esac
}

pull_db()
{ _pull_db=$1
  case $_pull_db in
    ?*:?*)
      _pull_srcdb=`expr "x$_pull_db" : 'x\([^:]*\):.*'`
      _pull_dstdb=`expr "x$_pull_db" : 'x[^:]*:\(.*\)'`
      ;;
    *)
      _pull_srcdb=$_pull_db
      _pull_dstdb=$_pull_db
      ;;
  esac

  case "$_pull_srcdb" in
    *.*)
      echo "$0: UNHANDLED pull_db db.table argument: $_pull_srcdb" >&2
      exit 1
      ########
      ##pull_table `echo "$_pull_db" | tr . ' '`
      ##return $?
      ;;
  esac

  # pull each table individually
  case "$src" in
    /*)
      ls "$src/." \
      | sed -n "s|^$_pull_srcdb"'\.\(.*\)\.sql\.gz$|\1|p'
      ;;
    *)
      echo show tables \
      | mysqlcmd_src mysql "$_pull_srcdb" \
      | sed 1d
      ;;
  esac \
  | while read _pull_srcdb_table
    do
      pull_table "$_pull_srcdb" "$_pull_dstdb" "$_pull_srcdb_table"
    done
}

if [ $# = 0 ]
then
  set -- `case "$src" in
            /*)
              ls "$src/." \
              | sed -n 's|\(.*\)\.sql\.gz$|\1|p' \
              | sed 's/\..*//' \
              | sort -u
              ;;
            *)
              echo show databases \
              | mysqlcmd_src mysql \
              | sed 1d
              ;;
          esac \
          | sed '/^mysql$/d; /^information_schema$/d'
         `
fi

for db
do
  pull_db "$db" || exit 1
done
