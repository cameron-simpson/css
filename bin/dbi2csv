#!/usr/bin/perl
#
# Dump a MySQL table (later others, since it uses DBI) in .csv format.
#	- Cameron Simpson <cs@cskk.id.au> 30sep99
#

use strict qw(vars);

use cs::Misc;
use Getopt::Std;
use DBI;
use cs::DBI;
use cs::Secret;

$::DfltHost='mysql';
$::DfltDBD='mysql';
$::DfltDB='REPORTS_DB';

$::Usage="Usage: $::cmd [-h host] [-l login:pass] [-d dbd] [db.]table [fields...] \\
			[WHERE condition]
	-h host	Alternate host to contact. Default: $::DfltHost.
	-l login:pass Login/password to use.
	-d dbd	Alternate DBD backend to use. Default: $::DfltDBD.
	-s field Sort on the named field (lexical).
	-r	Sort in reverse.
	db.	Database name. Default: $::DfltDB.
";

my $host=$::DfltHost;
my $logpass='';
my $dbd=$::DfltDBD;
my $dbname=$::DfltDB;
my $dbtable;
my $sortfield;
my $sortreverse=0;

my $badopts=0;
getopts('rd:h:l:s:') || ($badopts=1);
$host=$::opt_h if defined $::opt_h;
$dbd=$::opt_d if defined $::opt_d;
$logpass=$::opt_l if defined $::opt_l;
$sortfield=$::opt_s if defined $::opt_s;
$sortreverse=1 if defined $::opt_r;

if (! @ARGV)
{ warn "$::cmd: missing db.table\n";
  $badopts=1;
}
else
{ $dbtable=shift(@ARGV);
  if ($dbtable =~ /^([\w_]+)\./)
  { $dbname=$1; $dbtable=$';
  }
}

die $::Usage if $badopts;

my @fields = ();

while (@ARGV && $ARGV[0] ne 'WHERE')
{ push(@fields, shift(@ARGV));
}

if ($ARGV[0] eq WHERE)
{ shift(@ARGV);
}
my $where = "@ARGV";

my $dsn = "DBI:${dbd}:database=${dbname}";
$dsn.=";host=$host" if length $host;

# shouldn't need login/password - must check mysql perms
my @login;
if (! length $logpass)
{
  $ENV{SYSTEMID}='home' if ! defined $ENV{SYSTEMID};
  my $s = cs::Secret::get("$host\@$ENV{SYSTEMID}");
  ##warn "secret=".cs::Hier::h2a($s,0);
  @login=($s->{LOGIN},$s->{PASSWORD});
}
elsif ($logpass =~ /:/)
{ @login=($`,$');
}
else
{ @login=($logpass,undef);
}

my $dbh = DBI->connect($dsn,@login);
die "$::cmd: can't get DBI handle for \"$dsn\"\n"
	if ! defined $dbh;

my $sql = "SELECT ".(@fields ? join(", ", @fields) : '*')
        . " FROM $dbtable";

if (length $where)
{ $sql.=" WHERE $where";
}

if (defined $sortfield)
{ $sql .= " ORDER BY $sortfield";
  if ($sortreverse)
  { $sql.=" DESC";
  }
}
##warn "SQL=[$sql]";
my $sth = cs::DBI::sql($dbh,$sql);
die "$::cmd: can't make query for table \"$dbtable\"$where\n"
	if ! defined $sth;
die "$::cmd: can't run query on \"$dbtable\"\n"
	if ! $sth->execute();

my $first = 1;
my $rec;

while (defined ($rec = $sth->fetchrow_hashref()))
{
  if ($first)
  { $first=0;
    @fields = sort keys %$rec if ! @fields;
    print csv(@fields), "\n";
  }

  print csv(map($rec->{$_}, @fields)), "\n";
}

exit 0;

sub csv
{ my(@v)=@_;

  V:
  for (@v)
  { next V if /^(0|[1-9]\d*)(\.\d+)?$/ || /^[a-z_][\w_]*$/;
    s/[\\"]/\\$&/g;
    $_="\"$_\"";
  }

  join(',', @v);
}
