#!/bin/sh
#
# dk - docker and docker-compose helper
#

set -ue

: ${DK_APP_USER:='appuser'}
: ${DK_COMPOSE_YML:='docker-compose.yml'}
: ${DK_CP_PREFIX:='.'}
: ${DK_ENVVARS:=''}
: ${DK_EXEC_PREFIX:=''}
: ${DK_PRIMARY_SERVICE='gunicorn'}
: ${DK_PSQL_SERVICE=''}
: ${DK_PSQL_DBNAME=''}
: ${DK_PSQL_SETUP_USERNAME=''}

docker_compose_opts=
docker_exec_opts=-i
[ -t 0 -a -t 1 ] && docker_exec_opts="$docker_exec_opts -t"

cmd=$0
usage="Usage: $cmd [-f docker-compose.yml] [-n name] op [args...]
  -f docker-compose.yml
    Specify docker-compose YAML file.
    Default from \$DK_COMPOSE_YML: $DK_COMPOSE_YML
  -i Passed to \"docker exec\", for commands which use that.
  -n name
    Specify primary service name.
    This is also the target service for \"exec\".
  @name
    Shorthand for \"-n name\".

  Most ops are passed to docker or docker-compose, but the following
  are specially handled:
    cp [name:]path [name:]path
      Passed to \"docker cp\".
      \"name\" is the short container name.
      The \"path\" is, if relative, relative to \$DK_CP_PREFIX.
    exec [command...]
      Passwd to \"docker exec\".
      The -i option is presupplied, and the -t option if stdin is a tty.
      The environment variables names in \$DK_ENVVARS are passed through.
      The default \"command\" is \"bash\".
      The command is prefixed by \$DK_EXEC_PREFIX, for example if
      there is a standard environment setup script within the
      container.
    loaddb
      Load a postgresql dump from standard input into \$DK_PSQL_DBNAME
      ($DK_PSQL_DBNAME) in service \$DK_PSQL_SERVICE ($DK_PSQL_SERVICE).
    logs
      Passed to docker-compose -f \$DK_PRIMARY_SERVICE.
    rsh name command...
      Run command inside \"name\" in an rsh/ssh compatible way, to
      support use as a drop in for commands which themselves can use
      an rsh/ssh-like command such as rsync.
    rsync rsync-args...
      Rsync into or out of the container where the container name
      comes from the \"host\" part of an rsync remote path.
    ssh [ssh-args...]
      Ssh into the container.
    sshd
      Invoke an inet-mode sshd inside the container.
    try [name [command...]]
      Shorthand for \"docker-compose run --rm name command...\".
      The default name comes from \$DK_PRIMARY_SERVICE ($DK_PRIMARY_SERVICE).
      The default command is bash.
    update
      Run down, volume rm var, pull, build, up setup.

  Environment:
    DK_APP_USER
      The nonroot username inside the container.
      Presently used by the \"ssh\" op.
    DK_COMPOSE_YML
      The docker-compose filename, default docker-compose.yml.
      If not present in the current directory it will be sought in an ancestor.
    DK_CP_PREFIX
      The in-container path prefix for relative \"dk cp\" paths.
    DK_ENVVARS
      Encironment variables to pass in to commands run via \"dk exec\".
    DK_EXEC_PREFIX
      A prefix for commands provided to \"dk exec\", such as an
      in-container environment setup script.
    DK_PRIMARY_SERVICE
      The default short name for the target container for \"dk exec\"."

badopts=

while [ $# -gt 0 ]
do
  case $1 in
    -f) DK_COMPOSE_YML=$2; shift ;;
    -h|--help)
        echo "$usage"
        exit 0
        ;;
    -n) DK_PRIMARY_SERVICE=$2; shift ;;
    @?*)DK_PRIMARY_SERVICE=$( expr "$1" : '@\(.*\)' ) ;;
    --) shift; break ;;
    -?*)echo "$cmd: unrecognised option: $1" >&2
        badopts=1
        ;;
    *)  break
        ;;
  esac
  shift
done

[ -s "$DK_COMPOSE_YML" ] || \
  if yml=$( findup "$DK_COMPOSE_YML" )
  then
    DK_COMPOSE_YML=$yml
  else
    echo "$cmd: cannot find \$DK_COMPOSE_YML=$DK_COMPOSE_YML" >&2
    badopts=1
  fi

if [ $# = 0 ]
then
  op=exec
else
  op=$1
  shift
fi

# translate "@foo" into "-n foo exec"
case "$op" in
  @?*)DK_PRIMARY_SERVICE=$( expr "$op" : '@\(.*\)' )
      op=exec
      ;;
esac

[ $badopts ] && { echo "$usage" >&2; exit 2; }

resolve_shortname(){
  [ $# = 1 ] || {
    echo "$0: Usage: resolve_shortname shortname" >&2
    return 2
  }
  case "$1" in
    *_*) echo "$1" ;;
    *)  echo "${base}_${1}_1" ;;
  esac
}

# resolve [[name]:path into full container and path
resolve_container_path(){
  [ $# = 1 ] || {
    echo "$0: Usage: resolve_container_path [[name]:]path" >&2
    return 2
  }
  case "$1" in
    /* | ./* | ../*)
      # local path, return unchanged
      echo "$1"
      return 0
      ;;
    *:*) ;;
    *)# also local path, return unchanged
      echo "$1"
      return 0
      ;;
  esac
  ( set -ue
    hostpart=$( expr "x$1" : 'x\([^:]*\):.*' )
    pathpart=$( expr "x$1" : 'x[^:]*:\(.*\)' )
    [ -n "$hostpart" ] || hostpart=$DK_PRIMARY_SERVICE
    hostpart=$( resolve_shortname "$hostpart" )
    case "$pathpart" in
      /*) ;; *) pathpart=$DK_CP_PREFIX/$pathpart ;;
    esac
    echo "$hostpart:$pathpart"
  )
}

DK_COMPOSE_YML=$( realpath "$DK_COMPOSE_YML" )
ymlbasedir=$( dirname "$DK_COMPOSE_YML" )
: ${DK_BASE_PREFIX:=${COMPOSE_PROJECT_NAME:-$( basename "$ymlbasedir" )}}
base=$DK_BASE_PREFIX
primary_container=$( resolve_shortname "$DK_PRIMARY_SERVICE" )

case "$op" in
  help)
      echo "$usage"
      exit 0
      ;;
  cp) [ $# = 2 ] || {
        echo "$cmd: $op: expected exactly 2 arguments" >&2
        echo "$usage" >&2
        exit 2
      }
      src=$( resolve_container_path "$1" )
      dst=$( resolve_container_path "$2" )
      shift; shift
      set -x
      exec docker "$op" "$src" "$dst"
      ;;
  exec)
      [ $# -gt 0 ] || set bash
      if [ -n "$DK_ENVVARS" ]
      then
        for envvar in $DK_ENVVARS
        do
          eval "envval=\$$envvar"
          set -- "$envvar=$envval" "$@"
        done
        set -- env "$@"
      fi
      set -x
      exec docker exec $docker_exec_opts "$primary_container" $DK_EXEC_PREFIX "$@"
      ;;
  loaddb)
      badopts=
      if [ $# = 0 ]
      then
        echo "$cmd: loaddb: extra arguments: $*" >&2
        badopts=1
      else
        [ -n "$DK_PSQL_DBNAME" ] || {
          echo "$cmd: loaddb: missing \$DK_PSQL_DBNAME" >&2
          badopts=1
        }
        [ -n "$DK_PSQL_SERVICE" ] || {
          echo "$cmd: loaddb: missing \$DK_PSQL_SERVICE" >&2
          badopts=1
        }
        [ -n "$DK_PSQL_SETUP_USERNAME" ] || {
          echo "$cmd: loaddb: missing \$DK_PSQL_SETUP_USERNAME" >&2
          badopts=1
        }
      fi
      [ -t 0 ] && {
        echo "$cmd: loaddb: expecting a PostgreSQL dump on standard input" >&2
        badopts=1
      }
      [ $badopts ] && { echo "$usage" >&2; exit 2; }
      set -x
      time docker exec -i "$DK_PSQL_SERVICE" su postgres \
        -c "set -xue
            dropdb $DK_PSQL_DBNAME
            createdb -O $DK_PSQL_SETUP_USERNAME $DK_PSQL_DBNAME
            psql -e -U $DK_PSQL_SETUP_USERNAME $DK_PSQL_DBNAME
           "
      ;;
  logs)
      set -x
      [ $# -gt 0 ] || set -- -f "$DK_PRIMARY_SERVICE"
      ;;
  rsh)
      rhost=$1; shift
      set -x
      exec "$0" -n "$rhost" exec sh -c "$*"
      ;;
  rsync)
      set -x
      exec rsync -e "set-x env DK_EXEC_PREFIX= $0 rsh" ${1+"$@"} ;;
  ssh)
      # ssh into the container via an inet-mode sshd
      set -x
      exec ssh -o "proxycommand=set-x '$0' -n '$primary_container' sshd" \
            "$DK_APP_USER@localhost" ${1+"$@"}
      ;;
  sshd)
      # invoke an inet-mode sshd inside the container
      set -x
      DK_EXEC_PREFIX=; export DK_EXEC_PREFIX
      "$0" -n "$primary_container" exec mkdir -p /run/sshd
      exec "$0" -n "$primary_container" \
            exec /usr/sbin/sshd \
                  -edi \
                  -o AuthenticationMethods=publickey \
                  -o PubkeyAcceptedKeyTypes=+ssh-dss \
                  ${1+"$@"}
      ;;
  try)
      if [ $# = 0 ]
      then
        service=$DK_PRIMARY_SERVICE
        [ -n "$service" ] || {
          echo "$cmd try: no service name and name \$DK_PRIMARY_SERVICE" >&2
          exit 1
        }
      else
        service=$1; shift
      fi
      [ $# - gt 0 ] || set -- bash
      set -x
      docker-compose run --rm "$service" "$@"
      ;;
  update)
      set -ex
      "$0" down
      docker volume rm "${base}_var" || :
      "$0" pull
      "$0" build
      "$0" up setup
      exit $?
      ;;
  up)
      [ $# -gt 0 ] || [ -z "$DK_PRIMARY_SERVICE" ] \
      || set -- --exit-code-from "$DK_PRIMARY_SERVICE" ${1+"$@"}
      ;;
esac


set -x
exec docker-compose $docker_compose_opts -f "$DK_COMPOSE_YML" "$op" ${1+"$@"}
