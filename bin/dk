#!/bin/sh
#
# dk - docker and docker-compose helper
#

set -ue

: ${DK_COMPOSE_YML:='docker-compose.yml'}
: ${DK_PRIMARY_SERVICE=''}
: ${DK_ENVVARS:=''}
: ${DK_EXEC_PREFIX:=''}
: ${DK_CP_PREFIX:=''}

docker_compose_opts=

cmd=$0
usage="Usage: $cmd [-f docker-compose.yml] [-n name] op [args...]
  -f docker-compose.yml
    Specify docker-compose YAML file.
    Default from \$DK_COMPOSE_YML: $DK_COMPOSE_YML
  -n name
    Specify primary service name.
    This is also the target service for \"exec\".
  Most ops are passed to docker or docker-compose, but the following
  are specially handled:
    @name
      Shorthand for \"-n name exec\".
    cp [name:]path [name:]path
      Passed to \"docker cp\".
      \"name\" is the short container name.
      The \"path\" is, if relative, relative to \$DK_CP_PREFIX.
    exec [command...]
      Passwd to \"docker exec\".
      The -i option is presupplied, and the -t option if stdin is a tty.
      The environment variables names in \$DK_ENVVARS are passed through.
      The default \"command\" is \"bash\".
      The command is prefixed by \$DK_EXEC_PREFIX, for example if
      there is a standard aenvironment setup script within the
      container.
    logs
      Passed to docker-compose -f \$DK_PRIMARY_SERVICE.
    rsh name command...
      Run command inside \"name\" in an rsh/ssh compatible way, to
      support use as a drop in for commands which themselve can use
      an rsh/ssh-like command such as rsync.
    rsync rsync-args...
      Rsync into or out of the container where the container name
      comes from the \"host\" part of an rsync remote path."

badopts=

while [ $# -gt 0 ]
do
  case $1 in
    -f) DK_COMPOSE_YML=$2; shift ;;
    -h|--help)
        echo "$usage"
        exit 0
        ;;
    -n) DK_PRIMARY_SERVICE=$2; shift ;;
    --) shift; break ;;
    -?*)echo "$cmd: unrecognised option: $1" >&2
        badopts=1
        ;;
    *)  break
        ;;
  esac
  shift
done

[ -s "$DK_COMPOSE_YML" ] || if yml=$( findup "$DK_COMPOSE_YML" )
then
  DK_COMPOSE_YML=$yml
else
  echo "$cmd: cannot find \$DK_COMPOSE_YML=$DK_COMPOSE_YML" >&2
  badopts=1
fi

if [ $# = 0 ]
then
  echo "$cmd: missing op" >&2
  set | grep '^DK_' | sort
  op=help
else
  op=$1
  shift
fi

[ $badopts ] && { echo "$usage" >&2; exit 2; }

# translate "@foo" into "-n foo exec"
case "$op" in
  @?*)DK_PRIMARY_SERVICE=$( expr "$op" : '@\(.*\)' )
      op=exec
      ;;
esac

DK_COMPOSE_YML=$( realpath "$DK_COMPOSE_YML" )
ymlbasedir=$( dirname "$DK_COMPOSE_YML" )
base=$( basename "$ymlbasedir" )
primary_container=${base}_${DK_PRIMARY_SERVICE}_1

case "$op" in
  help)
      echo "$usage"
      exit 0
      ;;
  cp) set -x
      if [ -n "$DK_CP_PREFIX" ]
      then
        src=$1 dst=$2; shift; shift
        case "$src" in
          /* | ./* | ../* ) ;;
          *:/*) ;;
          *:*)  hostpart=$( expr "x$src" : 'x\([^:]*\):.*' )
                pathpart=$( expr "x$src" : 'x[^:]*:\(.*\)' )
                case "$hostpart" in
                  *_*) ;; *) hostpart=${base}_${hostpart}_1 ;;
                esac
                src=$hostpart:$DK_CP_PREFIX/$pathpart
                ;;
        esac
        case "$dst" in
          /* | ./* | ../* ) ;;
          *:/*) ;;
          *:*)  hostpart=$( expr "x$dst" : 'x\([^:]*\):.*' )
                pathpart=$( expr "x$dst" : 'x[^:]*:\(.*\)' )
                case "$hostpart" in
                  *_*) ;; *) hostpart=${base}_${hostpart}_1 ;;
                esac
                dst=$hostpart:$DK_CP_PREFIX/$pathpart
                ;;
        esac
        set -- "$src" "$dst" ${1+"$@"}
      fi
      exec docker "$op" ${1+"$@"}
      ;;
  exec)
      docker_exec_opts=-i
      [ -t 0 ] && docker_exec_opts="$docker_exec_opts -t"
      [ $# -gt 0 ] || set bash
      if [ -n "$DK_ENVVARS" ]
      then
        for envvar in $DK_ENVVARS
        do
          eval "envval=\$$envvar"
          set -- "$envvar=$envval" "$@"
        done
        set -- env "$@"
      fi
      set -x
      exec docker exec $docker_exec_opts "$primary_container" $DK_EXEC_PREFIX "$@"
      ;;
  logs)
      set -x
      [ $# -gt 0 ] || set -- -f "$DK_PRIMARY_SERVICE"
      ;;
  rsh)
      rhost=$1; shift
      set -x
      exec "$0" -n "$rhost" exec sh -c "$*"
      ;;
  rsync)
      set -x
      exec rsync -e "set-x env DK_EXEC_PREFIX= $0 rsh" ${1+"$@"} ;;
  update)
      set -ex
      "$0" down
      docker volume rm "${base}_var"
      "$0" pull
      "$0" build
      "$0" up setup
      exit $?
      ;;
  up)
      [ $# -gt 0 ] || [ -z "$DK_PRIMARY_SERVICE" ] \
      || set -- --exit-code-from "$DK_PRIMARY_SERVICE" ${1+"$@"}
      ;;
esac


set -x
exec docker-compose $docker_compose_opts -f "$DK_COMPOSE_YML" "$op" ${1+"$@"}
