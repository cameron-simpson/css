#!/bin/sh -u
#
# Filter an output file descriptor through an arbitrary shell command.
#	- Cameron Simpson <cs@cskk.id.au> 06may1999
#
# Multiple fds. - cameron, 23may1999
#

set -ue

: ${TMPDIR:=/tmp}

cmd=`basename "$0"`
usage="Usage: $cmd fd[,fd...] filter command [args...]"

badopts=

fd=1
if [ $# = 0 ]
then
  echo "$cmd: missing fd" >&2
  badopts=1
else
  fd=$1
  shift
fi

if [ $# = 0 ]
then
  echo "$cmd: missing filter" >&2
  badopts=1
else
  filter=$1
  shift
fi

if [ $# = 0 ]
then
  echo "$cmd: missing command" >&2
  badopts=1
fi

# unfold multiple fds into separate invocations
case "$fd" in
  *,*)
    # rewrite the command line
    for fd in `echo "$fd" | tr , ' '`
    do set -- "$0" "$fd" "$filter" ${1+"$@"}
    done
    # rerun
    exec "$@"
    ;;
esac

case $fd in
  [0-9]) ;;
  *)	echo "$cmd: bad fd - should be numeric: $fd" >&2
      badopts=1
      ;;
esac

[ $badopts ] && { echo "$usage" >&2; exit 2; }

fifo=$TMPDIR/pipe$$

mkfifo -m 600 "$fifo"

( eval "exec <$fifo"
  [ "x$fd" = x1 ] || eval "exec >&$fd"
  eval "$filter"
) &

eval "exec $fd>$fifo"
rm -f "$fifo"
exec "$@"
