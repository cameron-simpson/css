#!/usr/bin/perl -w
#
# Recode of Larry Wall's rename script.
# See also convenience scripts "lc", "__" and "_%".
#	- Cameron Simpson <cs@zip.com.au> 20aug2003
#

use File::Basename;
use File::Compare;
use File::Path;
use Getopt::Std;

($::cmd=$0) =~ s:.*/::;
$::Usage="Usage: $::cmd [-nqv] perlop files...
  -F    Full path; do no restrict rename to the file basename.
  -n    No action. Recite planned actions.
  -q    Quiet.
  -v    Verbose.\n";

my $verbose=0;
if (-t 1) { $verbose=1; }

my $doit=1;

my $badopts=0;

my %opt;
if (! getopts("Fnqv",\%opt))
{ warn "$::cmd: bad options\n";
  $badopts=1;
}

$fullpath=1 if $opt{'F'};
$doit=0 if $opt{'n'};
$verbose=0 if $opt{'q'};
$verbose=1 if $opt{'v'};

my $perlop;

if (! @ARGV)
{ warn "$::cmd: missing perlop\n";
  $badopts=1;
}
else
{ $perlop=shift(@ARGV);
  if (! @ARGV)
  { warn "$::cmd: missing files\n";
    $badopts=1;
  }
}

die $::Usage if $badopts;

local($_);

PATH:
for my $path (@ARGV)
{
  -e $path || next PATH;
  my $base = basename($path);
  $_ = ($fullpath ? $path : basename($path));
  warn "_=$_\n";
  eval $perlop;
  die $@ if $@;
  warn "_ => $_\n";
  my $npath = ($fullpath ? $_ : dirname($path).'/'.$_);
  warn "napth => $npath\n";
  if ($npath ne $path)
  {
    my $ndir = dirname($npath);
    -d "$ndir/." || mkpath($ndir);
    if (-e $npath)
    {
      if (compare($path,$npath) == 0)
      { print "$path -> $npath: identical, unlinking $path\n" if $verbose;
        unlink($path) || warn "$::cmd: unlink($path): $!";
      }
      else
      { warn "$path -> $npath: existing file differs\n";
      }
    }
    else
    { print "$path -> $npath\n" if $verbose;
      rename($path,$npath) || warn "$::cmd: $path -> $npath: $!";
    }
  }
}

exit 0;
