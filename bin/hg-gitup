#!/bin/sh
#
# "hg push" to 

set -ue

cmd=$( basename "$0" )
usage="Usage: $cmd hg-path [hg-branch...]
  Push hg changesets to a git repo via the hggit extension.
    hg-path The mercurial remote path.
    hg-branch[:git-branch]
            Mercurial branches to push, with optional corresponding git branch."

trace=command
[ -t 2 ] && trace=set-x

badopts=

if [ $# = 0 ]
then
  echo "$cmd: missing hg-path" >&2
  badopts=1
else
  hg_path=$1
  shift
fi

[ $# -gt 0 ] || set -- $( hg branch ) tip

# not a loop, here to allow using break to skip further tests
while [ -z "$badopts" ]
do
  case "$hg_path" in
    /* | ./*)
      echo "$cmd: unsupported local filesystem hg-path: $hg_path" >&2
      badopts=1
      break
      ;;
    *://*)
      ;;
    *)hg_path=$( $trace hg paths "$hg_path" )
      ;;
  esac
  case "$hg_path" in
    git+ssh://* | git://* )
      git_repo=${hg_path#*://}
      ;;
    *)echo "$cmd: unsupported non-git hg-path: $hg_path" >&2
      badopts=1
      break
      ;;
  esac

  hg_root=$( hg root )
  git_dir=$hg_root/.hg/git
  [ -d "$git_dir" ] || {
    echo "$cmd: no git tree at $git_dir" >&2
    badopts=1
    break
  }

  break
done

[ $badopts ] && { echo "$usage" >&2; exit 2; }

git(){
  $trace git "--git-dir=$git_dir" ${1+"$@"}
}

pushrev(){
  [ $# = 3 ] || {
    echo "Usage: $0 local_refspec upstream_repo upstream_branch" >&2
    return 2
  }
  ( set -ue
    local_refspec=$1 upstream_repo=$2 upstream_branch=$3
    git push --atomic "$upstream_repo" "$local_refspec:refs/heads/$upstream_branch"
  )
}

# update the git tree
$trace hg gexport

xit=0
for hg_branch
do
  case "$hg_branch" in
    default)git_branch=master ;;
    *:*)    git_branch=${hg_branch#*:}
            hg_branch=${hg_branch%%:*}
            ;;
    *)      git_branch=$hg_branch
            ;;
  esac
  for gitrev in $($trace hg-revs -T '{gitnode}\n' "heads(branch(\"$hg_branch\"))")
  do
    pushrev "$gitrev" "$git_repo" "$git_branch" || {
      echo "$cmd: branch $hg_branch: git rev $gitrev -> $git_repo $git_branch FAILS" >&2
      xit=1
      break
    }
  done
done

exit $xit
