#!/bin/sh
#
# hg-based dropbox-like sync script.
# Inspired by the GIT based scheme describe here:
#
#  DVCS-Autosync: A personal Dropbox replacement based on Git
#  http://www.mayrhofer.eu.org/dvcs-autosync
#
# but more clunky - doesn't poll with inotify or kqueue yet.
# On the upside, it supports cloning out-of-tree content via an "rsync in,
# sync, rsync out" scheme.
#       - Cameron Simpson <cs@zip.com.au> 03jun2011
#

set -ue

: ${HGBOX:=$HOME/var/hgbox}
: ${HGBOX_MASTER:=ssh://home/va/hgbox-MASTER}

hgmasterbase=$HGBOX_MASTER
hglocalbase=$HGBOX

cmd=`basename "$0"`
usage="Usage:
  $cmd [options...] add sets...
    Add named sets from master to local sets.
  $cmd [options...] export [-f] [sets...]
    Export files from the named sets. Destructively undoes local changes.
    -f: Force export instead of asking.
  $cmd [options...] init sets...
    Initialise new sets, both locally and at the master.
  $cmd [options...] ls
    List sets.
  $cmd [options...] sync [-q] [sets...]
    Sync local sets. Update master unless -q (quick).
 Options:
  -L local      Specify local base. Default from \$HGBOX: $hglocalbase
  -R remote     Specify remote master base. Default from \$HGBOX_MASTER: $hgmasterbase
  -n            No action. Recite actions.
  -q            Quiet.
  -v            Verbose.
  -x            Trace execution of actions."

rsopts=-ptgolH
trace= ##set-x
verbose=
silent=
xopt=

badopts=

while [ $# -gt 0 ]
do
  case $1 in
    -L) hglocalbase=$2; shift ;;
    -R) hgmaster=$2; shift ;;
    -n) trace=eecho ;;
    -x) trace=set-x xopt=-x;;
    -v) silent= verbose=1 ;;
    -q) silent=1 verbose= ;;
    --) shift; break ;;
    -?*)echo "$cmd: unrecognised option: $1" >&2
        badopts=1
        ;;
    *)  break ;;
  esac
  shift
done

if [ $# = 0 ]
then
  echo "$cmd: missing op" >&2
  badopts=1
else
  op=$1
  shift
  case "$op" in
    add)
        [ $# -gt 0 ] || { echo "$cmd: $op: missing sets" >&2
                          badopts=1
                        }
        ;;
    export)
        force_export=
        if [ $# -gt 0 ] && [ "x$1" = x-f ]
        then
          shift
          force_export=1
        fi
        [ $# -gt 0 ] || set -- `cd "$hglocalbase"; echo [a-z]*`
        ;;
    init)
        [ $# -gt 0 ] || { echo "$cmd: $op: missing sets" >&2
                          badopts=1
                        }
        ;;
    ls) [ $# = 0 ] || { echo "$cmd: $op: extra arguments: $*" >&2
                        badopts=1
                      }
        ;;
    sync)
        sync_quick=
        if [ $# -gt 0 ] && [ "x$1" = x-q ]
        then
          shift
          sync_quick=1
        fi
        [ $# -gt 0 ] || set -- `cd "$hglocalbase"; echo [a-z]*`
        ;;
    *)  echo "$cmd: unsupported op: $op" >&2
        badopts=1
        ;;
  esac
fi

[ $badopts ] && { echo "$usage" >&2; exit 2; }

hg="$trace hg"
inhg="$trace inhg $xopt"

sync_in()
{
  [ $# = 2 ] || return 2
  sync_in_inside=$1
  sync_in_outside=$2
  shift; shift
  if [ $# -gt 0 ]
  then
    echo "sync_in: extra arguments: $*" >&2
    return 2
  fi
  for arg in $hgmap_args
  do
    case "$arg" in
      -*) rsexcl=`expr "x$arg" : 'x-\(.*\)'`
          set -- "$@" "--exclude=$rsexcl"
          ;;
      +*) rsincl=`expr "x$arg" : 'x+\(.*\)'`
          set -- "$@" "--include=$rsincl"
          ;;
      *)  echo "$cmd: sync_in: unsupported include/exclude shorthand: $arg" >&2
          return 2
          ;;
    esac
  done
  [ $silent ] || echo "$set: import from $sync_in_outside"
  $trace rsync -r --delete $rsopts "$@" "$sync_in_outside/" "$sync_in_inside/" >&2
}

sync_out()
{
  [ $# = 2 ] || return 2
  sync_out_inside=$1
  sync_out_outside=$2
  shift; shift
  if [ $# -gt 0 ]
  then
    echo "sync_out: extra arguments: $*" >&2
    return 2
  fi
  set --
  for arg in $hgmap_args
  do
    case "$arg" in
      -*) rsexcl=`expr "x$arg" : 'x-\(.*\)'`
          set -- "$@" "--exclude=$rsexcl"
          ;;
      +*) rsincl=`expr "x$arg" : 'x+\(.*\)'`
          set -- "$@" "--include=$rsincl"
          ;;
      *)  echo "$cmd: sync_out: unsupported include/exclude shorthand: $arg" >&2
          return 2
          ;;
    esac
  done
  [ $silent ] || echo "$set: export to $sync_out_outside"
  $trace rsync -r --delete $rsopts "$@" "$sync_out_inside/" "$sync_out_outside/" >&2
}

# usage: withhgoutmap command-accepting-inside-then-outside-then-args
withhgoutmap()
{
  ok=1
  hgoutmap=.hgbox-outside
  hgoutcmd=$1
  shift
  if [ -s "$hgoutmap" ]
  then
    lineno=0
    while read -r inside outside hgmap_args
    do
      lineno=`expr $lineno + 1`
      case "$inside" in
        /* | .* | */ | */. | */.. | */./* | */../* )
          echo "$cmd: $hgoutmap:$lineno: invalid inside path: $inside" >&2
          ok=
          continue
      esac
      case "$outside" in
        '~/'*)
          outside=$HOME/`expr "x$outside" : 'x..\(.*\)'`
          ;;
      esac
      if [ ! -d "$outside/." ]
      then
        echo "$cmd: $hgoutmap:$lineno: outside path missing: $outside" >&2
        ok=
        continue
      fi
      "$hgoutcmd" "$inside" "$outside" ${1+"$@"} || return 1
    done <"$hgoutmap"
    unset hgmap_args
  fi
  [ $ok ] || { echo "$cmd: ABORTING" >&2; return 1; }
}

xit=0

# operations that do not iterate over set names
case "$op" in
  ls)
    cd "$hglocalbase"
    $trace ls -d [a-z]*
    exit $?
    ;;
esac

for set
do
  hgbox=$hglocalbase/$set
  rhgbox=$hgmasterbase/$set

  ( set -ue
    case "$op" in
      add)
        $hg clone "$rhgbox" "$hgbox"
        ;;

      export)
        cd "$hgbox" || exit 1
        if [ $force_export ] \
        || { [ -t 0 ] && ask "really export from $hgbox to exterior directories"; }
        then
          withhgoutmap sync_out
        else
          echo "$cmd: $op: $hgbox: aborting" >&2
          exit 1
        fi
        ;;

      init)
        $inhg --init "$rhgbox"
        $hg clone "$rhgbox" "$hgbox"
        ;;

      sync)
        cd "$hgbox" || exit 1

        withhgoutmap sync_in

        hgstat=`$hg stat`
        if [ -n "$hgstat" ]
        then
          $hg addremove
          $hg commit -m "sync in `hostname`:`pwd` `date +'%Y-%m-%d-%H:%M:%S'`"
        fi

        if not [ $sync_quick ]
        then
          [ $silent ] || echo "$set: import from $rhgbox"
          $hg fetch "$rhgbox"
          withhgoutmap sync_out

          [ $silent ] || echo "$set: export to $rhgbox"
          $hg push "$rhgbox"
          $inhg "$rhgbox" $hg up
        fi
        ;;
    esac
  ) || xit=1
done

exit $xit
