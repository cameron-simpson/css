#!/usr/bin/perl
#
# Extract forms from HTML on stdin.
#	- Cameron Simpson <cs@zip.com.au> 03mar1999
#

use strict qw(vars);

use cs::Source;
use cs::HTML;
use cs::Hier;

$::InHTML=0;
if (@ARGV && $ARGV[0] eq '-html')
{ $::InHTML=1; shift(@ARGV);
}

die "Usage: $0 [-html]\n" if @ARGV;

my($parse)=new cs::HTML (new cs::Source (FILE,STDIN));

my $t;

while (defined ($t=$parse->Tok()))
{ pforms($t) if ref($t) eq HASH;
}

for my $F (@::Formlist)
{ reciteform($F);
}

exit 0;

sub pforms
{ my($t)=@_;

  my $tag = $t->{TAG};

  ##if (exists $t->{ATTRS}->{NAME})
  ##{ warn "tag $tag NAME=\"$t->{ATTRS}->{NAME}\"\n";
  ##}

  if ($tag eq FORM)
  { if ($::InHTML)	{ print cs::HTML::tok2a(1,$t), "\n\n"; }
    else		{ newform($t); }
  }
  else
  { 
    if ($tag eq INPUT
     || $tag eq TEXTAREA
     || $tag eq BUTTON
     || $tag eq SELECT)
    {
      if (defined $::F)
      { my $fields = $::F->{FIELDS};
	##warn "add field \"$tag\" ".cs::Hier::h2a($t->{ATTRS},0);
	push(@$fields, { TAG => $tag,
			 ATTRS => $t->{ATTRS},
			 TOKENS => $t->{TOKENS},
		       });
      }
      else
      { warn "no form active for $tag "..cs::Hier::h2a($t->{ATTRS},0);
      }
    }
    else
    { ##warn "skip tag \"$tag\"\n";
    }

    for my $subt (@{$t->{TOKENS}})
    { pforms($subt) if ref($subt) eq HASH;
    }
  }
}

sub newform
{ my($t)=@_;

  my $lastform;

  {
    local($::F)={ ATTRS => $t->{ATTRS},
		  FIELDS => [],
		};
    $lastform=$::F;
    push(@::Formlist,$::F);

    # suck up fields from inner tokens
    for my $subt (@{$t->{TOKENS}})
    { pforms($subt) if ref($t) eq HASH;
    }
  }

  # gross hack to keep form alive after close
  $::F=$lastform if ! defined $::F;
}

sub reciteform
{ my($F)=@_;

  # recite outer FORM token
  { my $A = $F->{ATTRS};
    print "FORM";
    for my $attr (sort keys %$A)
    { print " $attr=\"$A->{$attr}\"";
    }
    print "\n";
  }

  # recite fields noticed
  { my $fields = $F->{FIELDS};
    for my $field (@$fields)
    { my $firstattr=1;
      my $A = $field->{ATTRS};
      for my $attr (sort keys %$A)
      { if ($firstattr)	{ print "  "; $firstattr=0; }
	else		{ print " "; }
	print "$attr=\"$A->{$attr}\"";
      }
      print "\n";

      if (@{$field->{TOKENS}})
      { print "  ", cs::Hier::h2a($fields->{$field}->{TOKENS}, 0), "\n";
      }
    }
  }

  print "\n";
}
