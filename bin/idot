#!/bin/sh
#
# Wrapper for the dot(1) graphviz command rendering to a terminal
# as sixel output.
# This is based on something Kate did:
# https://twitter.com/thingskatedid/status/1316074032379248640
# and a similar script also called idot I found on the web.
# Kitty and iTerm both understand sixel data and they are not alone.
# - Cameron Simpson <cs@cskk.id.au>
#

cmd=$( basename "$0" )
usage="Usage: $cmd {-fg foreground|-bg background|dot-option|layout}...
  Read graphviz DOT input and draw a graph on the output.
  For raster output formats the output is piped through img2sixel
  to render in a terminal. Some formats such a dot or svg are
  passed through unchanged."

layout=${DOT_LAYOUT="twopi"}
lang=png

case "$COLORFGBG" in
  *?\;?*)
    fg=$( printf '%s\n' "$COLORFGBG" | sed 's/;.*//' )
    bg=$( printf '%s\n' "$COLORFGBG" | sed 's/.*;//' )
    ;;
  *)fg=green bg=black
    ;;
esac

badopts=

dotopts=

first=1
skip=
next=
for arg
do
  [ $first ] && set --
  [ $skip ] && { skip=; continue; }
  [ $argfor ] && { eval "$argfor=\$arg"; argfor=; continue; }
  case $arg in
    # layouts
    circo|dot|fdp|neato|nop|nop1|nop2|osage|patchwork|sfdp|twopi)
            layout=$arg ;;
    # output format types
    bmp|canon|cgimage|cmap|cmapx|cmapx_np \
    |dot|dot_json|eps|exr|fig|gd|gd2|gif|gv|icns|ico|imap|imap_np|ismap \
    |jp2|jpe|jpeg|jpg|json|json0|mp|pct|pdf|pic|pict|plain|plain-ext \
    |png|pov|ps|ps2|psd|sgi|svg|svgz|tga|tif|tiff|tk|vdx|vml|vmlz|vrml \
    |wbmp|webp|xdot|xdot1.2|xdot1.4|xdot_json \
    )       lang=$arg ;;
    -fg)    argfor=fg ;;
    -bg)    argfor=bg ;;
    -T)     argfor=lang ;;
    -T?*)   lang=$( expr "x$1" : 'x-T\(.*\)' ) ;;
    -[A-Za-z]?*)
            set -- ${1+"$@"} "$arg"
            ;;
    *)      echo "$cmd: unrecognised argument: $arg" >&2
            badopts=1
            ;;
  esac
  first=
done

[ $badopts ] && { echo "$usage" >&2; exit 2; }

case "$lang" in
  svg|vrml|dot|dot_json|pic|xdot)
    conv(){ cat; }
    ;;
  *)conv(){
      if [ -t 1 ]
      then
        gm convert "$lang:-" -trim -bordercolor "$bg" -border 20 - \
        | img2sixel
      else
        cat
      fi
    }
    ;;
esac

set -x
dot "-T$lang" \
    "-Glayout=$layout" "-Gsplines=true" \
      "-Gbgcolor=$bg" \
    "-Ncolor=$fg" "-Nfontcolor=$fg" \
    "-Ecolor=$fg" \
    $dotopts \
  | conv
