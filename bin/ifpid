#!/bin/sh -ue
#
# Test that a process exists (and may be signalled).
#	- Cameron Simpson <cs@cskk.id.au> 28mar2005
#

: ${VARRUN:=$HOME/var/run}

cmd=$0
usage="Usage: $cmd [-v] [!] {pid|pidfile} [match-regexp]
  -q      Quiet. Don't complain about missing pid file etc.
  -v	Verbose. Print pid if real.
  !	Test that the process does not exist.
  pidfile
        Path to a file containing a pid.
        A relative path will be looked for in $VARRUN
        Default from \$VARRUN.
  match-regexp
        Additional grep(1) check on the pid - must appear in ps line."

badopts=

quiet=
verbose=
match=
while [ $# -gt 0 ]
do
  case $1 in
    -q) quiet=1 ;;
    -v) verbose=1 ;;
    --) shift; break ;;
    -?*)echo "$cmd: unrecognised option: $1" >&2
        badopts=1
        ;;
    *)  break ;;
  esac
  shift
done

yes=0 no=1
if [ $# -gt 0 ] && [ "x$1" = "x!" ]
then  yes=1 no=0; shift
fi

if [ $# = 0 ]
then
  echo "$cmd: missing pid or pidfile" >&2
  badopts=1
else
  case "$1" in
    [0-9]|[0-9][0-9]|[0-9][0-9][0-9]|[0-9][0-9][0-9][0-9]|[0-9][0-9][0-9][0-9][0-9])
			pidfile= pid=$1 ;;
    /*|./*|../*)	pidfile=$1 ;;
    *)			pidfile=$VARRUN/$1 ;;
  esac
  shift

  if [ -n "$pidfile" ]
  then
    {
       [ -s "$pidfile" ] \
    && read pid etc <"$pidfile" \
    && [ -n "$pid" ]
    } || { [ $quiet ] || echo "$cmd: can't read pid from file \"$pidfile\"" >&2
           exit 1
         }
  fi

  if [ $# -gt 0 ]
  then
    match=$1
    shift
    [ $# = 0 ] || { echo "$cmd: extra arguments after match-regexp: $*" >&2
                    badopts=1
                  }
  fi
fi

[ $badopts ] && { echo "$usage" >&2; exit 2; }

if kill -0 "$pid" 2>/dev/null
then
  if [ -n "$match" ]
  then
    psline=`ps ax | awk "\\\$1 == $pid {print}"`
    [ -n "$psline" ] || { echo "$cmd: can't find pid $pid in ps output" >&2
                          exit $no
                        }
    psline=`printf '%s\n' "$psline" | grep -- "$match"` || psline=
    if [ -z "$psline" ]
    then
      [ $quiet ] \
      || printf '%s\n' "$cmd: pid $pid does not match regexp: $match" >&2
      exit $no
    fi
  fi
  [ $verbose ] && echo "$pid"
  exit $yes
fi

exit $no
