#!/bin/sh
#
# Convenience wrapper for some iTerm2 operations.
#       - Cameron Simpson <cs@cskk.id.au> 26apr2014
#

set -ue

trace=
base64=/usr/bin/base64

cmd=$0
usage="Usage: $cmd [-x] op [op-args...]
  Ops:
    badge-format format...
        Specify the badge format string.
    colour scheme
        Switch colour schemes: green, white, black
    fg  Bring terminal to the foreground, steal focus.
    img imgfiles...
        Display the imgfiles inline in the terminal.
    open command [args...]
        Open new terminal window runnong command.
    setvar varname value...
        Set the uservar varname to value...
    switch-profile profile name...
        Change the current tty's profile to 'profile name...'"

badopts=

while [ $# -gt 0 ]
do
  case $1 in
    -x) trace=set-x ;;
    --) shift; break ;;
    -?) echo "$cmd: unrecognised option: $1" >&2
        badopts=1
        ;;
    *)  break ;;
  esac
  shift
done

if [ $# = 0 ]
then
  echo "$cmd: missing op" >&2
  badopts=1
else
  op=$1
  shift
  case $op in
    badge-format)
      if [ $# = 0 ]
      then
        echo "$cmd: $op: missing format" >&2
        badopts=1
      fi
      ;;
    bgimg)
      if [ $# = 0 ]
      then
        echo "$cmd: $op: missing imagepath" >&2
        badopts=1
      else
        imgpath=$1
        shift
        [ -s "$imgpath" ] || {
          echo "$cmd: $op: not a file: $imgpath" >&2
          badopts=1
        }
        [ $# = 0 ] || {
          echo "$cmd: $op: extra arguments after imgpath: $*" >&2
          badopts=1
        }
      fi
      ;;
    colour | color)
      if [ $# = 0 ]
      then
        echo "$cmd: $op: missing scheme" >&2
        badopts=1
      else
        scheme=$1
        shift
        case "$scheme" in
          green)    fg=0,65535,0 bg=0,0,0 ;;
          white)    fg=65535,65535,65535 bg=0,0,0 ;;
          black)    fg=0,0,0 bg=65535,65535,65535 ;;
          *)        echo "$cmd: $op: unsupported colour scheme: $scheme" >&2
                    badopts=1
                    ;;
        esac
      fi
      ;;
    fg);;
    img)
      if [ $# = 0 ]
      then
        echo "$cmd: $op: missing imgfiles" >&2
        badopts=1
      fi
      ;;
    open)
      if [ $# = 0 ]
      then
        echo "$cmd: $op: missing command" >&2
        badopts=1
      fi
      ;;
    setvar)
      if [ $# -lt 1 ]
      then
        echo "$cmd: $op: missing varname" >&2
        badopts=1
      fi
      if [ $# -lt 2 ]
      then
        echo "$cmd: $op: missing value" >&2
        badopts=1
      fi
      ;;
    switch-profile)
      if [ $# = 0 ]
      then
        echo "$cmd: $op: missing profile name" >&2
        badopts=1
      fi
      ;;
    *)echo "$cmd: unrecognised op: $op" >&2
      badopts=1
      ;;
  esac
fi

[ $badopts ] && { echo "$usage" >&2; exit 2; }

# tmux requires unrecognized OSC sequences to be wrapped with DCS tmux;
# <sequence> ST, and for all ESCs in <sequence> to be replaced with ESC ESC. It
# only accepts ESC backslash for ST. We use TERM instead of TMUX because TERM
# gets passed through ssh.
print_osc() {
  case "$TERM" in
    screen*)  printf "\e33Ptmux;\e\e]" ;;
    *)        printf "\e33]" ;;
  esac
}

# More of the tmux workaround described above.
print_st() {
  case "$TERM" in
    screen*)    printf "\a\e\\" ;;
    *)          printf "\a" ;;
  esac
}

l33t() {
  printf "\e]1337;%s\a" "$*"
}

case "$op" in
  badge-format)
    [ ! -x "$base64" ] || {
      format64=$( printf '%s' "$*" | $base64 )
      l33t "SetBadgeFormat=$format64"
    }
    ;;
  bgimg)
    case "$imgpath" in
      /*) ;; *) imgpath=$(pwd)/$imgpath ;;
    esac
    [ ! -x "$base64" ] || {
      imgpath64=$( printf '%s' "$imgpath" | $base64 )
      l33t "SetBackgroundImageFile=$imgpath64"
    }
    ;;
  colour | color )
    tee /dev/tty <<X | osascript -
      tell application iTerm2
        -- tell current session
          -- set foreground color to {$fg, 0}
          -- set background color to {$bg, 0}
        -- end tell
      end tell
X
    ;;
  fg)
    l33t "StealFocus"
    ;;
  img)
    xit=0
    for imgfile
    do
      [ -s "$imgfile" ] || {
        echo "$cmd: not a file: $imgfile" >&2
        xit=1
        continue
      }
      echo "$imgfile"
      imgcontent=$( $base64 <"$imgfile" )
      print_osc
      printf "1337;File=inline=1:$imgcontent"
      print_st
      echo
    done
    exit $xit
    ;;
  open)
    shcmd=$( shqstr "$@" )
    as_shcmd=\"$( printf '%s\n' "$shcmd" | sed 's/["\\]/\\&/g' )\"
    set -- `ttysize` || :
    columns=${1:-80}
    rows=${2:-65}
    iterm_script="
        tell application \"iTerm\"
            activate
            set newterm to (make new terminal)
            tell newterm
                set number of columns to $columns
                set number of rows to $rows
                set newsession to (make new session at the end of sessions)
                tell newsession
                    exec command $as_shcmd
                end tell
            end tell
        end tell"
    exec $trace osascript -e "$iterm_script"
    ;;

  setvar)
    varname=$1
    shift
    [ ! -x "$base64" ] || {
      value64=$( printf '%s' "$*" | $base64 )
      l33t "SetUserVar=$varname=$value64"
    }
    ;;

  switch-profile)
    profilename=$*
    printf '\e]50;SetProfile=%s\a' "$profilename" >/dev/tty
    ;;

  *)echo "$cmd: $op: unimplemented op" >&2
    exit 2
    ;;
esac
