#!/bin/sh
#
# Script to aid scheduled iTunes downloads.
#
# It still astonishes me that iTunes lacks any kind of download
# scheduling, yet many people have times that are far better for
# downloading, such as special ISP off peak times with larger data
# quotas or simply periods of known low network utilisation.
# - Cameron Simpson <cs@cskk.id.au> 08nov2017
#

set -ue

: ${VARLOG:=$HOME/var/log}

# Required flags before commencing download.
# On my systems, a default route and the ISP off peak period.
flagnames=${ITUNES_DL_FLAGS:-'ROUTE_DEFAULT ISP_OFF_PEAK'}

queuefile=$VARLOG/itunes-dl-queue.log

trace=
[ -t 2 ] && trace=set-x

opts=

cmd=$( basename "$0" )
usage="Usage: $cmd [-x] [-F flags,...] [--] [op [args...]]
  -F flags,...
      Specify flags which must be satisfied before the run operation commences.
      Default from \$ITUNES_DL_FLAGS: $flagnames
  -x  Trace execution.
  $cmd {dl|download} {itunes-track-specs...|-}
      Tail the queue file (default: $queuefile) and tell iTunes to download the items.
  $cmd selected
      Report the currently selected iTunes tracks to standard output."

badopts=

while [ $# -gt 0 ]
do
  case $1 in
    -F) flagnames=$2; shift ;;
    -x) trace=set-x opts="$opts $1" ;;
    --) shift; break ;;
    -?*)echo "$cmd: unrecognised option: $1" >&2
        badopts=1
        ;;
    *)  break ;;
  esac
  shift
done

case "$flagnames" in
  *,*)  flagnames=$( printf '%s\n' "$flagnames" | tr  , ' ' ) ;;
esac

if [ $# = 0 ]
then
  echo "$cmd: missing op" >&2
  badopts=1
else
  op=$1
  shift
fi

[ $badopts ] && { echo "$usage" >&2; exit 2; }

case "$op" in
  dl|download)
    for item
    do
      case "$item" in
        -)
          while read trackspec
          do
            $trace "$0" -F "$flagnames" $opts -- "$op" "$trackspec"
          done
          ;;
        *)
          # wait for the flags to align
          first=1
          while :
          do
            ok=1
            for flagname in $flagnames
            do
              case "$flagname" in
                \!*)  flagname=$( expr "x$flagname" : 'x.\(.*\)' )
                      flag "$flagname" && ok=
                      ;;
                *)    flag "$flagname" || ok=
                      ;;
              esac
              [ $ok ] || break
            done
            [ $ok ] && break
            sleep 17
            if [ $first ]
            then
              echo "$0: waiting for flags: $flagnames ..." >&2
              first=
            fi
          done
          $trace \
          reattach-to-user-namespace \
          osascript -e "
              activate \"iTunes\"
              tell application \"iTunes\"
                download $item
              end tell"
          # TODO: how to tell the download is complete before
          # queuing another?
          ;;
      esac
    done
    ;;
  selected)
    if [ $# -gt 0 ]
    then
      echo "$cmd: $op: extra arguments: $*" >&2
      badopts=1
    else
      $trace \
      reattach-to-user-namespace \
      osascript -e '
          tell application "iTunes"
            selection
          end tell
        ' \
      | tr , '\012'
    fi
    ;;
*)  echo "$cmd: $op: unrecognised op" >&2
    badopts=1
    ;;
esac

[ $badopts ] && { echo "$usage" >&2; exit 2; }

exit 0
