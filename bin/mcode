#!/bin/sh
#
# Modular arithmetic on YYYYMM numbers.
#	- Cameron Simpson <cs@cskk.id.au> 01feb2004
#

cmd=$0
usage="Usage: $cmd [yyyymm] [[-]n]"

mcode=`date +%Y%m`
n=

badopts=

# handle yyyymm if supplied
case "$1" in
    [12][0-9][0-9][0-9][01][0-9])
      mcode=$1
      shift
      ;;
esac

# handle [-]n if supplied
case "$1" in
  [0-9]*)
    n=$1 op=+
    shift
    ;;
  -[0-9]*)
    n=`expr "x$1" : 'x-\([0-9]*\).*'` op=-
    shift
    ;;
esac

[ $# = 0 ] || { echo "$cmd: extra arguments: $*" >&2; badopts=1; }

[ $badopts ] && { echo "$usage" >&2; exit 2; }

if [ -n "$n" ]
then
    echo "$mcode d	# two mcodes
	  100 / 12 *	# convert years into months
	  r		# save years*12, get mcode
	  1 - 100 %	# sub 1, get remainder mod 100
	  +		# add years*12
          $n $op	# do arithmetic requested
	  d		# dup
	  12 / 100 *	# compute years*100
	  r		# save years*100, get months
	  12 % 1 +	# get months remainder form months, add 1
	  +		# add years * 100
	  p" \
    | sed 's/#.*//' \
    | dc
else
    echo "$mcode"
fi
