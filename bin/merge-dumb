#!/usr/bin/python
#
# Dumbly merge two related files.
#
# This is aimed at merging files that accrue lines independently at
# multiple sites, generally a common log file updated at multiple sites and
# synched using systems like my hgbox script.
# The motivating case on my part is timesheet files, where lines are
# inserted independently on multiple hosts and merged at synch time.
#       - Cameron Simpson <cs@zip.com.au> 08jun2011
# 

from difflib import SequenceMatcher
import sys

def main(argv):
  xit = 0

  cmd = argv.pop(0)
  usage = "Usage: %s localfile otherfile\n" % (cmd,)

  if len(argv) != 2:
    sys.stderr.write(usage)
    return 2

  localfile = argv.pop(0)
  otherfile = argv.pop(0)

  with open(localfile) as localfp:
    locallines = localfp.readlines()
  with open(otherfile) as otherfp:
    otherlines = otherfp.readlines()

  localupto = 0
  otherupto = 0
  S = SequenceMatcher(None, locallines, otherlines)
  for localstart, otherstart, length in S.get_matching_blocks():
    # recite the local gap
    for line in locallines[localupto:localstart]:
      sys.stdout.write(line)
    localupto = localstart

    # recite the other gap
    for line in otherlines[otherupto:otherstart]:
      sys.stdout.write(line)
    otherupto = otherstart

    # check that the match section really matches
    if locallines[localstart:localstart+length] == otherlines[otherstart:otherstart+length]:
      # recite the matching section
      for line in locallines[localstart:localstart+length]:
        sys.stdout.write(line)
    else:
      # this should never happen
      # complain, pollute the output, and exit non-zero
      sys.stderr.write("%s: error: %s[%d:%d] does not match %s[%d:%d]\n"
                       % (cmd,
                          localfile, localstart+1, localstart+length+1,
                          otherfile, otherstart+1, otherstart+length+1))
      for line in locallines[localstart:localstart+length]:
        sys.stdout.write("LOCAL: "+line)
      for line in otherlines[otherstart:otherstart+length]:
        sys.stdout.write("OTHER: "+line)
      xit = 1

    localupto += length
    otherupto += length

  # recite tail sections, if any
  for line in locallines[localupto:]:
    sys.stdout.write(line)
  for line in otherlines[otherupto:]:
    sys.stdout.write(line)

  sys.stdout.flush()

  return xit

if __name__ == '__main__':
  sys.exit(main(sys.argv))
