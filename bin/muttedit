#!/bin/sh -u
#
# Spawn a mutt to edit a message and dispatch a reply in tmux or screen.
# This lets you detach from an unfinished reply and finish it later.
# My muttrc has this:
#
#  macro index g ":set editor=muttedit<enter><group-reply>:set editor=$EDITOR<enter>" "group reply"
#   
# - Cameron Simpson <cs@cskk.id.au> 31mar2006
# 

set -ue

: ${TMPDIR:=/tmp}

wprog=${MUTTEDIT_WINDOWPROG:-}

cmd=$0
usage="Usage:
  $cmd [-d] [-w wprog] filename
    Start a new message in mutt based on filename.
    -d          Start session detached.
    -w wprog    Invoke the submutt in wprog asynchronously.
                This is a command prefix such as \"xterm -e\".
  $cmd reopen
    Open sessions for all mutt editor files sitting about."

badopts=

if [ $# -gt 0 ] && [ "x$1" = xreopen ]
then
  shift
  xit=0
  [ $# -gt 0 ] || set -- "$HOME"/var/mutt/mutt-*[0-9]
  for msgfile
  do  [ ! -s "$msgfile" ] || ( set -x; "$0" -d "$msgfile" ) || xit=1
  done
  exit $xit
fi

bg=
mode_screen=-m
mode_tmux=
while [ $# -gt 0 ]
do
  case $1 in
    -d) bg=1 ;;
    -w) wprog=$2; shift ;;
    --) shift; break ;;
    -?*)echo "$cmd: unrecognised option: $1" >&2
        badopts=1
        ;;
    *)  break ;;
  esac
  shift
done

[ -n "$wprog" ] && bg=1
[ $bg ] && { mode_screen='-d -m' mode_tmux=-d; }

if [ $# -gt 0 ]
then
  filename=$1
  shift
  [ -s "$filename" ] || {
    echo "$cmd: expected non-empty file, got: $filename" >&2
    badopts=1
  }
  else
  echo "$cmd: missing filename" >&2
  badopts=1
fi

[ $# = 0 ] || {
  echo "$cmd: extra arguments: $*" >&2
  badopts=1
}

[ $badopts ] && {
  echo "$usage" >&2
  exit 2
}

now=$( date '+%d%b%Y-%H:%M'|tr '[A-Z]' '[a-z]' )
subj=$( sed -n -e '/^$/q; y/	/ /; /^[Ss]ubject:/{ s/^[^:]*: *//; s/[^a-zA-Z0-9:]/_/g; s/___*/_/g; p; q; }' <"$filename" | tr : _ )

session_name=mutt-$now-$subj

# take a copy of the composition file
tmpf=$TMPDIR/muttedit.$$
( umask 077; cp -- "$filename" "$tmpf" ) || exit 1
filename=$tmpf

set -- rmafter "$filename" mutt -e 'set editor=vim-flowed' -e 'unset signature' -H "$filename"

if tmux start-server
then  use_tmux=1
else  use_tmux=
fi

if [ $use_tmux ]
then
  session_name=$( printf '%s\n' "$session_name" | tr : _ )
  shcmd=$( shqstr "$@" )
  set -x
  ## was "$shcmd"
  tmux new-session $mode_tmux -s "$session_name" -- "$@"
else
  session_name=$( printf '%s\n' "$session_name" | cut -c1-20 )
  set -x
  screen $mode_screen -S "$session_name" -- "$@"
fi

if [ -n "$wprog" ]
then
  if [ $use_tmux ]
  then  set -- tmux attach-session -t "$session_name"
  else  set -- screen -Aax "$session_name"
  fi
  $wprog "$@" </dev/null >&2 &
  exit 0
fi
