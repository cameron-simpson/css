#!/usr/bin/python -tt
#
# Apply a configuration patch to a file, writing the patched config
# to the standard output.
# The patch file contains lines of the form:
#       keyword value
# - Cameron Simpson <cs@zip.com.au> 18sep2008
#

import sys
import os.path
import getopt
from cs.logutils import setup_logging, error

def main(argv):
  argv = list(argv)
  cmd = os.path.basename(argv.pop(0))
  usage = '''Usage: %s [options...] configfile [patchfile]
    -#    Comment out old keyword lines (default).
    -A    Append new keywords to the end of the file (default).
    -D    Delete old keyword lines instead of commenting.
    -I    Insert new keywords at the start of the file.
    -i    Match keywords on a case-insensitive basis.
    -/sep Keywords separated from rest of line by sep instead of whitespace.''' % (cmd,)

  setup_logging(cmd)

  badopts = False

  insert = False
  commentOut = True
  caseSensitive = True
  configFile = None
  sep = None

  try:
    opts, args = getopt.getopt(sys.argv[1:],'#ADIi/:')
  except getopt.GetoptError, e:
    error("%s", e)
    badopts = True
    args = []
  else:
    for opt, val in opts:
      if opt == '-#':
        commentOut = True
      elif opt == '-A':
        insert = False
      elif opt == '-D':
        commentOut = False
      elif opt == '-I':
        insert = True
      elif opt == '-i':
        caseSensitive = True
      elif opt == '-/':
        sep = val
      else:
        error("unimplemented option: %s", opt)
        badopts = True

  if not args:
    error("missing configfile")
    badopts = True
  else:
    configFile = args.pop(0)
    if len(args) == 0:
      patchFile='-'
    else:
      patchFile = args.pop(0)
      if args:
        error("extra arguments after patchfile: %s", args)
        badopts = True

  if configFile == '-' and patchFile == '-':
    error("configfile and patchfile cannot both be standard input")
    badopts = True

  if badopts:
    print >>sys.stderr, usage
    return 2

  if patchFile == '-':
    patchData = sys.stdin
  else:
    patchData = open(patchFile)

  patchLines=[]
  keywords={}
  for line in patchData:
    assert line.endswith('\n')
    patchLines.append(line)
    line = line.strip()
    if len(line) == 0 or line[0] == '#':
      continue
    keyword = line.split(sep)[0]
    if not caseSensitive:
      keyword = keyword.lower()
    keywords[keyword] = None

  patchData.close()

  # prepare resulting data
  outLines=[]

  if insert:
    outLines.extend(patchLines)

  if configFile == '-':
    configData = sys.stdin
  else:
    configData = open(configFile)

  for line in configData:
    assert line.endswith('\n')
    words = line.strip().split(sep)
    if len(words) > 0:
      word1 = words[0]
      if not caseSensitive:
        word1 = word1.lower()
      if word1 in keywords:
        if commentOut:
          line='#'+line
        else:
          # discard line
          continue
    outLines.append(line)

  if not insert:
    outLines.extend(patchLines)

  for line in outLines:
    sys.stdout.write(line)
  sys.stdout.close()

  return 0

if __name__ == '__main__':
  sys.exit(main(sys.argv))
