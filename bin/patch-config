#!/usr/bin/env python
#
# Apply a configuration patch to a file, writing the patched config
# to the standard output.
# The patch file contains lines of the form:
#       keyword value
# - Cameron Simpson <cs@cskk.id.au> 18sep2008
#

from __future__ import with_statement, print_function
import sys
import os.path
import getopt
from StringIO import StringIO
from cs.fileutils import rewrite
from cs.logutils import setup_logging, error, Pfx

def main(argv):
  argv = list(argv)
  cmd = os.path.basename(argv.pop(0))
  usage = '''Usage: %s [options...] configfile [patchfile]
    -#    Comment out old keyword lines (default).
    -A    Append new keywords to the end of the file (default).
    -D    Delete old keyword lines instead of commenting.
    -I    Insert new keywords at the start of the file.
    -i    Match keywords on a case-insensitive basis.
    -o output
          Write output to specified file. This can be the same as configfile.
    -O    Write output back to the input configfile.
    -/sep Keywords separated from rest of line by sep instead of whitespace.''' % (cmd,)

  setup_logging(cmd)

  badopts = False

  settings = Settings()
  settings.insert = False
  settings.commentOut = True
  settings.caseSensitive = True
  settings.sep = None

  configFile = None
  outputFile = '-'

  try:
    opts, args = getopt.getopt(sys.argv[1:],'#ADIio:O/:')
  except getopt.GetoptError, e:
    error("%s", e)
    badopts = True
    args = []
  else:
    for opt, val in opts:
      if opt == '-#':
        settings.commentOut = True
      elif opt == '-A':
        settings.insert = False
      elif opt == '-D':
        settings.commentOut = False
      elif opt == '-I':
        settings.insert = True
      elif opt == '-i':
        settings.caseSensitive = True
      elif opt == '-o':
        outputFile = val
      elif opt == '-O':
        outputFile = None
      elif opt == '-/':
        settings.sep = val
      else:
        error("unimplemented option: %s", opt)
        badopts = True

  if not args:
    error("missing configfile")
    badopts = True
  else:
    configFile = args.pop(0)
    if len(args) == 0:
      patchFile='-'
    else:
      patchFile = args.pop(0)
      if args:
        error("extra arguments after patchfile: %s", args)
        badopts = True

  if configFile == '-' and patchFile == '-':
    error("configfile and patchfile cannot both be standard input")
    badopts = True

  if outputFile is None:
    outputFile = configFile

  if badopts:
    print(usage, file=sys.stderr)
    return 2

  if patchFile == '-':
    patchLines, keywords = readPatchData(sys.stdin, settings)
  else:
    patchLines, keywords = readPatchData(patchFile, settings)

  output = StringIO()
  if configFile == '-':
    writeConfigData(output, sys.stdin, patchLines, keywords, settings)
  else:
    writeConfigData(output, configFile, patchLines, keywords, settings)
  output.seek(0)

  if outputFile == '-':
    sys.stdout.write(output.getvalue())
    sys.stdout.close()
  else:
    if os.path.exists(outputFile):
      rewrite(outputFile, output)
    else:
      with open(outputFile, "w") as ofp:
        ofp.write(output.getvalue())

  return 0

class Settings(object):
  pass

def writeConfigData(output, configFile, patchLines, keywords, settings):
  if type(configFile) is str:
    with Pfx(configFile):
      with open(configFile) as cfp:
        return writeConfigData(output, cfp, patchLines, keywords, settings)

  if settings.insert:
    for line in patchLines:
      output.write(line)

  for line in configFile:
    if not line.endswith('\n'):
      raise ValueError, "unexpected EOF"
    words = line.strip().split(settings.sep)
    if len(words) > 0:
      word1 = words[0]
      if not settings.caseSensitive:
        word1 = word1.lower()
      if word1 in keywords:
        if settings.commentOut:
          line='#'+line
        else:
          # discard line
          continue
    output.write(line)

  if not settings.insert:
    for line in patchLines:
      output.write(line)

def readPatchData(fp, settings):
  ''' Read patch lines, return patchLines and keywords map.
  '''
  if type(fp) is str:
    with Pfx(fp):
      with open(fp) as pfp:
        return readPatchData(pfp, settings)

  patchLines=[]
  keywords={}
  for line in fp:
    if not line.endswith('\n'):
      raise ValueError, "missing EOF"
    patchLines.append(line)
    line = line.strip()
    if len(line) == 0 or line[0] == '#':
      continue
    keyword = line.split(settings.sep)[0]
    if not settings.caseSensitive:
      keyword = keyword.lower()
    keywords[keyword] = None

  return patchLines, keywords

if __name__ == '__main__':
  sys.exit(main(sys.argv))
