#!/usr/bin/env python
#
# Web page utility.
#       - Cameron Simpson <cs@zip.com.au> 07jul2010
#

import sys
import os
import errno
import os.path
from itertools import chain
import re
if sys.hexversion < 0x02060000: from sets import Set as set
from urllib2 import HTTPError, URLError
from cs.logutils import setup_logging, Pfx, debug, error, warning, exception
from cs.urlutils import URL

IMAGE_SUFFIXES = ( 'png', 'jpg', 'jpeg', 'gif', 'ico', )
VIDEO_SUFFIXES = ( 'mp2', 'mp4', 'avi', 'wmv', )

usage = '''Usage: %s op [args...]
  %s url URL actions...'''

def main(argv):
  argv = list(argv)
  xit = 0
  argv0 = argv.pop(0)
  cmd = os.path.basename(argv0)
  setup_logging(cmd)

  badopts = False
  if not argv:
    error("missing op")
    badopts = True
  else:
    op = argv.pop(0)
    with Pfx(op):
      if op == 'url':
        if not argv:
          error("missing URL")
          badopts = True
        else:
          url = argv.pop(0)
          if url == '-':
            urls = [ line.strip() for line in sys.stdin ]
          else:
            urls = [ url ]
          urls = apply_actions(urls, argv)
          for url in urls:
            print url
      else:
        error("unsupported op")
        badopts = True
      
    if badopts:
      print >>sys.stderr, usage % (cmd, cmd,)
      xit = 2

  return xit

def apply_actions(urls, actions):
  ''' Return an iterable of the results of the actions applied to the URLs.
  '''
  for action in actions:
    with Pfx(action):
      debug("start urls = %s", `urls`)
      if action.startswith('/'):
        if action.endswith('/'):
          regexp = action[1:-1]
        else:
          regexp = action[1:]
        debug("regexp = /%s/", regexp)
        regexp = re.compile(regexp)
        urls = chain( *[ action_select_re(U, regexp) for U in urls ] )
      elif action == 'sort':
        urls = sorted(list(urls))
      elif action == 'unique':
        urls = set(urls)
      elif '=' in action:
        param, value = action.split('=', 1)
        if param in ('scheme', 'netloc', 'path', 'params', 'query', 'fragment', 'username', 'password', 'hostname', 'port'):
          urls = [ U for U in urls if getattr(URL(U), param) == value ]
        else:
          raise ValueError("unknown paramater test: %s=%s" % (param, value))
      else:
        urls = chain( *[ url_action(action, U) for U in urls ] )
  return urls

def url_save(U, dir=None, full_path=False, require_dir=False, overwrite_dir=False, overwrite_file=False):
  with Pfx("save(%s)" % (U,)):
    U = URL(U)
    if dir is None:
      if full_path:
        dir = os.path.join( '.', U.hostname, U.path, )
      else:
        ##print >>sys.stderr, "U =", `U`, str(U), "U.hostname =", U.hostname, "U.path =", U.path
        dir = os.path.join( '.', U.hostname, os.path.basename(os.path.dirname(U.path)) )
    if require_dir:
      if not os.path.isdir(dir):
        raise ValueError("not a directory: %s" % (dir,))
    else:
      try:
        os.makedirs(dir)
      except OSError, e:
        if e.errno != errno.EEXIST:
          raise
        if not overwrite_dir:
          n = 2
          while True:
            ndir = "%s-%d" % (dir, n)
            try:
              os.makedirs(ndir)
            except OSError, e:
              if e.errno != errno.EEXIST:
                raise
              n += 1
              continue
            dir = ndir
            break
    filename = os.path.basename(U.path)
    savepath = os.path.join(dir, filename)
    if os.path.exists(savepath) and not overwrite_file:
      n = 2
      if '.' in filename:
        filebase, fileext = filename.split('.', 1)
        fileext = '.' + fileext
      else:
        filebase, fileext = filename, ''
      while True:
        nsavepath = os.path.join(dir, "%s-%d%s" % (filebase, n, fileext))
        if not os.path.exists(nsavepath):
          savepath = nsavepath
          break
        n += 1
    debug("save to %s", savepath)
    content = U.content
    savefp = open(savepath, "wb")
    ok = False
    try:
      savefp.write(content)
      savefp.close()
    except e:
      os.remove(savepath)
      savefp.close()
      raise e

def url_action(action, U):
  ''' Accept `action` and URL `U`, yield results of action applied to URL.
  '''
  U = URL(U)
  global actions
  with Pfx("%s(%s)" % (action, U)):
    action_func = actions.get(action)
    if action_func is None:
      raise ValueError("unknown action")
    return list(action_func(U))

def url_hrefs(U, *a, **kw):
  with Pfx("hrefs(%s)" % (U,)):
    U = URL(U)
    hrefs = ()
    try:
      hrefs = U.hrefs(*a, **kw)
    except HTTPError, e:
      error("%s", e)
    except URLError, e:
      error("%s", e)
    return hrefs

def url_srcs(U, *a, **kw):
  with Pfx("srcs(%s)" % (U,)):
    U = URL(U)
    hrefs = ()
    try:
      hrefs = U.srcs(*a, **kw)
    except HTTPError, e:
      error("%s", e)
    except URLError, e:
      error("%s", e)
    return hrefs

def action_get_hrefs(U):
  ''' Return an iterable of the HREFs.
  '''
  return [ URL(H) for H in url_hrefs(U, absolute=True) ]

def action_get_hrefs_samehost(U):
  ''' Return an iterable of the HREFs.
  '''
  U = URL(U)
  return [ H for H in action_get_hrefs(U) if H.hostname == U.hostname ]

def action_get_images(U, suffixes=IMAGE_SUFFIXES):
  U = URL(U)
  for href in url_hrefs(U, absolute=True):
    ok = False
    for sfx in suffixes:
      if href.endswith('.'+sfx):
        yield URL(href)
        ok = True
        break
    if not ok:
      debug("ignore href: %s", href)

def action_get_images_samehost(U, suffixes=IMAGE_SUFFIXES):
  U = URL(U)
  return [ I for I in action_get_images(U, suffixes=suffixes) if I.hostname == U.hostname ]

def action_get_inline_images(U, suffixes=IMAGE_SUFFIXES):
  return [ URL(S) for S in url_srcs(U, 'img', absolute=True) ]

def action_get_inline_images_samehost(U, suffixes=IMAGE_SUFFIXES):
  U = URL(U)
  return [ I for I in action_get_inline_images(U, suffixes=suffixes) if I.hostname == U.hostname ]

def action_print(U):
  print U
  yield U

def action_print_type(U):
  print U, U.content_type
  yield U

def action_save(U):
  try:
    url_save(U, overwrite_dir=True)
  except HTTPError, e:
    error("%s", e)
    return
  except URLError, e:
    error("%s", e)
    return
  yield U

def action_select_re(U, re):
  if re.match(U):
    yield U

actions = {
            'hrefs':    action_get_hrefs,
            'hrefs_samehost':    action_get_hrefs_samehost,
            'images':   action_get_images,
            'images_samehost':   action_get_images_samehost,
            'iimages':  action_get_inline_images,
            'iimages_samehost':  action_get_inline_images_samehost,
            'print':    action_print,
            'save':     action_save,
            'type':     action_print_type,
          }

if __name__ == '__main__':
  import sys
  sys.exit(main(sys.argv))
