#!/bin/sh -u
#
# Attach a command to a named pipe so that other things can pipe info
# to it with abandon.
#	- Cameron Simpson <cs@zip.com.au> 09nov2002
#

cmd=`basename "$0"` || cmd=pipeto

: ${TMPDIR:=/tmp}
PIPETO_PIPENAME=$TMPDIR/$cmd$$

usage="Usage: $cmd [-fd n] [-p pipename] command [command-args...]
	-fd n	Emit shell to attach the pipe to file descriptor n
		instead of emitting the name of the pipe.
	-p pipename
		Specify name for the pipe.
	command	Command attached to output end of named pipe.
		The pipe name is in the envvar \$PIPETO_PIPENAME.
		This name is also written to stdout for use by the caller."

fd=
badopts=

while [ $# -gt 0 ]
do
  case $1 in
    -fd)fd=$2; shift ;;
    -p)	PIPETO_PIPENAME=$2; shift ;;
    --)	shift; break ;;
    -?*)echo "$cmd: unrecognised option: $1" >&2
	badopts=1
	;;
    *)	break ;;
  esac
  shift
done

if [ $# = 0 ]
then
  echo "$cmd: missing command" >&2
  badopts=1
fi

[ $badopts ] && { echo "$usage" >&2; exit 2; }

export PIPETO_PIPENAME

mknod "$PIPETO_PIPENAME" p || exit $?

( exec >&2	# stdout to stderr so child doesn't hang parent stdout read
  exec <"$PIPETO_PIPENAME"

  [ -n "$fd" ] && exec "$@"

  "$@"
  xit=$?
  rm -f "$PIPETO_PIPENAME"
  exit $?
) &

if [ -n "$fd" ]
then qpipe=`shqstr "$PIPETO_PIPENAME"` || { rm -- "$PIPETO_PIPENAME"; exit 1; }
     printf "%s\n" "exec $fd>$qpipe; rm -- $qpipe"
else printf "%s\n" "$PIPETO_PIPENAME"
fi
