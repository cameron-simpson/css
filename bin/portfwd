#!/bin/sh -ue
#
# Run the named port forwards indefinitely.
#       - Cameron Simpson <cs@zip.com.au> 08jul2008
#

set -ue

: ${VARRUN:=$HOME/var/run}
: ${LOGDIR:=$HOME/var/log}
: ${PORTFWD_CONFIG:=$HOME/rc/ssh/portfwd}
: ${PORTFWD_SSH_CONFIG:=$HOME/.ssh/config-pf}
: ${USER:=`id -un`}

trace=set-x
trace_dated='set-x --date'
setx='set -x'   ## ${DEBUG:-:}${DEBUG:+set -x}
once=
sshcfg=$PORTFWD_SSH_CONFIG
fwdcfg=$PORTFWD_CONFIG
pf_prereqnames=
sshopts=-n
doit=1

cmd=`basename "$0"`
usage="Usage:
  $cmd -d [targets...]
        Disable portfwd for targets, setting PORTFWD_TARGET_DISABLE.
        If no targets are specified, set PORTFWD_DISABLE.
  $cmd -e [targets...]
        Enable portfwd for targets, clearing PORTFWD_TARGET_DISABLE.
        If no targets are specified, clear PORTFWD_DISABLE.
  $cmd -D [targets...]
        Disable the override flag for targets, clearing PORTFWD_TARGET_OVERRIDE.
        If no targets are specified, set PORTFWD_OVERRIDE.
  $cmd -E [targets...]
        Enable the override for targets, clearing PORTFWD_TARGET_OVERRIDE.
        If no targets are specified, clear PORTFWD_OVERRIDE.
  $cmd [-1] [-F ssh_config] targets...
  -1    Once. Do not restart the tunnel if it dies.
  -F    Ssh configuration file with clause for target.
        Default from \$PORTFWD_SSH_CONFIG: $sshcfg
  -n    No action. Recite final command.
  -P pfname
        Require the named portfwd instance to have its CONNECTED
        flag true before starting our ssh. For a pfname of \"foo\"
        the flag \"PORTFWD_FOO_CONNECTED\" is tested. Multiple -P
        options may be supplied.
  -v    Verbose. Passed to ssh.

If a target starts with an upper case letter it is taken to be a group name,
and the targets are found by finding the first hostname in Host clauses with
the group name appended. Example: \"Host home ALL\""

setflag=
opts=
badopts=

while [ $# -gt 0 ]
do
  case $1 in
    -1) once=1 ;;
    -d) setflag=1 flagsuffix=DISABLE flagvalue=1 ;;
    -e) setflag=1 flagsuffix=DISABLE flagvalue=0 ;;
    -D) setflag=1 flagsuffix=OVERRIDE flagvalue=0 ;;
    -E) setflag=1 flagsuffix=OVERRIDE flagvalue=1 ;;
    -F) sshcfg=$2 opts="$opts $1 $2"; shift ;;
    -n) doit= opts="$opts $1" ;;
    -P) pf_prereqnames="$pf_prereqnames $2" opts="$opts $1 $2"; shift ;;
    -v) opts="$opts $1"; sshopts="$sshopts $1" ;;
    --) shift; break ;;
    -?*)echo "$cmd: unrecognised option: $1" >&2
        badopts=1
        ;;
    *)  break ;;
  esac
  shift
done

if [ -z "$setflag" ]
then
  if [ $# = 0 ]
  then
    echo "$cmd: no targets supplied" >&2
    sed -n 's/^ *[Hh][Oo][Ss][Tt][ 	][ 	]*/  /p' "$sshcfg" >&2
    echo >&2
    badopts=1
  fi
fi

# expand target names into host clause names
# in particular expand [A-Z]* into all host clause names marked with that group
group_members()
{ for _gm_target
  do
    case "$_gm_target" in
      [A-Z]*)
            sed -n 'y/	/ /
                    s/$/ /
                    s/^  *//
                    s/  */  /g
                    /^[Hh][Oo][Ss][Tt] .*'"$_gm_target"' /s/^[^ ]*  *\([^ A-Z][^ ]*\).*/\1/p' "$sshcfg"
            ;;
      *)    printf '%s\n' "$_gm_target"
            ;;
    esac
  done
}

# transmute group names into hosts
first=1
for target
do
  [ $first ] && { set --; first=; }
  case "$target" in
    [A-Z]*)
      # match all targets with the uppercase label
      gtargets=$(group_members "$target")
      if [ -z "$gtargets" ]
      then
        echo "$cmd: group \"$target\" does not match any Hosts in $sshcfg" >&2
        sed -n 's/^ *[Hh][Oo][Ss][Tt][ 	][ 	]*/  /p' "$sshcfg" >&2
        echo >&2
        badopts=1
      else
        set -- ${1+"$@"} $gtargets
      fi
      ;;
    *)set -- ${1+"$@"} "$target"
      ;;
  esac
done

[ $badopts ] && { echo "$usage" >&2; exit 2; }

uppername()
{ echo "$1" | tr -- '-[a-z]' '_[A-Z]'
}

lowername()
{ echo "$1" | tr -- '_[A-Z]' '-[a-z]'
}

if [ $setflag ]
then
  xit=0
  if [ $# = 0 ]
  then
    flag=PORTFWD_${flagsuffix}
    $trace flag -w "$flag" "$flagvalue" || xit=1
  else
    for target
    do
      utarget=$( uppername "$target" )
      flag=PORTFWD_${utarget}_${flagsuffix}
      $trace flag -w "$flag" "$flagvalue" || xit=1
    done
  fi
  exit $xit
fi

target=

abort() {
  $setx
  : PORTFWD TRAP "subpids=[$subpids]"
  if [ -n "$subpids" ]
  then
    killpids -W 5 -- $subpids
    [ -z "$target" ] || alert "EXITED: $target" </dev/null
  fi
  [ -n "$pidfile" ] && { >"$pidfile"; rm -f "$pidfile"; }
  [ -n "$flag_connected" ] && flag -w "$flag_connected" 0
  exit 1
}

pidfile=
subpids=
flag_connected=
trap 'abort' 1 2 3 15

# dispatch default route monitor if not already running
$trace monitor-default-route &

if [ $# -gt 1 ]
then
  # multiple targets - dispatch portfwd for each
  ( subpids=
    for target
    do
      pfx "$target" $trace "$0" $opts -- "$target" &
    done
    wait
  ) &
  subpids="$subpids $!"
  wait
  exit $?
fi

target=$1
shift

sshpidfile()
{ [ $# = 1 ] || { echo "$cmd: Usage: sshpidfile pfname" >&2; return 2; }
  echo "$VARRUN/portfwd-ssh.$1.pid"
}

utarget=$(uppername "$target")
flag_connected=PORTFWD_${utarget}_CONNECTED

ALERT_GROUP=PORTFWD_${utarget}
export ALERT_GROUP

pfflags=
pfpidfiles=

# extract "# F: pfname needs other-pfname"
# add PORTFWD_OTHER_PFNAME_CONNECTED to flags
for rc_target in $( sed -n "s/^#  *F:  *${target}  *needs  *\\([a-z][-a-z0-9]*\\) *$/\\1/p" "$sshcfg" )
do
  rc_utarget=$(uppername "$rc_target")
  pfflags="$pfflags PORTFWD_${rc_utarget}_CONNECTED"
done

# add PORTFWD_PREREQ_CONNECTED for all prerequisite portfwd names
for rc_target in $pf_prereqnames
do
  rc_utarget=$(uppername "$rc_target")
  pfflags="$pfflags PORTFWD_${rc_utarget}_CONNECTED"
done

# extract "# F: pfname needs gw ip-addr"
# add PORTFWD_GW_IP_ADDR to flags
for rc_gw in $( sed -n "s/^#  *F:  *${target}  *needs  *gw  *\\([0-9][0-9]*\\.[0-9][0-9]*\\.[0-9][0-9]*\\.[0-9][0-9]*\\) *$/\\1/p" "$sshcfg" )
do
  rc_gwname=$( printf '%s\n' "$rc_gw" | tr . _ )
  rc_ugwname=$(uppername "$rc_gwname")
  pfflags="$pfflags ROUTE_GW_$rc_ugwname"
done

# extract "# F: pfname needs gw !ip-addr"
# add PORTFWD_GW_IP_ADDR to flags
for rc_gw in $( sed -n "s/^#  *F:  *${target}  *needs  *gw  *!\\([0-9][0-9]*\\.[0-9][0-9]*\\.[0-9][0-9]*\\.[0-9][0-9]*\\) *$/\\1/p" "$sshcfg" )
do
  rc_gwname=$( printf '%s\n' "$rc_gw" | tr . _ )
  rc_ugwname=$(uppername "$rc_gwname")
  pfflags="$pfflags !ROUTE_GW_$rc_ugwname"
done

# extract probe "# F: probe probe-shell-cmannd"
pfprobes=$( sed -n "s/^#  *F:  *${target}  *probe  *\\([^ ].*\\)/\1/p" "$sshcfg" )

# extract ping probes "# F: ping [!]host..."
for rc_ping in $( sed -n "s/^#  *F:  *${target}  *ping  *\\([^ ].*\\)/\1/p" "$sshcfg" )
do
  case "$rc_ping" in
    !?*)rc_ping=$( expr "x$rc_ping" : 'x.\(.*\)' )
        rc_ping="not ping -c 1 -t 3 $rc_ping >/dev/null 2>&1"
        ;;
    ?*) rc_ping="ping -c 1 -t 3 $rc_ping >/dev/null 2>&1"
        ;;
    *)  echo "$cmd: $target: $sshcfg: invalid \"# F: ping\" target: $rc_ping" >&2
        badopts=1
        continue
        ;;
  esac
  pfprobes="$pfprobes
            $rc_ping"
done
        
# construct svcd "ok to ssh" test command
test_shcmd=' flag -w PORTFWD_OVERRIDE && exit 0
             flag -w PORTFWD_DISABLE && exit 1'

# test if fwd already running
for pfpidfile in $pfpidfiles
do
  test_shcmd="$test_shcmd
              ifpid -q '$pfpidfile' || exit 1"
done

for pfflag in $pfflags
do
  case "$pfflag" in
    !*) pfflag=$( expr "x$pfflag" : 'x!\(.*\)' )
        test_shcmd="$test_shcmd
                    flag -w '$pfflag' && exit 1"
        ;;
    *)  test_shcmd="$test_shcmd
                    flag -w '$pfflag' || exit 1"
        ;;
  esac
done
test_shcmd=" $test_shcmd
           "'flag -w ! PORTFWD_NEED_SSH_AGENT || ssh-add -l >/dev/null || exit 1
             flag -w ROUTE_DEFAULT || exit 1
            '$( printf '%s\n' "$pfprobes" | sed -n 's/ *\([^ ].*\)/{ \1; } || exit 1/p' )'
             [ -x "$HOME/bin-local/do-portfwd" ] || exit 0
             "$HOME/bin-local/do-portfwd"
            '
if [ $doit ]
then set_x=set-x
else set_x=echo
fi

# run main restart outer control via svcd
[ $once ] \
|| exec $set_x \
          svcd -q -n "portfwd-$target" \
               -t "$test_shcmd" \
               -- pfx "svcd $target" "$0" -1 $opts -- "$target"

# getconfig target
#
# Set cfg_* vars from $fwdcfg[$target].
#
getconfig()
{ if [ -s "$fwdcfg" ]
  then
    _gc_wcv=`winclausevars "$fwdcfg" "$1" cfg`
    eval "$_gc_wcv"
  fi
}

cmd="$cmd $target"
pidfile=`sshpidfile "$target"`

# reload config on every pass
# default command tails var/log/alert-local and wait for the parent sshd to exit
cfg_command='pids=
             [ ! -s var/log/alert-local ] || { tail -F var/log/alert-local & pids="$pids $!"; }
             exec >&2
             while kill -0 "$PPID"
             do
               sleep 5
             done
             [ -z "$pids" ] || kill $pids
            '
cfg_outlog=alert-$target
cfg_errlog=portfwd-$target
getconfig "$target"
case $cfg_outlog in
  /*) ;; *) cfg_outlog=$LOGDIR/portfwd/$cfg_outlog ;;
esac
case $cfg_errlog in
  /*) ;; *) cfg_errlog=$LOGDIR/portfwd/$cfg_errlog ;;
esac

[ -n "$cfg_command" ] || sshopts="$sshopts -N"

if ifpid -q "$pidfile"
then
  echo "$cmd: $pidfile: process still running" >&2
  pfx "$cmd: $pidfile" cat "$pidfile" >&2
  exit 1
fi

set --  \
    ssh $sshopts -F "$sshcfg" \
      -o 'PermitLocalCommand=yes' \
      -o "LocalCommand=flag -w '$flag_connected' 1; </dev/null alert -t 'PORTFWD ${utarget}' CONNECTED: $target &" \
      "$target" "$cfg_command" \

[ $doit ] || exec echo "$*"

flag -w "$flag_connected" 0
alert "STARTING: $target"
tag_fd 2 "$target" \
  $trace_dated \
    "$@" \
    >>"$cfg_outlog" 2>>"$cfg_errlog" </dev/null &
sshpid=$!
subpids="$subpids $sshpid"
echo "$sshpid" >"$pidfile"
wait
flag -w "$flag_connected" 0
>"$pidfile"; rm -f "$pidfile"
alert "EXITED: $target"
