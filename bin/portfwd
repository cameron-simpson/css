#!/bin/sh -ue
#
# Run the named port forwards indefinitely.
#       - Cameron Simpson <cs@zip.com.au> 08jul2008
#

set -ue

: ${VARRUN:=$HOME/var/run}
: ${LOGDIR:=$HOME/var/log}
: ${PORTFWD_CONFIG:=$HOME/rc/ssh/portfwd}
: ${PORTFWD_SSH_CONFIG:=$HOME/rc/ssh/config-pf}
: ${USER:=`id -un`}

trace=set-x
setx=${DEBUG:-:}${DEBUG:+set -x}
once=
sshcfg=$PORTFWD_SSH_CONFIG
fwdcfg=$PORTFWD_CONFIG
pfnames=

cmd=`basename "$0"`
usage="Usage: $cmd [-1] [-F ssh_config] targets...
  -1    Once. Do not restart the tunnel if it dies.
  -F    Ssh configuration file with clause for target.
        Default from \$PORTFWD_SSH_CONFIG: $sshcfg
  -P pfname
	Require the named portfwd instance to have its CONNECTED
	flag true before starting our ssh. For a pfname of \"foo\"
	the flag \"PORTFWD_FOO_CONNECTED\" is tested. Multiple -P
	options may be supplied.

If a target starts with an upper case letter it is taken to be a group name,
and the targets are found by finding the first hostname in Host clauses with
the group name appended. Example: \"Host home ALL\""

opts=
badopts=

while [ $# -gt 0 ]
do
  case $1 in
    -1) once=1 ;;
    -F) sshcfg=$2 opts="$opts $1 $2"; shift ;;
    -P) pfnames="$pfnames $2" opts="$opts $1 $2"; shift ;;
    --) shift; break ;;
    -?*)echo "$cmd: unrecognised option: $1" >&2
        badopts=1
        ;;
    *)  break ;;
  esac
  shift
done

if [ $# = 0 ]
then
  echo "$cmd: no targets supplied" >&2
  sed -n 's/^ *[Hh][Oo][Ss][Tt][ 	][ 	]*/  /p' "$sshcfg" >&2
  echo >&2
  badopts=1
fi

# transmute group names into hosts
first=1
for target
do
  [ $first ] && { set --; first=; }
  case "$target" in
    [A-Z]*)
      onargs=$#
      set -- ${1+"$@"} \
             `sed -n 'y/	/ /
                      s/$/ /
                      s/^  *//
                      s/  */  /g
                      /^[Hh][Oo][Ss][Tt] .*'"$target"' /s/^[^ ]*  *\([^ A-Z][^ ]*\).*/\1/p' "$sshcfg"`
      if [ $# = $onargs ]
      then
        echo "$cmd: group \"$target\" does not match any Hosts in $sshcfg" >&2
        sed -n 's/^ *[Hh][Oo][Ss][Tt][ 	][ 	]*/  /p' "$sshcfg" >&2
        echo >&2
        badopts=1
      fi
      ;;
    *)set -- ${1+"$@"} "$target"
      ;;
  esac
done

[ $badopts ] && { echo "$usage" >&2; exit 2; }

subpids=
trap '$setx; : PORTFWD TRAP "subpids=[$subpids]"; [ -z "$subpids" ] || killpids $subpids; exit 1' 1 2 3 15

if [ $# -gt 1 ]
then
  # multiple targets - dispatch portfwd for each
  ( subpids=
    for target
    do
      set-x "$0" $opts -- "$target" &
    done
    wait
  ) &
  subpids="$subpids $!"
  wait
  exit $?
fi

target=$1
shift

flag_connected=PORTFWD_`echo "$target" | tr -- '-[a-z]' '_[A-Z]'`_CONNECTED
pfflags=
pfpidfiles=
for pfname in $pfnames
do
  pfflags="$pfflags "PORTFWD_`echo "$pfname" | tr -- '-[a-z]' '_[A-Z]'`_CONNECTED
  pfpidfiles="$pfpidfiles $VARRUN/portfwd.$pfname.pid"
done

# construct svcd "ok to ssh" test command
test_shcmd=' flag -w PORTFWD_ANYWAY && exit 0
             flag -w PORTFWD_DISABLE && exit 1'
for pfpidfile in $pfpidfiles
do
  test_shcmd="$test_shcmd
              ifpid '$pfpidfile' || exit 1"
done
for pfflag in $pfflags
do
  test_shcmd="$test_shcmd
              flag -w '$pfflag' || exit 1"
done
test_shcmd=" $test_shcmd
           "'ssh-add -l >/dev/null || exit 1
             netstat -rn | egrep '\''^(default|0\.0\.0\.0) +[1-9]'\'' >/dev/null || exit 1
             [ -x "$HOME/bin-local/do-portfwd" ] || exit 0
             "$HOME/bin-local/do-portfwd"
            '

# run main restart outer control via svcd
[ $once ] \
|| exec set-x \
          svcd -n "PORTFWD_$target" \
               -t "$test_shcmd" \
               -- "$0" -1 $opts -- "$target"

# getconfig target
#
# Set cfg_* vars from $fwdcfg[$target].
#
getconfig()
{ if [ -s "$fwdcfg" ]
  then
    _gc_wcv=`winclausevars "$fwdcfg" "$1" cfg`
    eval "$_gc_wcv"
  fi
}

cmd="$cmd $target"
pidfile=$VARRUN/portfwd.$target.pid

# reload config on every pass
cfg_command=
cfg_outlog=portfwd-$target    # /dev/null
cfg_monitor=
getconfig "$target"
case $cfg_outlog in
  /*) ;; *) cfg_outlog=$LOGDIR/$cfg_outlog ;;
esac

sshopts=-n
[ -n "$cfg_command" ] || sshopts="$sshopts -N"

if ifpid -q "$pidfile"
then
  echo "$cmd: $pidfile: process still running" >&2
  pfx "$cmd: $pidfile" cat "$pidfile" >&2
  exit 1
fi

flag -w "$flag_connected" 0
alert "STARTING: $target"
tag_fd 2 "$target" \
  $trace \
    sshto $sshopts -F "$sshcfg" \
      -o "PermitLocalCommand=yes" -o "LocalCommand=flag -w '$flag_connected' 1; </dev/null alert CONNECTED: $target &" \
      "$target" "$cfg_command" \
    >>"$cfg_outlog" </dev/null &
sshpid=$!
echo "$sshpid" >"$pidfile"
wait
flag -w "$flag_connected" 0
>"$pidfile"; rm -f "$pidfile"
alert "EXITED: $target"
