#!/bin/sh -ue
#
# Run named port forwards indefinitely.
#       - Cameron Simpson <cs@zip.com.au> 08jul2008
#

set -ue

: ${VARRUN:=$HOME/var/run}
: ${LOGDIR:=$HOME/var/log}
: ${PORTFWD_TARGETS:-''}
: ${USER:=`id -un`}

trace=set-x
once=
stop=
sshcfg=$HOME/rc/ssh/config-pf
fwdcfg=$HOME/rc/ssh/portfwd

cmd=`basename "$0"`
usage="Usage: $cmd [-1] [-stop] targets...
  -1    Once. Do not restart the tunnel if it dies.
  -stop Stop named port forwards instead of starting them.
  -F    Ssh configuration file with clause for target.
If targets is \"ALL\" then if -stop it means all running portforwards
otherwise it means all clauses named *-ALL in the ssh configuration file."

opts=
badopts=

while [ $# -gt 0 ]
do
  case $1 in
    -1) once=1 opts="$opts $1" ;;
    -F) sshcfg=$2 opts="$opts $1 $2"; shift ;;
    -stop)
        stop=1 opts="$opts $1" ;;
    --) shift; break ;;
    -?*)echo "$cmd: unrecognised option: $1" >&2
        badopts=1
        ;;
    *)  break ;;
  esac
  shift
done

if [ $# = 0 ]
then
  set -- $PORTFWD_TARGETS
  if [ $# -gt 0 ]
  then
    echo "$cmd: no targets, using \$PORTFWD_TARGETS: $*" >&2
  else
    echo "$cmd: missing targets and missing/empty \$PORTFWD_TARGETS" >&2
    badopts=1
  fi
fi

[ $badopts ] && { echo "$usage" >&2; exit 2; }

ssh-add -l >/dev/null \
|| { echo "$cmd: no ssh-agent, aborting" >&2
     exit 1
   }

not()
{ "$@" || return 0
  return 1
}

ok2portfwd()
{
  flag -w PORTFWD_ANYWAY && return 0
  flag -w PORTFWD_DISABLE && return 1
  ssh-add -l >/dev/null || return 1
  netstat -rn | egrep '^(default|0\.0\.0\.0) +[1-9]' >/dev/null || return 1
  [ -x "$HOME/bin-local/do-portfwd" ] || return 0
  "$HOME/bin-local/do-portfwd"
}

# send SIGTERM to a process and wait for it to exit
# synckill [-v] [-s sig] [--] pids...
synckill()
{ ( subprocs=
    verbose=
    sig=TERM
    max=5
    xit=0
    while [ $# -gt 0 ]
    do
      case $1 in
        -v)       verbose=1 ;;
        -s)       sig=$2; shift ;;
        --)       shift; break ;;
        -?)       echo "$cmd: synckill: unrecognised option: $1" >&2
                  xit=2
                  ;;
        *)        break ;;
      esac
      shift
    done
    pids=$*
    [ $verbose ] && printf "%s" "$cmd: synckill $pids"
    $trace kill -s "$sig" $pids || xit=1
    pollsig=0
    while [ -n "$pids" ]
    do
      npids=
      for pid in $pids
      do  $trace kill -s "$pollsig" "$pid" 2>/dev/null && npids="$npids $pid"
      done
      pids=$npids
      if [ -n "$pids" ]
      then
        sleep 1
        [ $verbose ] && printf .
        case $max in
          0)    pollsig=KILL ;;
          1|2)  pollsig=TERM
                max=`expr $max - 1` || :
                ;;
          *)    pollsig=0
                max=`expr $max - 1` || :
                ;;
        esac
      fi
    done
    [ $verbose ] && echo
    exit $xit
  )
  return $?
}

if [ "x$*" = xALL ]
then
  if [ $stop ]
  then
    set -- `ls "$VARRUN/." | sed -n 's/\.pid$//; s/^portfwd\.//p'`
  else
    # local primary clause names of all clauses with a *-ALL name
    set -- `sed -n 'y/	/ /
                    s/$/ /
                    s/^  *//
                    s/  */  /g
                    /^[Hh][Oo][Ss][Tt] .*[^ ]-ALL/s/^[^ ]*  *\([^ ][^ ]*\).*/\1/p' "$sshcfg"`
  fi
fi

subprocs=

for sig in HUP INT TERM
do
  trap "sig=$sig
        echo \"\$cmd: received SIG\$sig\"
        [ -n \"\$subprocs\" ] && synckill -v -s \"\$sig\" \$subprocs
        exit 1
       " "$sig"
done

if [ $# -gt 1 ]
then
  set -x
  for target
  do
    "$0" $opts -- "$target" &
    subprocs="$subprocs $!"
  done
  wait
  exit $?
fi

target=$1
shift
case "$target" in
  *-ALL|*-pf)
    target_short=`expr "x$target" : 'x\(.*\)-.*'` ;;
  *)target_short=$target ;;
esac

cmd="$cmd $target_short"
target_disable_flag=PORTFWD_DISABLE_`echo "$target_short" | tr '[a-z-]' '[A-Z_]'`

xit=0
first=1
while :
do
  # reload config on every pass
  cfg_pidfile=portfwd.$target.pid
  cfg_command=:
  cfg_outlog=portfwd-$target    # /dev/null
  cfg_monitor=
  cfg_control=$HOME/.sshctrl-$USER@$target_short-pf.22
  if [ -s "$fwdcfg" ]
  then
    wcv=`winclausevars "$fwdcfg" "$target_short" cfg`
    eval "$wcv"
  fi
  case $cfg_pidfile in
    /*) ;; *) cfg_pidfile=$VARRUN/$cfg_pidfile ;;
  esac
  case $cfg_outlog in
    /*) ;; *) cfg_outlog=$LOGDIR/$cfg_outlog ;;
  esac
  if opid=`ifpid -q -v "$cfg_pidfile"`
  then
    printf "%s" "$cmd: stopping $target, pid $opid "
    synckill -v "$opid" || :
    >"$cfg_pidfile"
  else
    if [ "$stop" ]
    then  echo "$cmd: no valid pid to kill in $cfg_pidfile" >&2
    fi
  fi

  [ $stop ] && exit 0

  echo "$$" >"$cfg_pidfile"

  # if tunnel disabled, skip and check again in a bit
  flag -w "$target_disable_flag" && { sleep 10; continue; }
  ok2portfwd                  || { sleep 10; continue; }

  rm -f -- "$cfg_control"
  $trace \
    sshto \
      "ServerAliveInterval=37" \
      "ControlPath=$cfg_control" \
      -n -F "$sshcfg" "$target" \
      "( $cfg_command ) </dev/null &
     "'exec 1>&2
       while sleep 61 && printf " "; do :; done
      ' \
    >>"$cfg_outlog" </dev/null &
  subprocs="$subprocs $!"
  sshpid=$!
  [ $first ] || alert "RESTARTED: sshpf $target" &

  # start monitor
  if [ -n "$cfg_monitor" ]
  then
    sh -c "$cfg_monitor" &
    subprocs="$subprocs $!"
  fi

  # wait for tunnel to exit or tunnel permission to expire
  while kill -0 "$sshpid" && ok2portfwd
  do
    flag -w "$target_disable_flag" && break
    sleep 31
  done
  alert "EXITED: sshpf $target, pid $sshpid" &
  synckill -v $subprocs
  subprocs=

  [ $once ] && break

  # pause before restart, and indefinitely if no tunnel permission
  while :
  do
    sleep 2
    ok2portfwd && break
  done

  first=
done

exit $xit
