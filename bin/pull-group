#!/bin/sh -ue
#
# Pull named groups and members from remote /etc/groups file.
#       - Cameron Simpson <cs@zip.com.au> 12may2008
#

. ${OPTCSS:-/opt/css}/env.sh
: ${TMPDIR:=/tmp}

cmd=`basename "$0"`
usage="Usage: $cmd [-x] [-G group-override] [-R] {/path/to/group|[user]@host} group...
  [user]@host
        Specify remote user and host to query for group information.
        With no user, take the user from \`who am i\`.
  -A    Add missing members.
  -G group-override
        A local group file to override group memberships.
        Format:
          group:member,member,...
  -R    Remove extra members.
  -x    Trace execution. Default is to recent planned actions."

trace=eecho
lgroup=/etc/group
ssh=ssho
groupoverride=
addmembers=
removemembers=
remote=
rgroup=

badopts=

while [ $# -gt 0 ]
do
  case $1 in
    -A) addmembers=1 ;;
    -G) groupoverride=$2 ;;
    -R) removemembers=1 ;;
    -x) trace=set-x ;;
    --) shift; break ;;
    -?*)echo "$cmd: unrecognised option: $1" >&2
        badopts=1
        ;;
    *)  break ;;
  esac
  shift
done

if [ $# = 0 ]
then
  echo "$cmd: missing user@host" >&2
  badopts=1
else
  remote=$1
  shift
  case "$remote" in
    /*) rgroup=$remote
        if [ ! -s "$rgroup" ]
        then
          echo "$cmd: $rgroup: need non-empty file" >&2
          badopts=1
        fi
        ;;
    @?*)if whoami=`who am i | awk '{print $1}'` && [ -n "$whoami" ]
        then
          remote=$whoami$remote
        else
          echo "$cmd: $remote: can't infer user from \`who am i\`" >&2
          badopts=1
        fi
        ;;
    *@?*);;
    *)  echo "$cmd: invalid user@host: $remote" >&2
        badopts=1
        ;;
  esac
fi

if [ $# = 0 ]
then
  echo "$cmd: missing groups" >&2
  badopts=1
fi

if [ -n "$groupoverride" ] && [ ! -f "$groupoverride" ]
then
  echo "$cmd: missing group override file: $groupoverride" >&2
  badopts=1
fi

[ $badopts ] && { echo "$usage" >&2; exit 2; }

getgid()
{ awk -F: -v "group=$1" '$1 == group { print $3 }' "$2"
}
getmembers()
{ awk -F: -v "group=$1" '$1 == group { print $4 }' "$2" | tr , ' '
}
rcmd()
{ _rcmd_qargs=`shqstr "$@"`
  set-x $ssh "$remote" "$_rcmd_qargs"
}

if [ -z "$group" ]
then
  rgroup=$TMPDIR/$cmd.$$
  trap 'rm -f "$rgroup"' 0
  trap 'rm -f "$rgroup"; exit 1' 1 2 13 15
  rcmd cat /etc/group >"$rgroup"
fi

modgroups=
for grouparg
do
  case $grouparg in
    [1-9]*-[1-9]*)
      lrgid=`expr "x$grouparg" : 'x\([1-9][0-9]*\).*'`
      hrgid=`expr "x$grouparg" : 'x[1-9][0-9]*-\([1-9][0-9]*\).*'`
      awkprg="\$3 >= $lrgid && \$3 <= $hrgid { print \$1 }"
      groups=`rcmd awk -F: "$awkprg" /etc/group`
      ;;
    [1-9]*)
      lrgid=`expr "x$grouparg" : 'x\([1-9][0-9]*\).*'`
      awkprg="\$3 == $lrgid { print \$1 }"
      groups=`rcmd awk -F: "$awkprg" /etc/group`
      ;;
    *)  
      groups=$grouparg
      ;;
  esac

  for group in $groups
  do
    didmod=
    lgid=`getgid "$group" "$lgroup"`
    rgid=`getgid "$group" "$rgroup"`
    if [ -z "$rgid" ]
    then
      echo "$cmd: $group: no remote group" >&2
      exit 1
    fi
    if [ -z "$lgid" ]
    then
      pfx "$group" $trace groupadd -g "$rgid" "$group"
      didmod=1
    else
      if [ "x$lgid" != "x$rgid" ]
      then
        echo "$cmd: $group: warning: local gid ($lgid) != remote ($rgid)" >&2
      fi
    fi

    if [ $addmembers$removemembers ]
    then
      lmembers=`getmembers "$group" "$lgroup"`
      if [ -n "$groupoverride" ] && grep '^$group:' "$groupoverride" >/dev/null
      then  rmembers=`sed '/^$group:/!d; y/,/ /' "$groupoverride"`
      else  rmembers=`getmembers "$group" "$rgroup"`
      fi

      if [ $addmembers ]
      then
        for member in $rmembers
        do
          case " $lmembers " in
            *" $member "*)
              ;;
            *)pfx "$group" $trace bsed -s "/^$group:/{ /:\$/!s/\$/,/; s/\$/$member/; }" "$lgroup"
              didmod=1
              ;;
          esac
        done
      fi

      if [ $removemembers ]
      then
        for member in $lmembers
        do
          case " $rmembers " in
            *" $member "*)
              ;;
            *)pfx "$group" $trace bsed -s "/^$group:/{ s/:/:,/; s/\$/,/; s/,$member,/,/; s/,$//; s/:,/:/; }" "$lgroup"
              didmod=1
              ;;
          esac
        done
      fi
    fi

    [ $didmod ] && modgroups="$modgroups $group"
  done
done

for group in $modgroups
do
  grep "^$group:" "$lgroup"
done
