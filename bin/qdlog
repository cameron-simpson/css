#!/usr/bin/python -tt
#
# Query my dlog.
#       - Cameron Simpson <cs@zip.com.au> 14dec2005
#

import os
import os.path
import sys
import re
import string
from getopt import getopt, GetoptError
import cs.lex
from cs.logutils import setup_logging, error
from cs.misc import warn,cmd,chomp

if 'LOGDIR' in os.environ:
  logdir=os.environ['LOGDIR']
else:
  logdir=os.path.join(os.environ['HOME'],'var','log')

log=os.path.join(logdir,'dlog')
relist=[]
lastremode=False

usage="""Usage: """+cmd+""" [-i incre]... [-e excre]... prefix
        -i      Include lines matching the regexp incre.
        -e      Exclude lines matching the regexp excre.
        The default is the inverse of the last include/exclude."""

badopts=False

print "argv =", `sys.argv`
try:
  (opts,argv)=getopt(sys.argv[1:],'i:e:')
except GetoptError, e:
  error("unrecognised option: %s: %s", e.opt, e.msg)
  badopts=True

for (opt,val) in opts:
  print 'opt =', opt, 'val =', `val`
  if opt == '-i':
    relist.append((True, re.compile(val), val))
    lastremode=True
  elif opt == '-e':
    relist.append((False, re.compile(val), val))
    lastremode=False

if len(argv) == 0:
  error("missing prefix")
  badopts=True
else:
  prefix=argv[0]
  if len(argv) > 1:
    error("extra arguments after prefix: %s", argv[1:])
    badopts=True

if badopts:
  warn(usage)
  sys.exit(2)

dfltrelist=file(os.path.join(os.environ['HOME'],'rc','dlog','q-'+prefix))
if dfltrelist:
  for regexp in dfltrelist:
    regexp=chomp(regexp)
    relist.append((False, re.compile(regexp), regexp))

relist.append((not lastremode, None, ''))

showndate=None
curdate=None
email={}

def showdate():
  global showndate
  global curdate
  if curdate != showndate:
    print curdate
    showndate=curdate

def newdate(when):
  global email
  global curdate
  if email:
    flushemail()
  curdate=when

def flushline(hhmm,line):
  showdate()
  print ' ', hhmm, line

def cmpmsgs(a,b):
  return cmp(a['HHMM'],b['HHMM'])

def flushemail():
  global email
  if email:
    showdate()
    print "  EMAIL:"
    subjlist=email.keys()
    subjlist.sort()
    for subj in subjlist:
      print '  ', subj+':'
      pfx='   '
      topic=email[subj]
      msgs=[topic[msgid] for msgid in topic]
      msgs.sort(cmpmsgs)
      for msg in msgs:
        rpt=msg['HHMM']+": "
        if 'FROM' in msg: rpt=rpt+string.join(cs.misc.uniq(msg['FROM']),', ')
        if 'TO' in msg:   rpt=rpt+'->'+string.join(cs.misc.uniq(msg['TO']),', ')
        print pfx, rpt  ##  msg['MSGID']
        pfx='   '
    email={}

def noteEmail(subj,msgid,hhmm,attr,value):
  global email
  if subj not in email: email[subj]={}
  topic=email[subj]
  if msgid not in topic: topic[msgid]={}

  msg=topic[msgid]

  if 'HHMM' not in msg: msg['HHMM']=hhmm
  if 'MSGID' not in msg: msg['MSGID']=msgid

  if attr in msg: msg[attr].append(value)
  else:           msg[attr]=[value]

def testre(line):
  global relist
  ok=True
  for (mode,re,ptn) in relist:
    if re is None:
      ok=mode
      break

    m=re.search(line)
    if m:
      ok=mode
      break

  return ok

q_re=re.compile(prefix+':')

qto_re=re.compile(r'([^@ \t]+@[^@ \t]+)<-\s+(re\b:?\s*)*',re.I)
qto_re2=re.compile(r'->([^@ \t]+@[^@ \t]+)\s+(re\b:?\s*)*',re.I)

qfrom_re=re.compile(r'<-([^@ \t]+@[^@ \t]+)\s+(re\b:?\s*)*',re.I)
qfrom_re2=re.compile(r'([^@ \t]+@[^@ \t]+)->\s+(re\b:?\s*)*',re.I)

qmsgid_re=re.compile(r'\s+(<[^<>@ \t]+@[^<>@ \t]+>)$')

hhmm_re=re.compile(r'^(\d\d:\d\d)\s*')

for line in file(log):
  line=chomp(line)

  if len(line) == 0:
    continue

  if line[0] not in string.whitespace:
    newdate(line)
    continue
  line=line[cs.lex.skipwhite(line):]

  m=hhmm_re.match(line)
  if not hhmm_re.match(line):
    print "BAD LINE:", line
    continue
  hhmm=m.group(1)
  line=line[cs.lex.skipwhite(line,len(hhmm)):]

  m=q_re.match(line)
  if m is None:
    continue

  line=line[cs.lex.skipwhite(line,len(m.group(0))):]
  if not testre(line):
    # rejected by regexps
    continue

  #####################################
  # Look for Q: foo@bar<- subj <msgid>
  #       or Q: ->foo@bar subj <msgid>
  m=qto_re.match(line)
  if not m: m=qto_re2.match(line)
  if m:
    m_to=m.group(1)
    m_subj=line[len(m.group(0)):]
    m_msgid=''
    m=qmsgid_re.search(m_subj)
    if m:
      m_msgid=m.group(1)
      m_subj=m_subj[:-len(m.group(0))]
    else:
      m_msgid=''

    noteEmail(m_subj,m_msgid,hhmm,'TO',m_to)
    continue

  #####################################
  # Look for Q: <-foo@bar subj <msgid>
  #       or Q: foo@bar-> subj <msgid>
  m=qfrom_re.match(line)
  if not m: m=qfrom_re2.match(line)
  if m:
    m_from=m.group(1)
    m_subj=line[len(m.group(0)):]
    m_msgid=''
    m=qmsgid_re.search(m_subj)
    if m:
      m_msgid=m.group(1)
      m_subj=m_subj[:-len(m.group(0))]
    else:
      m_msgid=''

    noteEmail(m_subj,m_msgid,hhmm,'FROM',m_from)
    continue

  #####################################
  # Just Q: logline
  flushline(hhmm,line)

newdate(None)
