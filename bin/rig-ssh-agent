#!/bin/sh
#
# Ensure we have an ssh agent, setting up a per-host ssh-agent in daemon mode if needed.
# Emit $SSH_AUTH_SOCK to stdout.
#
# I keep a shell function around to access the host agent:
#
#    gsa(){
#      SSH_AUTH_SOCK=`rig-ssh-agent ${1+"$@"}`; export SSH_AUTH_SOCK
#    }
#
# and I run this in my shell startups:
#
#    SSH_AUTH_SOCK=`rig-ssh-agent -L`; export SSH_AUTH_SOCK
#
# which attaches to my common host agent on local shells.
# - Cameron Simpson <cs@cskk.id.au> 30jul2001
#

set -ue

: ${HOST:=`hostname -s`}

statefile=${SSH_AGENT_STATEFILE:-$HOME/var/run/ssh-agent-$HOST}
ssh_connection=${SSH_CONNECTION:-''}

cmd=$0
usage="Usage: $cmd [-f] [-h] [-H] [-L]
  -f    Force the creation of a new ssh-agent, updating the state file
        $statefile
  -h    Get the host specific agent, starting one if necessary.
        The default (no -f or -h) will use an existing agent if already set up.
  -H    If we are remote (\$SSH_CONNECTION not empty) and there is a host
        specific ssh-agent, use that.
  -L    If we are not remote (no \$SSH_CONNECTION) and there is a host
        specific ssh-agent, use that."

force=
usehost=

is_remote(){
  [ -n "$ssh_connection" ]
}

has_agent(){
  [ -n "${SSH_AUTH_SOCK:-}" ] && { ssh-add -l >/dev/null || [ $? = 1 ]; }
}

get_host_agent(){
  [ -s "$statefile" ] \
  && . "$statefile" >/dev/null \
  && has_agent
}

# test get_host_agent in a subshell
has_host_agent(){
  ( get_host_agent )
}

badopts=
while [ $# -gt 0 ]
do
  case $1 in
    -f) force=1 ;;
    -h) usehost=1 ;;
    -H) is_remote && has_host_agent && { usehost=1 || :; } ;;
    -L) is_remote || { has_host_agent && usehost=1 || :; } ;;
    -?*)echo "$cmd: unrecognised option: $1" >&2; badopts=1 ;;
    *)  break ;;
  esac
  shift
done

[ $# = 0 ] || { echo "$cmd: extra arguments: $*" >&2; badopts=1; }

[ $badopts ] && { echo "$usage" >&2; exit 2; }

exec 3>&1 1>&2

if [ $force ]
then
  need_agent=1
else
  need_agent=
  if [ $usehost ]
  then
    get_host_agent || need_agent=1
  else
    has_agent || need_agent=1
  fi
fi

if [ $need_agent ]
then
  # start new agent
  new_agent_shcmd=$(exec 3>&-; ssh-agent -s )
  eval "$new_agent_shcmd"
  [ $usehost ] && {
    printf '%s\n' "$new_agent_shcmd" > "$statefile" || :
  }
fi

exec 1>&3 3>&-
echo "$SSH_AUTH_SOCK"
