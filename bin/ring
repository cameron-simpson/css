#!/usr/bin/env python3
#
# Reimplement ring in Python, presume gpg-agent available.
# - Cameron Simpson <cs@cskk.id.au> 16apr2018
#

import os
from os.path import expanduser, basename, isdir, isfile, join as joinpath
import re
from subprocess import Popen, PIPE
import sys

CMD = basename(__file__)
USAGE = 'Usage: %s patterns...'

def main(argv=None):
  if argv is None:
    argv = sys.argv
  cmd = argv.pop(0)
  CMD = cmd
  usage = USAGE % (cmd,)
  badopts = False
  if not argv:
    print("%s: missing paterrns" % (cmd,), file=sys.stderr)
    badopts = True
  else:
    patterns = argv
    ptns = []
    for pattern in patterns:
      ptns.append(re.compile(pattern, re.I))
  pathses = [ pathsof(path) for path in os.environ.get('TELNOS', expanduser('~/rc/telnos')).split(':') if path ]
  paths = []
  for pathses0 in pathses:
    paths.extend(pathses0)
  if badopts:
    print(usage, file=sys.stderr)
    return 2
  for path in paths:
    if path.endswith('.gpg'):
      lines = gpgfrom(path)
    else:
      lines = txtfrom(path)
    for clause in clausesof(lines):
      matched = True
      for ptn in ptns:
        if not ptn.search(clause):
          matched = False
          break
      if not matched:
        continue
      print(clause.rstrip())
  return 0

def pathsof(path):
  if isfile(path):
    yield path
  elif isdir(path):
    for dirpath, dirnames, filenames in os.walk(path):
      dirnames[:] = [ name for name in sorted(dirnames) if name and not name.startswith('.') ]
      for name in sorted(filenames):
        if not name or name.startswith('.'):
          continue
        filepath = joinpath(dirpath, name)
        if isfile(filepath):
          yield filepath
  else:
    print("%s: warning: not a file or directory: %s" % (CMD, path), file=sys.stderr)

def clausesof(lines):
  clause_lines = []
  for line in lines:
    line = line.rstrip()
    if line and not line[0].isspace():
      if clause_lines:
        yield '\n'.join(clause_lines)
      clause_lines = []
    clause_lines.append(line)
  if clause_lines:
    yield '\n'.join(clause_lines)

def txtfrom(fp):
  if isinstance(fp, str):
    path = fp
    with open(path) as fp:
      yield from txtfrom(fp)
  else:
    for line in fp:
      yield line

def gpgfrom(fp):
  if isinstance(fp, str):
    path = fp
    print(path, '...', file=sys.stderr)
    with open(path, 'rb') as fp:
      yield from gpgfrom(fp)
  else:
    argv = ['gpg2', '-q', '--use-agent', '--decrypt']
    print('+', *argv, file=sys.stderr)
    P = Popen(argv, stdin=fp.fileno(), stdout=PIPE)
    yield from txtfrom(bline.decode(errors='replace') for bline in P.stdout)
    P.wait()

if __name__ == '__main__':
  sys.exit(main(sys.argv))
