#!/bin/sh
#
# Replace text between two lines denoted by regexps.
# - Cameron Simpson <cs@cskk.id.au> 20sep1995
#

set -ue

: "${TMPDIR:=/tmp}"

cmd=$( basename "$0" )
usage="Usage: $cmd -f from -t to {-|target-file} [replacement-files...]
  Replace line range: replace text in \"target-file\" between \"from\" and
  \"to\" with the text from the \"replacement-files\", default standard input.

  Arguments:
  -f from     Start line marked specified by regexp \"from\".
  -t to       Start line marked specified by regexp \"to\".
  -p pipecmd  Pipe the contents of the replacement-files through pipecmd,
              a shell command.  The line range being replaced will be
              available on file descriptor 3 should it be useful.
  target-file The file to patch. If \"-\", run in \"filter\" mode, patching
              standard input and writing the result to standard output.
  replacement-files
                Files providing the replacement text. \"-\" means standard
                input.  Default: standard input.

  Examples:

  Patch the lines in the file \"target\" between \"# W START\"
  and \"# W END\" with the output of the \"w\" command:

    w | rlr -f '^# W START' -t '^# W END' target

  Filter a template on standard input, replacing lines between \"# PFX START\"
  and \"# PFX END\" with input from the file \"data\" processed by the sed
  command:

    rlr -f '^# SH START' -t '^# SH END' -p 'sed \"s/^/## /\"' - data <template >result

  Filter a template on standard input, replacing the shell script between
  \"# SH START\" and \"# SH END\" with input from the file \"shdata\"
  processed by the shell script. The descriptor shuffle below moves the
  replacement text from standard input to file descriptor 4 and the shell
  script, previously on 3, to standard input where the shell can read it.
  The script inside the template should then process descriptor 4:

    rlr -f '^# SH START' -t '^# SH END' -p \"sh 4<&0 0<&3\" - shdata <template >result

  The corresponding script inside the template might be marked out like this:

      # SH START
      while read data <&4
      do  do something with \$data
      done
      # SH END"

from=
to=
pipecmd=

badopts=

while [ $# -gt 0 ]
do
  case $1 in
    -f) from=$2; shift ;;
    -t) to=$2; shift ;;
    -p) pipecmd=$2; shift ;;
    --) shift; break ;;
    -?*)echo "$cmd: unrecognised option: $1" >&2
        badopts=1 ;;
    *)  break ;;
  esac
  shift
done

[ -n "$from" ] || { echo "$cmd: missing -f option" >&2; badopts=1; }
[ -n "$to" ] || { echo "$cmd: missing -t option" >&2; badopts=1; }

if [ $# = 0 ]
then
  echo "$cmd: missing target" >&2
  badopts=1
else
  target=$1; shift
  case "$target" in
    -)  filter_mode=1 ;;
    *)  filter_mode= ;;
  esac
fi

[ $# = 0 ] && set -- -

# if ok so far, sanity check the replacement-files
[ $badopts ] || \
  if [ $filter_mode ]
  then
    # sanity check the replacement files
    for src
    do
      [ "x$src" = x- ] && {
        echo "$cmd: cannot use standard input (aka \"-\") in replacement-files in filter mode" >&2
        badopts=1
        break
      }
    done
  fi

[ $badopts ] && { echo "$usage" >&2; exit 2; }

tmp=$TMPDIR/$cmd.$$
front=$tmp.front
middle=$tmp.middle
back=$tmp.back

# convert "/" in from/to regexps for embedding in sed
case $from in
  */*)  from=$( printf '%s\n' "$from" | sed 's|/|\\\\/|g' ) ;;
esac
case $to in
  */*)  to=$( printf '%s\n' "$to" | sed 's|/|\\\\/|g' ) ;;
esac

ok=1

trap 'rm -f "$front" "$middle" "$back"' 0
trap 'rm -f "$front" "$middle" "$back"; exit 1' 1 2 13 15

exec 3<&0       # save stdin

# read the whole target file and grab the top and bottom bits
# this lets us use the same file for input and output

( [ $filter_mode ] || exec <"$target"
  sed -n "1,/$from/w $front
          /$from/,/$to/{
            /$from/b next
            /$to/b next
            w $middle
          }
          :next
          /$to/,\$w $back"
) || ok=

if [ $ok ]
then
    [ $filter_mode ] || exec >"$target"
    cat <"$front"
    cat "$@" \
    | if [ -n "$pipecmd" ]
      then  sh -uec "$pipecmd" 3<"$middle"
      else  cat
      fi
    cat <"$back"
fi

[ $ok ] && exit 0 || exit 1
