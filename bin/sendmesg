#!/usr/bin/python
#
# Acts like sendmail but intercepts messages to newsgroup@usenet and
# dispatches then via NNTP, suitably rewritten. Addresses come on the
# command line.
#	- Cameron Simpson <cs@zip.com.au> 08jun2002
#

import os
import os.path
import sys
import email
import nntplib
import time
from thread import allocate_lock
from subprocess import Popen, PIPE

def main(argv):
  cmd=argv[0]
  usage='''Usage: %s [--] addresses...''' % (cmd,)

  badopts = False
  args = argv[1:]

  # mutt puts a "--" before any addresses when running sendmail
  if args and args[0] == '--':
    args.pop(0)

  if not args:
    print >>sys.stderr, "%s: missing addresses" % (cmd,)
    badopts = True

  if badopts:
    print >>sys.stderr, usage
    return 2

  sys.stderr = open(os.path.join(os.environ['HOME'], 'sendmesg.out'), "a")

  M = email.message_from_file(sys.stdin)

  newsgroups = []
  emailaddrs = []
  for addr in args:
    if addr.endswith('@usenet'):
      newsgroups.append(addr[:-7])
    else:
      emailaddrs.append(addr)

  # right-most is presumably the in-reply-to if present
  refs = list(getrefs(M))

  if 'message-id' not in M:
    M['Message-ID'] = "<%d-%d-%d@%s>" \
                    % (time.time(), os.getpid(), seq(), os.environ['HOSTNAME'])

  if newsgroups:
    if 'newsgroups' in M:
      M['X-Old-Newsgroups'] = ','.join(M['newsgroups'])
      del M['newsgroups']
    M['Newsgroups'] = ','.join(newsgroups)
    user = os.environ['USER']
    sitename = os.environ['SITENAME']
    M['Path'] = "%s!%s" % (sitename, user)

  if refs:
    if 'in-reply-to' not in M:
      M['In-Reply-To'] = refs[-1]
    if 'references' not in M:
      M['References'] = ' '.join(refs)

  msgtxt = M.as_string(unixfrom=False)

  if newsgroups:
    NN = nntplib.NNTP(os.environ['NNTPSERVER'])
    NN.post(StringIO(msgtxt))
    NN.quit()

  if emailaddrs:
    P = Popen( ['set-x', os.environ.get('SENDMAIL', 'sendmail'),'-oi']+emailaddrs,
               stdin = PIPE,
               close_fds = True
             )
    P.stdin.write(msgtxt)
    P.stdin.close()
    P.wait()

  return 0

__seq = 0
__seqLock = allocate_lock()
def seq():
  ''' Allocate a new sequential number.
      Useful for creating unique tokens.
      Impl from cs.seq.
  '''
  global __seq
  global __seqLock
  __seqLock.acquire()
  __seq += 1
  n = __seq
  __seqLock.release()
  return n

def getrefs(M):
  for hdr in M.get_all('references', ()):
    for R in hdr.split(','):
      yield R.strip()
  for hdr in M.get_all('in-reply-to', ()):
    for R in hdr.split(','):
      yield R.strip()

if __name__ == "__main__":
  sys.exit(main(sys.argv))
