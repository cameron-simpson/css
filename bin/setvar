#!/usr/bin/env py25+
#
# Script to compute various environment parameters.
# Must be sourced, and defines the shell function setvar() as a consequence.
#	- Cameron Simpson, 18may1993
#
# Removed -n option.
# Recoded not to recurse to bypass Sys5 shell braindamage. - cameron, 30jul1993
# Recoded in Perl to bypass more shell braindamage.
# You don't source it anymore. - cameron, 07jan1994
# Added -f to force resetting variables. - cameron, 11jan1994
# Generalisation. - cameron, 02dec1998
# Python recode, syntax change, bootstrap. - cameron 23mar2008
#

from __future__ import with_statement
from getopt import getopt, GetoptError
import os
import os.path
import pwd
import sys
if sys.hexversion < 0x02060000: from sets import Set as set
from cs.env import envsub
from cs.lex import get_identifier
from cs.logutils import error, warning, info, debug, Pfx, setup_logging, X
import cs.sh

def main(argv):
  cmd = os.path.basename(argv[0])
  args = argv[1:]
  setup_logging(cmd)

  # load up the environ mapping
  environ = EnvMapping()
  for var in 'HOME', 'PATH':
    environ[var] = os.environ[var]

  home = environ['HOME']
  envpath = environ['ENVPATH'] = \
                   '%s/.setvar-local:%s/.setvar:/etc/setvar' % (home, home)
  # load the "var" file from each directory in $ENVPATH
  for envdir in reversed(envpath.split(':')):
    varfile = os.path.join(envdir, 'var')
    if os.path.isfile(varfile):
      for var, value in filevars(varfile):
        environ._definitions[var] = value

  if len(args) == 0:
    args=('var *',)

  named_vars = set()
  for arg in args:
    if ' ' in arg:
      doCommand(arg.split(), environ, named_vars)
    else:
      setvar(arg, None, environ, named_vars)

  for var in 'PATH', 'MANPATH', 'PYTHONPATH', 'PERL5LIB':
    try:
      new_value = cleanpath(environ[var])
    except ValueError:
      pass
    else:
      environ[var] = new_value

  for var in sorted(named_vars):
    try:
      value = environ[var]
    except ValueError as e:
      error("cannot define $%s: %s", var, e)
      raise
    else:
      print "%s=%s; export %s;" % (var, cs.sh.quotestr(value), var)

def filevars(path):
  ''' Return a list of (var, value) tuples from the specific file.
  '''
  items = []
  with Pfx(path):
    with open(path) as fp:
      lineno = 0
      for line in fp:
        lineno += 1
        with Pfx(lineno):
          if not line.endswith('\n'):
            raise ValueError('unexpected EOF: missing trailing newline')
          line = line[:-1].lstrip()
          if not line or line.startswith('#'):
            continue
          try:
            var, value = line.split('=', 1)
          except ValueError:
            raise ValueError('missing "="')
          items.append( (var, value) )
  return items

def setvar(var, value, environ, named_vars):
  if value is None:
    try:
      value = environ[var]
    except KeyError:
      warning("no definition for $%s, using empty value" % (var,))
      value = ''
    else:
      ##warning("choosing existing value for $%s: %r" % (var, value))
      pass
  environ[var] = value
  named_vars.add(var)
  return value

def doCommand(argv, environ, named_vars):
  op = argv[0]
  argv = argv[1:]
  if op == 'addprefix':
    for arg in argv:
      arg = envsub(arg, environ=environ, default='')
      if not os.path.isabs(arg):
        arg=os.path.join('/opt',arg)
      setvar('PATH',
             '%s:%s/bin:%s/sbin' % (environ['PATH'], arg, arg),
             environ,
             named_vars)
      setvar('MANPATH',
             '%s:%s/man:%s/share/man' % (environ['MANPATH'], arg, arg),
             environ,
             named_vars)
      setvar('PERL5LIB',
             '%s:%s/lib/perl5:%s/lib/perl5/vendor_perl'
             % (environ['PERL5LIB'], arg, arg),
             environ,
             named_vars)
  elif op == 'insprefix':
    for arg in reversed(argv):
      arg = envsub(arg, environ=environ, default='')
      if not os.path.isabs(arg):
        arg=os.path.join('/opt',arg)
      setvar('PATH',
             '%s/bin:%s/sbin:%s' % (arg, arg, environ['PATH']),
             environ,
             named_vars)
      setvar('MANPATH',
             '%s/man:%s/share/man:%s' % (arg, arg, environ['MANPATH']),
             environ,
             named_vars)
      setvar('PERL5LIB',
             '%s/lib/perl5:%s/lib/perl5/vendor_perl:%s'
             % (arg, arg, environ['PERL5LIB']),
             environ,
             named_vars)
  elif op == 'python':
    pycmd = ' '.join(argv)
    eval(pycmd)
  elif op == 'use':
    for arg in argv:
      if os.path.isabs(arg):
        doFile(arg, environ, named_vars)
      else:
        envpath = environ['ENVPATH']
        if envpath is None:
          raise ValueError("BAD ENVPATH: environ= %s %r", type(environ), environ)
        for path in envpath.split(':'):
          fpath = os.path.join(path, arg)
          if os.path.isfile(fpath):
            doFile(fpath, environ, named_vars)
            break
  elif op == 'var':
    for arg in argv:
      if arg == '*':
        varlist = sorted(set( get_identifier(v)[0] for v in environ.keys() ))
      else:
        varlist = envsub(arg, environ=environ, default='').split(' ')
      for var in varlist:
        try:
          setvar(var, None, environ, named_vars)
        except ValueError, e:
          error(str(e))
  else:
    error("unsupported operation: %s", op)

def doFile(path, environ, named_vars):
  with Pfx(path):
    oline=""
    lineno = 0
    for line in open(path):
      lineno += 1
      with Pfx("%d", lineno):
        if not line.endswith('\n'):
          error("unexpected EOF - missing newline")
          break
        line = line.strip()
        if not line or line.startswith('#'):
          continue
        word1, offset = get_identifier(line)
        if not word1:
          error("no var= or command")
          continue
        if offset < len(line) and line[offset] == '=':
          setvar(word1,
                 envsub(line[offset+1:], environ, default=''),
                 environ,
                 named_vars)
        else:
          doCommand(line.split(), environ, named_vars)

def cleanpath(path, sep=':'):
  keep = []
  for subpath in path.split(sep):
    if subpath not in keep and os.path.exists(subpath):
      keep.append(subpath)
  return sep.join(keep)

class EnvMapping(object):

  def __init__(self, baseenv=None):
    self._defined = {}
    if baseenv:
      self._defined.update(baseenv)
    self._definitions = {}

  def keys(self):
    ks = set()
    ks.update(self._defined.keys())
    ks.update(self._definitions.keys())
    return ks

  def get(self, var, default=None):
    value = self[var]
    if value is None:
      warning("no value computed for $%s, returning default (%r)", var, default)
      value = default
    return value

  def __setitem__(self, var, value):
    ##if var in self._definitions:
    ##  warning("overwrite $%s: %r ==> %r", var, self._definitions[var], value)
    self._defined[var] = value

  def __getitem__(self, var):
    value = self._defined.get(var)
    if value is not None:
      return value
    value = self._compute(var)
    if value is None:
      raise ValueError("$%s ==> None!" % (var,))
    self._defined[var] = value
    return value

  def _compute(self, var):
    # prevent recursion
    placeholder = '$' + var
    self._defined[var] = placeholder
    # try var.ext for the various extensions
    for ext in self._exts():
      var_ext = var + ext
      value = self._definitions.get(var_ext)
      if value is None:
        continue
      return envsub(value, environ=self)
    value = self._definitions.get(var)
    if value is not None:
      return envsub(value, environ=self)
    value = self._boot(var)
    if value is not None:
      return value
    return placeholder

  def _boot(self, var):
    ''' Compute the value of a variety of variables from scratch.
    '''
    if var == "CPU":
      cpu = os.uname()[4].lower()
      if cpu == 'power macintosh':
        cpu = 'ppc'
      return cpu
    if var == "HOME":
      return pwd.getpwuid(os.geteuid())[5]
    if var == "HOST":
      hostname = self['HOSTNAME']
      if '.' in hostname:
        host, hostdomain = hostname.split('.', 1)
      else:
        host = hostname
      return host
    if var == "HOSTDOMAIN":
      hostname = self['HOSTNAME']
      if '.' in hostname:
        host, hostdomain = hostname.split('.',1)
        return hostdomain
      raise ValueError("%s: no '.' in $HOSTNAME: %s" % (var, hostname))
    if var == "HOSTNAME":
      val=os.popen('exec hostname').read()
      if val.endswith('\n'):
        return val[:-1]
      raise ValueError("%s: no result from 'hostname' command" % (var,))
    if var == "OS":
      opsys = os.uname()[0].lower()
      if opsys == "sunos":
        opsys = 'solaris'
      return opsys
    if var == "USER":
      return pwd.getpwuid(os.geteuid())[0]
    if var == "PYTHON_VV":
      return "%s.%s" % sys.version_info[:2]
    if var == "VENDOR":
      if os.path.isfile('/etc/fedora-release'):
        return 'fedora'
      if os.path.isfile('/etc/redhat-release'):
        return 'redhat'
      if os.path.isfile('/etc/gentoo-release'):
        return 'gentoo'
      if os.path.isfile('/etc/debian_version'):
        return 'debian'
      if os.path.isfile('/etc/system-release'):
        return open('/etc/system-release').read().split()[0]
      opsys = self['OS']
      if opsys == "darwin":
        return "apple"
      if opsys == "openbsd":
        return "openbsd"
      if opsys == "freebsd":
        return "freebsd"
      raise ValueError('%s: unknown vendor for OS=%s' % (var, opsys))

  def _exts(self):
    ''' Generator yielding
          @$HOSTNAME
          @$HOST.$SYSTEMID
          @$HOST
          .$ARCH
          .$OS
        if available for use in choosing variable values.
    '''
    _defns = self._defined
    v_arch = _defns.get('ARCH')
    v_hostname = _defns.get('HOSTNAME')
    v_host = _defns.get('HOST')
    v_os = _defns.get('OS')
    v_systemid = _defns.get('SYSTEMID')
    if v_hostname:
      yield '.' + v_hostname
    if v_host:
      if v_systemid:
        yield '.' + v_host + '@' + v_systemid
      yield '.' + v_host
    if v_arch:
      yield '.' + v_arch
    if v_os:
      yield '.' + v_os
    if v_systemid:
      yield '@' + v_systemid

sys.exit(main(sys.argv))
