#!/usr/bin/python -tt
#
# Script to compute various environment parameters.
# Must be sourced, and defines the shell function setvar() as a consequence.
#	- Cameron Simpson, 18may1993
#
# Removed -n option.
# Recoded not to recurse to bypass Sys5 shell braindamage. - cameron, 30jul1993
# Recoded in Perl to bypass more shell braindamage.
# You don't source it anymore. - cameron, 07jan1994
# Added -f to force resetting variables. - cameron, 11jan1994
# Generalisation. - cameron, 02dec1998
# Python recode, syntax change, bootstrap. - cameron 23mar2008
#

from getopt import getopt, GetoptError
import os
import pwd
import sys
from sets import Set
from cs.misc import debug, cmderr

force=False     # don't reset existing variables
noAction=False  # don't exec command, recite var assignments on stdout
isset=Set()
filevars={}

def env(var):
  ''' Obtain the value of an environment variable.
      Returns None if the value cannot be determined.
  '''
  global force, isset
  if (not force or var in isset) and var in os.environ:
    return os.environ[var]
  val=filevar(var)
  if val is None:
    val=bootvar(var)
  if val is not None:
    setvar(var,val)
  return val

def bootvar(var):
  ''' Compute the value of a variety of variable from scratch.
  '''
  if var == "CPU":
    cpu=os.uname()[4]
    return cpu
  if var == "HOME":
    return pwd.getpwuid(os.geteuid())[6]
  if var == "HOST":
    hostname=env("HOSTNAME")
    if '.' in hostname:
      host, hostdomain = hostname.split('.',1)
    else:
      host = hostname
    return host
  if var == "HOSTDOMAIN":
    hostname=env("HOSTNAME")
    host, hostdomain = hostname.split('.',1)
    return hostdomain
  if var == "HOSTNAME":
    import socket
    return socket.getfqdn()
  if var == "OS":
    os=os.uname()[0].lower()
    if os == "sunos":
      os='solaris'
    return os
  if var == "USER":
    return os.getpwuid(os.geteuid())[0]
  if var == "VENDOR":
    vendor=None
    if os.path.isfile('/etc/fedora-release'):
      vendor='fedora'
    elif os.path.isfile('/etc/redhat-release'):
      vendor='redhat'
    elif os.path.isfile('/etc/gentoo-release'):
      vendor='gentoo'
    else:
      os=env("OS")
      if os == "darwin":
        vendor="apple"
    return vendor
  return None

def filevarexts():
  hostname=env("HOSTNAME")
  if hostname is not None:
    yield "@%s" % hostname
  host=env("HOST")
  systemid=env("SYSTEMID")
  if host is not None:
    if systemid is not None:
      yield "@%s.%s" % (host, systemid)
    yield "@%s" % host
  if systemid is not None:
    yield "@%s" % systemid
  arch=env("ARCH")
  if arch is not None:
    yield ".%s" % arch
  yield None

doingFilevar=Set()
def filevar(var):
  if var in doingFilevar:
    return None
  doingFilevar.add(var)
  global filevars
  for ext in filevarexts():
    if ext is None:
      evar=var
    else:
      evar=var+ext
    if evar in filevars:
      doingFilevar.remove(var)
      return filevars[evar]

  doingFilevar.remove(var)
  return None

def setvar(var,val=None):
  if val is not None:
    if os.environ.get(var) != val:
      os.environ[var]=val
      isset.add(var)
    return val

  val=env(var)
  if val is None:
    debug("failed to setvar(%s)" % var)
  else:
    debug("%s=%s" % (var, val))
    os.environ[var]=val
    isset.add(var)
  return val

def paramsubst(val):
  newval=''
  while '$' in val:
    val0, val1 = val.split('$',1)
    newval+=val0
    pos=0
    while pos < len(val1) and (val1[pos].isalnum() or val1[pos] == '_'):
      pos+=1
    val=val1[pos:]
    subvar=val1[:pos]

    subval=env(subvar)
    if subval is None:
      debug("can't look up $%s" % subvar)
    else:
      newval+=subval

  newval+=val

  return newval

def loadfilevars(path):
  global filevars
  debug("load %s" % path)
  for line in open(path):
    assert line[-1:] == '\n', "%s: unexpected EOF" % path
    line=line[:-1]
    eqpos=line.find('=')
    assert eqpos > 0, "%s: bad line: %s" % (path, line)
    var, val = line.split('=', 1)
    filevars[var]=paramsubst(val)

def listfilevars():
  global filevars
  V=Set()
  debug("filevars=%s" % filevars)
  for v in filevars.keys():
    if '.' in v:
      v, v2 = v.split('.',1)
    if '@' in v:
      v, v2 = v.split('@',1)
    debug("filevar %s" % v)
    V.add(v)
  return V

opts, args = getopt(sys.argv[1:], 'fn')
debug("args=%s" % args)
for opt, val in opts:
  if opt == '-f':
    force=True
  elif opt == '-n':
    noAction=True
  else:
    cmderr("unimplemented option: %s" % opt)
    sys.exit(2)

envpath=os.environ.get('ENVPATH')
if envpath is None:
  envpath='%s/.setvarrc:/etc/setvarrc' % env('HOME')
renvpath=envpath.split(':')
renvpath.reverse()

for path in renvpath:
  if os.path.isfile(path):
    loadfilevars(path)

setvar("HOSTNAME")
setvar("SYSTEMID")

if len(args) > 0:
  for arg in args:
    setvar(arg)
else:
  for v in listfilevars():
    setvar(v)

if noAction:
  import cs.sh
  vars=list(isset)
  vars.sort()
  for var in vars:
    print "%s=%s; export %s;" % (var, cs.sh.quotestr(os.environ[var]), var)
else:
  cmderr("action mode not supported")
  sys.exit(1)
