#!/usr/bin/python -tt
#
# Read Apache log lines from stdin, annotate with UNIX time, pipe into
# sort and de-annotate.
#       - Cameron Simpson <cs@zip.com.au> 30aug2007
#

import os
import sys
from datetime import datetime, timedelta
from cs.logutils import cmd

usage="Usage: %s [logfiles...]\n" % cmd

sys.stdout=os.popen("sort -n | sed 's/^[^ ]* //'","w")

def recite(fp):
  for line in fp:
    dt=aptime(line)
    sys.stdout.write(dt.strftime("%s"))
    sys.stdout.write(" ")
    sys.stdout.write(line)

zones={}
def aptime(logline):
  humantime, tzinfo = logline.split(' ')[3:5]

  assert len(humantime) == 21 and humantime.startswith('['), \
        "bad human time (%s) in log line: %s" % (humantime, logline)
  dt=datetime.strptime(humantime, "[%d/%b/%Y:%H:%M:%S")

  global zones
  if tzinfo not in zones:
    assert len(tzinfo) == 6 \
           and tzinfo[0] in '+-' \
           and tzinfo[1:5].isdigit() \
           and tzinfo.endswith(']'), \
          "bad timezone offset (%s) in log line: %s" % (humantime, logline)
    tzoff=(int(tzinfo[1:3])*60+int(tzinfo[3:5]))*60
    if tzinfo[0] == '+':
      tzoff = -tzoff
    zones[tzinfo]=timedelta(0,tzoff)

  tzoff=zones[tzinfo]
  dt += tzoff

  ##print "%s %s => %s" % (humantime, tzinfo, dt.isoformat())

  return dt

if len(sys.argv) < 2:
  recite(sys.stdin)
else:
  for logfile in sys.argv[1:]:
    recite(open(logfile))
