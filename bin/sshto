#!/bin/sh -u
#
# Bang style ssh for hopping through firewalls etc.
# Sshes from host to host to reach destination.
# Assorted other minor features.
#       - Cameron Simpson <cs@cskk.id.au> 28may2004
#

set -ue

: "${OPTCSS:=/opt/css}"
: "${SSHTO_OPTCSS:=$OPTCSS}"
: "${SSHTO_OPTS:=}"
: "${SSHTO_CONFIG:=$HOME/.sshtorc}"
: "${SSHTO_PREFIX:=}"
: "${SSHTO_RUSER:=}"

oldstyle=
cf=$SSHTO_CONFIG
ruser=$SSHTO_RUSER
needoptcss=
dotrace=
trace=${DEBUG:+set-x}
pfxstderr=
sshopts=        # options for each ssh invocation
lsshopts=       # options for the outermost ssh invocation
                # this will include $sshopts
sshcfg=$HOME/.ssh/config
topt=
fopt=
presh=
setx=:

cmd=`basename "$0"` || cmd=$0
usage="Usage: $cmd [-u dfltuser] [ssh-options...] [sshcfg=value...] [user@]host[![user2@]host2...] [command ...]
  ssh-options...  Passed to all ssh commands.
  sshcfg=value    Transmuted to -o 'sshcfg value' and added to ssh-options.
  -E              Run Bourne shell login setup at far end (/etc/profile, ~/.profile).
  -u dfltuser     Default user for each step, default from \$SSHTO_RUSER.
  -P              Prefix standard error output with hostname for debugging.
  -v              Verbose. Passed to all ssh commands. Turns on additional tracing.
  -V              Verboser, using /opt/css at far end, trace remote shell command.
  -z, +z          Pass -o Compression yes/no to ssh."

env_presh=': set -vx
           exec 3<&0 4>&1 </dev/null >&2
           : "${SHELL:=/bin/sh}"
           [ -s /etc/profile ] && . /etc/profile
           [ -s "$HOME/.profile" ] && . "$HOME/.profile"
           tput colors >/dev/null 2>&1 || { TERM=xterm-color; export TERM; }
           ##[ -s /opt/css/env.sh ] && . /opt/css/env.sh
           exec <&3 3<&- >&4 4>&-
          '

set -- $SSHTO_OPTS ${1+"$@"}

badopts=

host=
loginpart=
havehost=
first=1
while [ $# -gt 0 ]
do
  case $1 in
    -t) topt=-t ;;
    +t) topt= ;;
    -f) fopt=-f ;;
    -E) presh=$env_presh ;;
    -V) needoptcss=1
        dotrace=1
        trace=set-x
        setx='set -x'
        sshopts="$sshopts $1"
        ;;
    # rsync hands us this all on its own :-(
    -l) loginpart=$2; shift ;;
    # default explicit remote user for use, for example:
    # RSYNC_RSH='sshto -u fred'
    # to make x!joe@y!z into fred@x!joe@y!fred@z
    -u) ruser=$2; shift ;;
    -F) sshcfg=$2; shift ;;
    -v) lsshopts="$lsshopts $1" ;;
    -[ilo]) lsshopts="$lsshopts $1 "`shqstr "$2"`
        shift
        ##echo "lsshopts=[$lsshopts]" >&2
        ;;
    -[aAgknNqsTxXYC1246])
        sshopts="$sshopts $1"
        ;;
    -[bceImpLRD])
        sshopts="$sshopts $1 "`shqstr "$2"`
        shift
        ;;
    -[bceiIlmopLRD]?*)
        sshopts=$sshopts\ `shqstr "$1"`
        ;;
    -P) needoptcss=1 pfxstderr=1 ;;
    -z) sshopts="$sshopts -o 'Compression yes'" ;;
    +z) sshopts="$sshopts -o 'Compression no'" ;;
    [a-zA-Z]*=?*)
        [ $havehost ] && break  # not supported after host - it's the shell command now
        cfg=`expr "$1" : '\([^=]*\)=.*'`
        val=`expr "$1" : '[^=]*=\(.*\)'`
        sshopts="$sshopts -o "`shqstr "$cfg $val"`
        ;;
    --) shift; break ;;
    -?*)echo "$cmd: unrecognised option: $1" >&2; badopts=1 ;;
    *)  [ $havehost ] && break
        host=$1; havehost=1
        ;;
  esac
  shift
done

if [ -z "$havehost" ]
then
  if [ $# = 0 ]
  then
    echo "$cmd: missing host" >&2
    badopts=1
  else
    host=$1; shift
    [ -n "$host" ] || { echo "$cmd: host may not be empty" >&2; badopts=1; }
  fi
fi

# Workaround for rsync mangling my u1@h1!u2@h2 invocation.
# Rsync cuts x@y arbitrarily and makes it into "-l x y",
# which we now put back together.
if [ -n "$loginpart" ]
then
  host=$loginpart@$host
fi

[ $badopts ] && { echo "$usage" >&2; exit 2; }

[ -s "$sshcfg" -a -r "$sshcfg" ] && lsshopts="-F "`shqstr "$sshcfg"`" $lsshopts"

[ -t 0 -a -t 1 ] && topt=-t

[ $# = 0 ] && set -- '[ -n "$SHELL" -a -x "$SHELL" ] || SHELL=/bin/sh; exec "$SHELL"'

sshargv="$sshopts $topt"
sshcmd=$presh$*

expand_host()
{ _xph_host=$1
  # pull off the login for reuse at the final component
  _xph_loginpfx=
  case "$_xph_host" in
    *@*)
      _xph_loginpfx=`expr "x$_xph_host" : 'x\(.*\)@.*'`
      _xph_host=`    expr "x$_xph_host" : 'x.*@\(.*\)'`
  esac
  if [ -f "$cf" -a -s "$cf" ]
  then
    _xph_changed=
    _xph_seenhost=
    while read _xph_nick _xph_fullhost _xph_junk <&3
    do
      case "$_xph_nick" in
        '' | \#* )
          ;;
        "$_xph_host" )
          case " $_xph_seenhost " in
            *" $_xph_host "*)
              echo "$cmd: expand_host: recursive mapping for \"$_xph_host\" in $cf" >&2
              break
              ;;
          esac
          _xph_seenhost="$_xph_seenhost _xph_host"
          _xph_host=$_xph_fullhost
          _xph_changed=1
          break
          ;;
      esac
    done 3<"$cf"
  fi
  # restore the login if any
  if [ -n "$_xph_loginpfx" ]
  then
    case "$_xph_host" in
      *\!*)
        _xph_left=` expr "x$_xph_host" : 'x\(.*\)!.*'`
        _xph_right=`expr "x$_xph_host" : 'x.*!\(.*\)'`
        case "$_xph_right" in
          *@*)  _xph_right=`expr 'x$_xph_right' : 'x.*@\(.*\)'` ;;
        esac
        _xph_host=$_xph_left!$_xph_loginpfx@$_xph_right
        ;;
      *)
        _xph_host=$_xph_loginpfx@$_xph_host
        ;;
    esac
  fi
  printf '%s\n' "$_xph_host"
}

expand_hostpath()
{ _xphp_out=
  _xphp_sep=
  for _xphp_host in `printf '%s\n' "$1" | tr '!' ' '`
  do
    _xphp_out=$_xphp_out$_xphp_sep`expand_host "$_xphp_host"`
    _xphp_sep='!'
  done
  printf '%s\n' "$_xphp_out"
}

hostpath=`expand_hostpath "$host"`
[ -n "$hostpath" ] || { echo "$cmd: empty hostpath from \$host=\"$host"\" >&2; exit 1; }
[ -z "$SSHTO_PREFIX" ] || hostpath="$SSHTO_PREFIX!$hostpath"
if [ $oldstyle ]
then
  host=$hostpath
  while :
  do
    case "$host" in
      *!*)
        rhost=`expr "x$host" : 'x.*!\(.*\)'`
        host=` expr "x$host" : 'x\(.*\)!.*'`
        if [ -n "$ruser" ]
        then
          case "$rhost" in
            # explicitly omit $ruser at an interim step
            @*)   rhost=`expr "x$rhost" : 'x.\(.*\)'` ;;
            *@*)  ;;
            *)    rhost=$ruser@$rhost ;;
          esac
        fi
        osshcmd=$sshcmd
        sshcmd="ssh $sshargv "`shqstr "$rhost" "$sshcmd"`
        ;;
      *)
        break
        ;;
    esac
  done
else
  set -- $( sshto-proxy-command "$hostpath" )
  host=$1
  shift
  if [ $# -gt 0 ]
  then
    # quote the ProxyCommand for use in $lsshopts
    qpc=`shqstr "ProxyCommand ignhup $*"`
    lsshopts="$lsshopts -o $qpc -o StrictHostKeyChecking=no"
  fi
fi

eval "exec $trace ssh $fopt $lsshopts $sshargv $host \"\$sshcmd\""
