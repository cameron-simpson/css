#!/bin/sh
#
# Generate a status report of similar form to sysctl output.
# Very useful for readability/diffing/parsing.
#       - Cameron Simpson <cs@cskk.id.au> 26dec2012
#

set -ue

cmd=`basename "$0"`
usage="Usage:
  $cmd [-/ sep] [--] prefix command [args...]
  $cmd [-/ sep] -F config [--] prefix [clausenames...]

  sep   Regular expression separating field name from value.
  config A .ini file with clauses such as:
          [sysctl]
          command = sysctl -a
          sep = : "

dflt_sep_re='[ \t][ \t]*'

trace=${DEBUG:+set-x}
sep_re=$dflt_sep_re
config=

badopts=

while [ $# -gt 0 ]
do
  case "$1" in
    -/) sep_re=$2; shift ;;
    -/*)sep_re=`expr "x$1" : 'x-/\(.*\)'` ;;
    -F) config=$2; shift ;;
    --) shift; break ;;
    -?*)echo "$cmd: unrecognised option: $1" >&2
        badopts=1
        ;;
    *)  break ;;
  esac
  shift
done

if [ $# = 0 ]
then
  echo "$cmd: missing prefix" >&2
  badopts=1
else
  prefix=$1
  shift
fi

if [ -n "$config" ]
then
  if [ ! -s "$config" ]
  then
    echo "$cmd: missing config file: $config" >&2
    badopts=1
  else
    if [ $# = 0 ]
    then
      set -- `sed -n 's/^\[\([^]]*\)].*/\1/p' "$config" | sort -u`
      if [ $# = 0 ]
      then
        echo "$cmd: no clausenames an no cluased in config file: $config" >&2
        badopts=1
      fi
    fi
  fi
else
  if [ $# = 0 ]
  then
    echo "$cmd: missing command" >&2
    badopts=1
  fi
fi

[ $badopts ] && { echo "$usage" >&2; exit 2; }

if [ -z "$config" ]
then
  # no config run; run raw command
  $trace "$@" \
  | sed -n "s$sep_re\\(.*\\)=\\1p" \
  | sed "s^$prefix." \
  | sort
else
  # config file - run specific clauses
  xit=0
  for clausename
  do
    cfg_command=
    cfg_sep=$dflt_sep_re
    eval `winclausevars "$config" "$clausename" cfg`
    $trace "$0" -/ "$cfg_sep" -- "$prefix" $cfg_command || xit=1
  done
  exit $xit
fi
