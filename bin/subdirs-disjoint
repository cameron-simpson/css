#!/usr/bin/python -tt
#
# Report a minimal set of distinct spanning subdirectories including the
# specified subdirectories.
#       - Cameron Simpson <cs@cskk.id.au>
#

import sys
import os.path
from cs.logutils import setup_logging, error

cmd = os.path.basename(sys.argv[0])
usage="Usage: "+cmd+" topdir [subpaths...]\n"
setup_logging(cmd)

badopts=False

if len(sys.argv) < 2:
  error("missing topdir")
  badopts=True
else:
  topdir=sys.argv[1]
  subpaths=sys.argv[2:]

if badopts:
  sys.stderr.write(usage)
  sys.exit(2)

def pathnodelen(path):
  return len(path.split('/'))
def bypathnodelen(a,b):
  return pathnodelen(a) - pathnodelen(b)

subpaths.sort(bypathnodelen)

dirs={}
dirs[topdir]=True

def splitdir(dir,topdir):
  global dirs

  try:
    dirents=os.listdir(dir)
  except OSError, e:
    error("listdir(%s): %s", dir, e)
    return

  dirents.sort()

  if dir != topdir:
    up=os.path.dirname(dir)
    if len(up):
      splitdir(up,topdir)

  dirs[dir]=False
  for peer in dirents:
    peerpath=os.path.join(dir,peer)
    if peerpath not in dirs:
      dirs[peerpath]=True

while len(subpaths) > 0:
  subpath=subpaths.pop(0)
  dir=os.path.join(topdir,subpath)
  splitdir(os.path.dirname(dir),topdir)

paths=dirs.keys()
paths.sort()
for path in paths:
  if dirs[path]:
    print path
