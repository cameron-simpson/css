#!/usr/bin/python
#
# Resolve pathnames to their post-symlink paths.
#   - Cameron Simpson <cs@cskk.id.au> 24mar2017
#

from __future__ import print_function
from os import lstat, sep as pathsep, readlink
from os.path import isabs as isabspath, join as joinpath, split as splitpath
from stat import S_ISLNK
import sys

USAGE = 'Usage: %s [-v] pathnames...'

def main(argv):
  cmd = argv.pop(0)
  usage = USAGE % (cmd,)
  badopts = False
  report = None
  while argv and argv[0].startswith('-'):
    if argv[0] == '-':
      break
    arg = argv.pop(0)
    if arg == '--':
      break
    if arg == '-v':
      report = verbose
    else:
      print("%s: unrecognised option: %s" % (cmd, arg), file=sys.stderr)
      badopts = True
  if not argv:
    print("%s: missing pathnames" % (cmd,), file=sys.stderr)
    badopts = True
  if badopts:
    print(usage, file=sys.stderr)
    return 2
  for path in argv:
    print(resolve(path, report=report))
  return 0

def verbose(msg, *a):
  if a:
    msg = msg % a
  print(msg)

def decompose(path):
  tails = []
  if path.endswith(pathsep):
    path2 = path.rstrip(pathsep)
    suffix = path[len(path2):]
    path = path2
  else:
    suffix = ''
  head, tail = splitpath(path)
  while tail:
    tails.append(tail)
    head, tail = splitpath(head)
  prefix = head
  parts = list(reversed(tails))
  if not prefix and not parts:
    prefix = suffix
    suffix = ''
  return prefix, parts, suffix

def resolve(path, report=None):
  if report is None:
    def report(msg, *a):
      pass
  prefix, parts, suffix = decompose(path)
  sofar = prefix
  while parts:
    sofar2 = joinpath(sofar, parts.pop(0))
    try:
      S = lstat(sofar2)
    except OSError:
      pass
    else:
      if S_ISLNK(S.st_mode):
        subpath = readlink(sofar2)
        report("%s -> %s", sofar2, subpath)
        if isabspath(subpath):
          sofar2 = resolve(subpath, report=report)
        else:
          sofar3 = joinpath(sofar, subpath)
          report("%s => %s", sofar2, sofar3)
          sofar2 = resolve(joinpath(sofar, subpath), report=report)
    sofar = sofar2
  sofar += suffix
  return sofar

if __name__ == '__main__':
  sys.exit(main(sys.argv))
