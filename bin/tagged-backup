#!/bin/sh
#
# Backup data according to tags.
# - Cameron Simpson <cs@cskk.id.au> 11jan2020
#

set -ue

tmpdir=${TMPDIR:=/tmp}

tag_name=backup
copies=a,b
backup_area=/mnt
backup_names=
do_mount=1
rsync_exclude_opts='--exclude=.AppleDouble --exclude=.DS_Store --exclude=/.Trash/ --exclude=._*'
rsync_delete_exclude_opts='--delete-excluded'
rsync_extra_opts=
quiet=
hbopts=

cmd=$( basename "$0" )
usage="Usage: $cmd [options...] src_path[:backup_subpath]...

  Backup a series of directories to multiple backup areas, usually
  mountable external drives. The files to back up are identified
  by tags to support backing up directory trees which exceed the
  size of the backup drives.

  Options:
    --backup-area=/path     Path to backup area, default: $backup_area
    --backup-names=name,... Backup names to run, default collated
                            from the fstags for the tag name.
                            (The default tag name is \"$tag_name\".)
    --copies=sfx1,sfx2,...  Copy suffixes, default: $copies
    --exclude=pattern       Additional rsync --exclude option.
    --no-mount              Do not mount the backup path, expect
                            it to be already present.
    --progress              Passed to rsync via histbackup.
    --tag-name=tagname      Tag name, default: $tag_name
    -q                      Quiet.
    -x                      Trace execution.

  The defaults use the backup tag \"$tag_name\", makes backup copies
  for each of \"$copies\", and uses the backup area $backup_area.
  My media archive presently has tag values \"archive1\" and
  \"archive2\".

  So when it backs up /export/video its process is to mount each
  of /mnt/archive1a, /mnt/archive1b, /mnt/archive2a and /mnt/archive2b
  and runs a histbackup from /exports/video to /mnt/archive1a/video,
  /mnt/archive1b/video and so forth.  By having matching entries
  for the mount in /etc/fstab with the \"user\" option associated
  with the filesystem labels of the removeable backup drives this
  works fairly seamlessly.
"

trace=
[ -t 2 ] && {
  ##trace=set-x
  rsync_extra_opts="$rsync_extra_opts --progress"
}

badopts=

while [ $# -gt 0 ]
do
  case "$1" in
    --backup-area=?*)
        backup_area=$( expr "x$1" : 'x--backup-area=\(.*\)' ) ;;
    --backup-names=?*)
        backup_names=$( expr "x$1" : 'x--backup-names=\(.*\)' ) ;;
    --copies=?*)
        copies=$( expr "x$1" : 'x--copies=\(.*\)' ) ;;
    --exclude=?*)
        rsync_exclude_opts="$rsync_exclude_opts $1" ;;
    --no-mount)
        do_mount= ;;
    --progress)
        rsync_extra_opts="$rsync_extra_opts $1" ;;
    --tag-name=?*)
        tag_name=$( expr "x$1" : 'x--tag-name=\(.*\)' ) ;;
    -q) quiet=1 ;;
    -x) trace=set-x ;;
    --) shift; break ;;
    -?*)echo "$cmd: unrecognised option: $1" >&2
        badopts=1
        ;;
    *)  break ;;
  esac
  shift
done

if [ $quiet ]
then  vecho=:
else  vecho=echo hbopts="$hbopts -i"
fi

[ -d "$backup_area/" ] || {
  echo "$cmd: missing backup area: $backup_area" >&2
  badopts=1
}
[ -n "$copies" ] || {
  echo "$cmd: no copies?" >&2
  badopts=1
}

[ $# -gt 0 ] || {
  echo "$cmd: missing src_paths" >&2
  badopts=1
}

[ $badopts ] && { echo "$usage" >&2; exit 2; }

xit=0

tmpf=$tmpdir/$cmd.$$
trap 'rm -f "$tmpf"' 0 1 3 15

for src_dst
do
  $vecho "backup $src_dst"
  case "$src_dst" in
    *:?*)   subpath=$( expr "x$src_dst" : 'x.*:\(..*\)' )
            src_path=$(     expr "x$src_dst" : 'x\(.*\):..*' )
            ;;
    *)      subpath=$( basename "$src_dst" )
            src_path=$src_dst
            ;;
  esac
  [ -d "$src_path/" ] || {
    echo "$cmd: $src_dst: missing source directory: $src_path" >&2
    xit=1
    continue
  }
  $vecho "scan $src_path for ${tag_name}= tags"
  src_backup_names=$backup_names
  [ -n "$src_backup_names" ] || src_backup_names=$(
    $trace fstags find -o "{$tag_name}" "$src_path" "$tag_name" | grep . | sort -u
  )
  [ -n "$src_backup_names" ] || {
    echo "$cmd: $src_dst: no $tag_name tags in $src_path, skipping ALL BACKUPS" >&2
    xit=1
    continue
  }
  # shellcheck disable=SC2086
  $vecho "$src_path: $tag_name tags =" $src_backup_names
  not_archive_tags=
  for backup_name in $( printf '%s\n' "$src_backup_names" | tr , ' ' )
  do
    archive_tag=$tag_name=$backup_name
    not_archive_tags="$not_archive_tags -$archive_tag"
    for copy in $( printf '%s\n' "$copies" | tr , ' ' )
    do
      backup_tree=$backup_area/$backup_name$copy
      backup_path=$backup_tree/$subpath
      $vecho "$src_path: backup to $backup_path for $tag_name=$backup_name"
      if [ $do_mount ]
      then
        $trace mount "$backup_tree" || {
          echo "$cmd: $src_dst: mount fails for $backup_tree, skipping" >&2
          continue
        }
        df -h "$backup_tree" | tail -1
      fi
      if [ -d "$backup_path/" ]
      then
        { { echo + .fstags
            $trace fstags find --for-rsync "$src_path" "$archive_tag"
          } >"$tmpf" \
          && $trace histbackup $hbopts --copy-times \
               -- "$src_path" "$backup_path" \
               "--include-from=$tmpf" \
               -O $rsync_exclude_opts $rsync_delete_exclude_opts \
               $rsync_extra_opts
        } || xit=1
        [ $quiet ] || {
          du -sh "$backup_path/LATEST/" \
          | awk -v "src_path=$src_path" '{ print(src_path ":", $2, $1) }'
        }
      else
        echo "$cmd: $src_dst: missing backup path: $backup_path, skipping" >&2
      fi
      if [ $do_mount ]
      then
        df -h "$backup_tree" | tail -1
        $trace umount "$backup_tree" || xit=1
      fi
    done
  done
  skipped_bytes=$( fstags find -o '{filesize}' "$src_path" $not_archive_tags | colsum 1 )
  [ "$skipped_bytes" = 0 ] || {
    echo "$cmd: $src_dst: $skipped_bytes bytes NOT ARCHIVED" >&2
    xit=1
    [ $quiet ] || {
      ( cd "$src_path"
        echo "unbacked up series/seasons:"
        fstags find . -backup \
        | egrep '/(series|season)' \
        | sed 's|/[^/]*$||' \
        | sort -u \
        | xxargs du -sh \
        | sort -h
        echo "unbacked up nonseries:"
        fstags find . -backup \
        | egrep -v '/(series|season)' \
        | sort \
        | xxargs du -sh \
        | sort -h
      )
    }
  }
done

exit $xit
