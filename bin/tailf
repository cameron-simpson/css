#!/usr/bin/perl
#
# Multifile tail -f.	- Cameron Simpson <cs@cskk.id.au>
#
# Recode. - cameron 13feb2002
#

use strict qw(vars);

require 'flush.pl';
## use cs::Upd;
use cs::Source;
use Getopt::Std;

$::PollInterval=1;	## was 10
$::CtrlFile=$ENV{TAILF};
$::CtrlFile="$ENV{HOME}/.tailf" if ! length $::CtrlFile;

($::cmd=$0) =~ s:.*/::;
$::Usage="Usage: $::cmd [-i poll] [-c control_file] [files...]
	-i poll		Set polling interval (default: $::PollInterval).
	-c control_file	Set control file.
";

{ my $badopts=0;
  getopts('i:c:') || ($badopts=1);
  $::PollInterval=$::opt_i+0 if defined $::opt_i;
  $::CtrlFile=$::opt_c if defined $::opt_c;
  die $::Usage if $badopts;
}

my @src = ();

ATTACH:
for (@ARGV)
{ my $s = (new cs::Source TAIL, $_);
  if (! defined $s)
  { warn "$::cmd: can't open $_: $!\n";
  }
  else
  { push(@src,$s);
  }
}

die "$::cmd: nothing to monitor\n" if ! @src;

while (1)
{ my $busy = 0;

  for my $s (@src)
  {
    DATUM:
    while (defined ($_=$s->GetLine()) && length)
    {
      $busy=1;
      print;
    }
  }

  flush(STDOUT);
  sleep($busy ? 1 : $::PollInterval);
}

exit 0;
