#!/bin/sh
#
# Tmux convenience script, performing common higher level tasks.
# Falls back to using screen if no tmux in some circumstances,
# primarily when accessing remote sessions.
#   - Cameron Simpson <cs@cskk.id.au> 30oct2014
#

set -ue

: ${TMUX:=''}
: ${DEBUG:=''}
: ${OS:=`uname -s | tr '[A-Z]' '[a-z]'`}
: ${TMUX_TMPDIR:=''}

setup_env='
    [ -n "$TMPDIR" -a -d "$TMPDIR" ] || [ ! -d "$HOME/tmp" ] || TMPDIR=$HOME/tmp
    [ -n "$TMUX_TMPDIR" -a -d "$TMUX_TMPDIR" ] || \
    if [ -d "$HOME/var/tmux" ]
    then  TMUX_TMPDIR=$HOME/var/tmux
    else  TMUX_TMPDIR=$TMPDIR/tmux-`id -u`
    fi
    export TMPDIR TMUX_TMPDIR'

eval "$setup_env"

trace=
setx=:
host=${HOST:-`hostname -s`}
##[ -t 2 ] && set -- -x ${1+"$@"}
[ $DEBUG ] && set -- -x ${1+"$@"}
xopt=
tmux_version=$(tmux -V 2>/dev/null | sed "s/^tmux //")
tmrc=$HOME/.tmrc

cmd=$(basename "$0")
usage="Usage: $cmd [options...] [op [args...]]
  Options:
    -h host   Specify the host used for matching.
              Default is the current host from \$HOST or \`hostname -s\`: $host
    -x        Trace command execution.
  With no operation, list current sessions.

  \$HOME/.tmrc format:
    # comments
    LABEL [@host,...] shell command

  Operations:
    number
      Join the session numbered \"number\".
      Shorthand for \"use-session number\".
    UPPERCASE_NAME [-d] [-K keyline]... {-c shcmd | [command [args...]]}
      Shorthand for \"use-session UPPERCASE_NAME\". Includes names starting
      with an underscore.
    =new-session-name
      Rename the current session name to \"new-session-name\".
      To be used within a tmux session; relies on \$TMUX_PANE.
    number=new-session-name
    UPPERCASE_NAME=new-session-name
      Rename the specified session to \"new-session-name\".
    down
      Short for \"tmux select-pane -D\".
    left
      Short for \"tmux select-pane -L\".
    ls | list-sessions [-n] [tmux-list-sessions-options...]
      List sessions. Default if no op supplied.
    pick-new-prefix-session prefix
      Allocate a new session name starting with \"prefix\".
    pick-new-prefix-session-remote prefix remote-host
      Allocate a new session name starting with \"prefix\" on the remote host
      \"remote-host\".
    rc [-a] [-h host]
      List the \$HOME/.tmrc config.
      -a  All: also list lines not matching this host ($host).
    recite-function-remote
      Print the shell function definition for the \"tm_remote\"
      convenience function, normally aliased as \"@\".
    rename old-session-name new-session-name
      Rename the specified session \"old-session-name\" to
      \"new-session-name\".
    right
      Short for \"tmux select-pane -R\".
    start [session-names...]
      Start the named sessions using the configuration from \$HOME/.tmrc.
      If no session-names are supplied, start everything named in the .tmrc.
      These sessions are started from the \$HOME directory.
    up
      Short for \"tmux select-pane -U\".
    use-session session-name [tmux-new-session-options...]
      Join the session named \"session-name\", creating it if necessary.
      If the session does not exist:
        a) run the supplied command if specified, otherwise \$SHELL.
        b) pass each keyline with a trailing carriage return.
      If -d (detached) is supplied, do not attach to the session.
    use-session-remote session-name remote-host
      Join the session named \"session-name\" on the remote host
      \"remote-host\", creating it if necessary."

# Test if this system has tmux; did we get a version earlier?
have_tmux(){
  [ -n "$tmux_version" ] || which tmux >/dev/null 2>&1
}

do_tmux(){
  $trace tmux ${1+"$@"}
}

# Strip prefix from incoming strings, compute max of remaining numbers, add 1.
next_suffix(){
  _ns_prefix=$1
  _ns_max=$(
    ( sed -n "s/^$_ns_prefix\\([1-9][0-9]*\\)$/\\1/p"
      echo 0
    ) \
    | sort -nru \
    | sed 1q
  )
  echo $((_ns_max+1))
}

badopts=

while [ $# -gt 0 ]
do
  case $1 in
    -h) host=$2; shift ;;
    -x) trace=set-x xopt=-x setx='set -x' ;;
    --) shift; break ;;
    -?*)echo "$cmd: unrecognised option: $1" >&2; badopts=1 ;;
    *)  break ;;
  esac
  shift
done

[ $# -gt 0 ] || set -- list-sessions -n

op=$1
shift
case "$op" in
  =?*)
    if [ $# -gt 0 ]
    then
      echo "$cmd: $op: extra arguments: $*" >&2
      badopts=1
    else
      session_name=$TMUX_PANE
      session_name_new=$( expr "x$op" : 'x=\(.*\)' )
      op=rename
    fi
    ;;
  [1-9_A-Z]*=?*)
    if [ $# -gt 0 ]
    then
      echo "$cmd: $op: extra arguments: $*" >&2
      badopts=1
    else
      session_name=$( expr "x$op" : 'x\([^=]*\)=.*' )
      session_name_new=$( expr "x$op" : 'x[^=]*=\(.*\)' )
      op=rename
    fi
    ;;
  [1-9_A-Z]*)
    session_name=$op
    op=use-session
    ;;
  up | down | left |right )
    if [ $# -gt 0 ]
    then
      echo "$cmd: $op: extra arguments: $*" >&2
      badopts=1
    fi
    ;;
  ls | list-sessions)
    ;;
  pick-new-prefix-session)
    if [ $# = 0 ]
    then
      echo "$cmd: $op: missing prefix" >&2
      badopts=1
    else
      session_prefix=$1
      shift
      case "$session_prefix" in
        *[/*\\\[]*)
          echo "$cmd: $op: invalid session prefix: $session_prefix" >&2
          badopts=1
          ;;
      esac
    fi
    if [ $# -gt 0 ]
    then
      echo "$cmd: $op: extra arguments after prefix: $*" >&2
      badopts=1
    fi
    ;;
  rc)
    rc_all=
    [ $# = 0 ] || { [ "x$1" = x-a ] && { rc_all=1; shift; }; }
    [ $# = 0 ] || {
      echo "$cmd: $op: extra arguments: $*" >&2
      badopts=1
    }
    ;;
  pick-new-prefix-session-remote)
    if [ $# = 0 ]
    then
      echo "$cmd: $op: missing prefix" >&2
      badopts=1
    else
      session_prefix=$1
      shift
      case "$session_prefix" in
        *[/*\\\[]*)
          echo "$cmd: $op: invalid session prefix: $session_prefix" >&2
          badopts=1
          ;;
      esac
    fi
    if [ $# = 0 ]
    then
      echo "$cmd: $op: missing remote-host" >&2
      badopts=1
    else
      remote_host=$1
      shift
    fi
    if [ $# -gt 0 ]
    then
      echo "$cmd: $op: extra arguments after remote-host: $*" >&2
      badopts=1
    fi
    ;;
  recite-function-remote)
    if [ $# -gt 0 ]
    then
      echo "$cmd: $op: extra arguments: $*" >&2
      badopts=1
    fi
    ;;
  rename)
    if [ $# = 0 ]
    then
      echo "$cmd: $op: missing session-name" >&2
      badopts=1
    else
      session_name=$1
      shift
    fi
    if [ $# = 0 ]
    then
      echo "$cmd: $op: missing new-session-name" >&2
      badopts=1
    else
      session_name_new=$2
      shift
    fi
    if [ $# -gt 0 ]
    then
      echo "$cmd: $op: extra arguments: $*" >&2
      badopts=1
    fi
    ;;
  start)
    ;;
  use-session)
    if [ $# = 0 ]
    then
      echo "$cmd: $op: missing session-name" >&2
      badopts=1
    else
      session_name=$1
      shift
    fi
    ;;
  use-session-remote)
    if [ $# = 0 ]
    then
      echo "$cmd: $op: missing session-name" >&2
      badopts=1
    else
      session_name=$1
      shift
    fi
    if [ $# = 0 ]
    then
      echo "$cmd: $op: missing remote-host" >&2
      badopts=1
    else
      remote_host=$1
      shift
    fi
    if [ $# -gt 0 ]
    then
      echo "$cmd: $op: extra arguments: $*" >&2
      badopts=1
    fi
    ;;
  *)echo "$cmd: unrecognised op: $op" >&2
    badopts=1
    ;;
esac

[ $badopts ] && { echo "$usage" >&2; exit 2; }

[ -d "$TMUX_TMPDIR/." ] || set-x mkdir -p "$TMUX_TMPDIR"

rcmd(){
  _rcmd_rhost=$1; shift
  case "$_rcmd_rhost" in
    *\!*)   _rcmd_ssh=sshto ;;
    *)      _rcmd_ssh=ssh ;;
  esac
  $trace $_rcmd_ssh -t "$_rcmd_rhost" "
    $setx
    $setup_env
    PATH=\$HOME/bin-local:\$HOME/bin:\$PATH:/usr/local/bin:/opt/local/bin
    export PATH
    $*"
}

# print "LABEL shcmd" to standard output
# omit lines qualified by @host,... if the host does not match
tmrc(){
  [ $# -le 1 ] || { echo "$cmd: usage: tmrc [tmrcfile]" >&2; exit 2; }
  (
    set -ue
    rcfile=$tmrc
    [ $# = 0 ] || { rcfile=$1; shift; }
    exec <"$rcfile"
    lineno=0
    while read -r label shcmd
    do
      lineno=$(( lineno + 1 ))
      case "$label" in
        [A-Z]*)
          # valid label, check for @host,...
          case "$shcmd" in
            @[a-z]*)
              if hosts=$( expr "$shcmd" : '@\([a-z][-a-z0-9,]*\)  *.*' )
              then
                shcmd=$(  expr "$shcmd" : '@[a-z][-a-z0-9,]*  *\(.*\)' )
              else
                echo "$cmd: $rcfile:$lineno: bad @hosts part" >&2
                continue
              fi
              case ",$hosts," in
                *,$host,*)
                  ;;
                *)[ $rc_all ] || continue
                  ;;
              esac
              ;;
          esac
          ;;
        *)continue
          ;;
      esac
      echo "$label" "$shcmd"
    done
  )
}

case "$op" in
  up)    do_tmux select-pane -U ;;
  down)  do_tmux select-pane -D ;;
  left)  do_tmux select-pane -L ;;
  right) do_tmux select-pane -R ;;
  ls | list-sessions)
    # no tmux? use scr
    have_tmux || exec $trace scr
    do_tmux start-server
    if [ "x$1" = x-n ]
    then
      shift
      do_tmux list-sessions ${1+"$@"} \
      | awk '{ printf("%3d %s\n", NR, $0); }'
    else
      do_tmux list-sessions ${1+"$@"}
    fi
    ;;
  pick-new-prefix-session)
    do_tmux start-server
    echo "$session_prefix"$(do_tmux list-sessions | sed 's/:.*//' | next_suffix "$session_prefix")
    ;;
  pick-new-prefix-session-remote)
    # choose a new remote session name
    # using tmux by choice, screen otherwise
    session_name=$session_prefix$( rcmd "$remote_host" 'if [ -n "$tmux_version" ]; then $tmux start-server; $tmux list-sessions | sed '\''s/:.*//'\''; else screen -ls | sed -n '\''s/^\t[1-9][0-9]*\.\([^\t]*\)\t.*/\1/p'\''; fi' | tr -d '\015' | next_suffix "$session_prefix" )
    echo "$session_name"
    ;;
  rc)
    tmrc
    ;;
  recite-function-remote)
    # recite a shell function for accessing remote sessions,
    # typically aliased to "@"
    echo '
        # Usage: tm_remote [host[:session_name]]
        tm_remote(){
          : ${_tm_host:=}
          : ${_tm_session:=}
          _tm_src_prefix=_${USER}@${host}__
          # no host[:session]? reconnect to the previously used host:session
          if [ $# = 0 ]
          then
            if [ -z "$_tm_host" -o -z "$_tm_session" ]
            then
              echo "$0: no current default remote session" >&2
              return 2
            fi
            set -- "$_tm_host:$_tm_session"
          fi
          _tm_host_session=$1; shift
          # parse [user@]host:session ==> [user@host] session
          case "$_tm_host_session" in
            *:*)
              _tm_host=${_tm_host_session%%:*}
              _tm_session=${_tm_host_session#*:}
              ;;
            *)_tm_host=$_tm_host_session
              _tm_session=
              ;;
          esac
          # allocate new session name if nothing specified
          [ -n "$_tm_session" ] \
          || _tm_session=$( tm pick-new-prefix-session-remote "$_tm_src_prefix" "$_tm_host" ) \
          || return 1
          $trace tm $xopt use-session-remote "$_tm_session" "$_tm_host"
    }'
    ;;
  rename)
    # rename session
    case "$session_name" in
      [1-9]*)
        session_name=$(
          "$0" list-sessions -n -F '#{session_name}' \
          | awk -v "session_number=$session_name" '$1 == session_number { print $2 }'
        )
        ;;
    esac
    if do_tmux has-session -t "$session_name"
    then
      do_tmux rename-session -t "$session_name" "$session_name_new"
    else
      echo "$cmd: $op: no such session: $session_name" >&2
      exit 1
    fi
    ;;
  start)
    # start initial screen sessions; just the named ones of names specified
    # obtains definitions from $HOME/.tmrc
    cd
    if [ ! -f "$tmrc" ]
    then
      echo "$cmd: $op: no tmrc: $tmrc" >&2
      exit 1
    fi
    tmrc \
    | \
    {
      xit=0
      matched=
      while read -r session_name shcmd
      do
        if [ $# -gt 0 ]
        then
          case " $* " in
            *" $session_name "*)
              ;;
            *)continue
              ;;
          esac
        fi
        matched=1
        do_tmux has-session -t "$session_name" 2>/dev/null \
        || do_tmux new-session -d -s "$session_name" "set -x; $shcmd" \
        || xit=1
      done
      [ $matched ] || {
        echo "$cmd: $op: no sessions matched" >&2
        xit=1
      }
      exit $xit
    }
    ;;
  use-session)
    # no tmux? use scr
    have_tmux || exec $trace scr "$session_name"
    do_tmux start-server
    case "$session_name" in
      [1-9]*)
        session_name=$(
          "$0" list-sessions -n -F '#{session_name}' \
          | awk -v "session_number=$session_name" '$1 == session_number { print $2 }'
        )
        ;;
    esac
    do_tmux has-session -t "$session_name" 2>/dev/null \
    || "$0" start "$session_name" 2>/dev/null \
    || {
      [ $# -gt 0 ] && {
        tm_shcmd=$( shqstr "$@" )
        set -- "exec $tm_shcmd"
      }
      do_tmux new-session -d -s "$session_name" "$@"
    }
    if [ -n "$TMUX" ]
    then do_tmux switch-client -t "$session_name"
    else do_tmux attach-session -t "$session_name"
    fi
    ;;
  use-session-remote)
    # connect to remote session, tmux by choice, screen if no tmux
    rcmd "$remote_host" '
      set -ue
      if tmux -V >/dev/null 2>&1
      then
        tmux start-server
        if tmux has-session -t '"'$session_name'"'
        then  tmux attach-session -t '"'$session_name'"'
        else  exec env tmux new-session -s '"'$session_name'"' "${SHELL:-/bin/sh}"
        fi
      else
        exec screen -x '"'$session_name'"' \
        || exec screen -S '"'$session_name'"' "${SHELL:-/bin/sh}"
      fi'
    ;;
  *)echo "$cmd: $op: unimplemented" >&2
    exit 1
    ;;
esac
