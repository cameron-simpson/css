#!/bin/sh
#
# Tmux convenience script, performing common higher level tasks.
#   - Cameron Simpson <cs@zip.com.au> 30oct2014
#

set -ue

: ${TMUX:=''}

trace=
[ -t 2 ] && trace=set-x

cmd=$(basename "$0")
usage="Usage: $cmd [options...] [op [args...]]
  UPPERCASE_NAME
    Join the session named \"UPPERCASE_NAME\", creating it if necessary.
  list-prefix-sessions prefix
    List suffices of sessions startwith with \"prefix\".
  ls | list-sessions
    List sessions. Default if no op supplied.
  pick-new-prefix-session prefix
    Allocate a new session name starting with \"prefix\".
  recite-function-@
    Print the shell function definition for the \"@\" convenience function."

badopts=

while [ $# -gt 0 ]
do
  case $1 in
    -x) trace=set-x ;;
    --) shift; break ;;
    -?*)echo "$cmd: unrecognised option: $1" >&2; badopts=1 ;;
    *)  break ;;
  esac
  shift
done

[ $# -gt 0 ] || set -- list-sessions

op=$1
shift
case "$op" in
  [A-Z]*)
    session_name=$op
    ;;
  list-prefix-sessions)
    if [ $# = 0 ]
    then
      echo "$cmd: $op: missing prefix" >&2
      badopts=1
    else
      session_prefix=$1
      shift
      case "$session_prefix" in
        *[/*\\\[]*)
          echo "$cmd: $op: invalid session prefix: $session_prefix" >&2
          badopts=1
          ;;
      esac
      if [ $# -gt 0 ]
      then
        echo "$cmd: $op: extra arguments after prefix: $*" >&2
        badopts=1
      fi
    fi
    ;;
  ls | list-sessions)
    ;;
  pick-new-prefix-session)
    if [ $# = 0 ]
    then
      echo "$cmd: $op: missing prefix" >&2
      badopts=1
    else
      session_prefix=$1
      shift
      case "$session_prefix" in
        *[/*\\\[]*)
          echo "$cmd: $op: invalid session prefix: $session_prefix" >&2
          badopts=1
          ;;
      esac
      if [ $# -gt 0 ]
      then
        echo "$cmd: $op: extra arguments after prefix: $*" >&2
        badopts=1
      fi
    fi
    ;;
  recite-function-@)
    if [ $# -gt 0 ]
    then
      echo "$cmd: $op: extra arguments: $*" >&2
      badopts=1
    fi
    ;;
  *)  echo "$cmd: unrecognised op: $op" >&2; badopts=1 ;;
esac

[ $badopts ] && { echo "$usage" >&2; exit 2; }

case "$op" in
  [A-Z]*)
    # no tmux? use scr
    which tmux 2/dev/null || exec $trace scr "$session_name"
    $trace tmux has-session -t "$session_name" || TMUX= $trace tmux new-session -d -s "$session_name"
    if [ -n "$TMUX" ]
    then  $trace tmux switch-client -t "$session_name"
    else  $trace tmux attach-session -t "$session_name"
    fi
    ;;
  list-prefix-sessions)
    which tmux 2/dev/null || exec $trace scr
    $trace tmux list-sessions -F '#{session_name}' \
    | sed -n "s/^$session_prefix//p"
    ;;
  ls | list-sessions)
    $trace tmux "$op" ${1+"$@"}
    ;;
  pick-new-prefix-session)
    curmax=$(
      ( "$0" list-prefix-sessions "$session_prefix" \
        | grep "^[1-9][0-9]*$"
        echo 0
      ) \
      | sort -nru \
      | sed 1q
    )
    newmax=$(( curmax + 1 ))
    echo "$session_prefix$newmax"
    ;;
  recite-function-@)
    echo '@(){
      
    }'
    ;;
  *)echo "$cmd: $op: unimplemented" >&2
    exit 1
    ;;
esac
