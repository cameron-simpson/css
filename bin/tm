#!/bin/sh
#
# Tmux convenience script, performing common higher level tasks.
# Falls back to using screen if no tmux in some circumstances,
# primarily when accessing remote sessions.
#   - Cameron Simpson <cs@zip.com.au> 30oct2014
#

set -ue

: ${TMUX:=''}
: ${USER:=`id -ud`}
: ${HOST:=`hostname`}
: ${DEBUG:=''}

trace=
setx=:
##[ -t 2 ] && set -- -x ${1+"$@"}
[ $DEBUG ] && set -- -x ${1+"$@"}
xopt=

cmd=$(basename "$0")
usage="Usage: $cmd [options...] [op [args...]]
  Options:
    -x  Trace command execution.
  With no operation, list current sessions.
  Operations:
    number
      Join the session numbered \"number\".
      Shorthand for \"use-session number\".
    UPPERCASE_NAME [-d] [-K keyline]... {-c shcmd | [command [args...]]}
      Shorthand for \"use-session UPPERCASE_NAME\". Includes names starting
      with an underscore.
    =new-session-name
      Rename the current session name to \"new-session-name\".
      To be used within a tmux session; relies on \$TMUX_PANE.
    number=new-session-name
    UPPERCASE_NAME=new-session-name
      Rename the specified session to \"new-session-name\".
    down
      Short for \"tmux select-pane -D\".
    left
      Short for \"tmux select-pane -L\".
    ls | list-sessions [-n] [tmux-list-sessions-options...]
      List sessions. Default if no op supplied.
    pick-new-prefix-session prefix
      Allocate a new session name starting with \"prefix\".
    pick-new-prefix-session-remote prefix remote-host
      Allocate a new session name starting with \"prefix\" on the remote host
      \"remote-host\".
    recite-function-remote
      Print the shell function definition for the \"tm_remote\"
      convenience function, normally aliased as \"@\".
    rename old-session-name new-session-name
      Rename the specified session \"old-session-name\" to
      \"new-session-name\".
    right
      Short for \"tmux select-pane -R\".
    start [session-names...]
      Start the named sessions using the configuration from \$HOME/.tmrc.
      If no session-names are supplied, start everything named in the .tmrc.
    up
      Short for \"tmux select-pane -U\".
    use-session session-name [-d] [-K keyline...] {-c shcmd | [command [args...]]}
      Join the session named \"session-name\", creating it if necessary.
      If the session does not exist:
        a) run the supplied command if specified, otherwise \$SHELL.
        b) pass each keyline with a trailing carriage return.
      If -d (detached) is supplied, to not attach to the session;
        this is used by my rig-tm script to set up my default sessions.
    use-session-remote session-name remote-host
      Join the session named \"session-name\" on the remote host
      \"remote-host\", creating it if necessary."

# Test if this system has tmux in its $PATH.
have_tmux(){
  which tmux >/dev/null 2>&1
}

# Strip prefix from incoming strings, compute max of remaining numbers, add 1.
next_suffix(){
  _ns_prefix=$1
  _ns_max=$(
    ( sed -n "s/^$_ns_prefix\\([1-9][0-9]*\\)$/\\1/p"
      echo 0
    ) \
    | sort -nru \
    | sed 1q
  )
  echo $((_ns_max+1))
}

badopts=

while [ $# -gt 0 ]
do
  case $1 in
    -x) trace=set-x xopt=-x setx='set -x' ;;
    --) shift; break ;;
    -?*)echo "$cmd: unrecognised option: $1" >&2; badopts=1 ;;
    *)  break ;;
  esac
  shift
done

[ $# -gt 0 ] || set -- list-sessions -n

op=$1
shift
case "$op" in
  =?*)
    if [ $# -gt 0 ]
    then
      echo "$cmd: $op: extra arguments: $*" >&2
      badopts=1
    else
      session_name=$TMUX_PANE
      session_name_new=$( expr "x$op" : 'x=\(.*\)' )
      op=rename
    fi
    ;;
  [1-9_A-Z]*=?*)
    if [ $# -gt 0 ]
    then
      echo "$cmd: $op: extra arguments: $*" >&2
      badopts=1
    else
      session_name=$( expr "x$op" : 'x\([^=]*\)=.*' )
      session_name_new=$( expr "x$op" : 'x[^=]*=\(.*\)' )
      op=rename
    fi
    ;;
  [1-9_A-Z]*)
    session_name=$op
    op=use-session
    ;;
  up | down | left |right )
    if [ $# -gt 0 ]
    then
      echo "$cmd: $op: extra arguments: $*" >&2
      badopts=1
    fi
    ;;
  ls | list-sessions)
    ;;
  pick-new-prefix-session)
    if [ $# = 0 ]
    then
      echo "$cmd: $op: missing prefix" >&2
      badopts=1
    else
      session_prefix=$1
      shift
      case "$session_prefix" in
        *[/*\\\[]*)
          echo "$cmd: $op: invalid session prefix: $session_prefix" >&2
          badopts=1
          ;;
      esac
    fi
    if [ $# -gt 0 ]
    then
      echo "$cmd: $op: extra arguments after prefix: $*" >&2
      badopts=1
    fi
    ;;
  pick-new-prefix-session-remote)
    if [ $# = 0 ]
    then
      echo "$cmd: $op: missing prefix" >&2
      badopts=1
    else
      session_prefix=$1
      shift
      case "$session_prefix" in
        *[/*\\\[]*)
          echo "$cmd: $op: invalid session prefix: $session_prefix" >&2
          badopts=1
          ;;
      esac
    fi
    if [ $# = 0 ]
    then
      echo "$cmd: $op: missing remote-host" >&2
      badopts=1
    else
      remote_host=$1
      shift
    fi
    if [ $# -gt 0 ]
    then
      echo "$cmd: $op: extra arguments after remote-host: $*" >&2
      badopts=1
    fi
    ;;
  recite-function-remote)
    if [ $# -gt 0 ]
    then
      echo "$cmd: $op: extra arguments: $*" >&2
      badopts=1
    fi
    ;;
  rename)
    if [ $# = 0 ]
    then
      echo "$cmd: $op: missing session-name" >&2
      badopts=1
    else
      session_name=$1
      shift
    fi
    if [ $# = 0 ]
    then
      echo "$cmd: $op: missing new-session-name" >&2
      badopts=1
    else
      session_name_new=$2
      shift
    fi
    if [ $# -gt 0 ]
    then
      echo "$cmd: $op: extra arguments: $*" >&2
      badopts=1
    fi
    ;;
  start)
    ;;
  use-session)
    if [ $# = 0 ]
    then
      echo "$cmd: $op: missing session-name" >&2
      badopts=1
    else
      session_name=$1
      shift
    fi
    ;;
  use-session-remote)
    if [ $# = 0 ]
    then
      echo "$cmd: $op: missing session-name" >&2
      badopts=1
    else
      session_name=$1
      shift
    fi
    if [ $# = 0 ]
    then
      echo "$cmd: $op: missing remote-host" >&2
      badopts=1
    else
      remote_host=$1
      shift
    fi
    if [ $# -gt 0 ]
    then
      echo "$cmd: $op: extra arguments: $*" >&2
      badopts=1
    fi
    ;;
  *)echo "$cmd: unrecognised op: $op" >&2
    badopts=1
    ;;
esac

[ $badopts ] && { echo "$usage" >&2; exit 2; }

rcmd(){
  _rcmd_rhost=$1; shift
  $trace ssh -t "$_rcmd_rhost" "$setx"'; : ${TMPDIR:=}; if [ -z "$TMPDIR" ]; then [ -d "$HOME/tmp/." ] && TMPDIR=$HOME/tmp; fi; export TMPDIR; '"$*"
}

case "$op" in
  up)    $trace tmux select-pane -U ;;
  down)  $trace tmux select-pane -D ;;
  left)  $trace tmux select-pane -L ;;
  right) $trace tmux select-pane -R ;;
  ls | list-sessions)
    # no tmux? use scr
    have_tmux || exec $trace scr
    tmux start-server
    if [ "x$1" = x-n ]
    then
      shift
      $trace tmux list-sessions ${1+"$@"} \
      | awk '{ printf("%3d %s\n", NR, $0); }'
    else
      $trace tmux list-sessions ${1+"$@"}
    fi
    ;;
  pick-new-prefix-session)
    tmux start-server
    echo "$session_prefix"$(tmux list-sessions | sed 's/:.*//' | next_suffix "$session_prefix")
    ;;
  pick-new-prefix-session-remote)
    # choose a new remote session name
    # using tmux by choice, screen otherwise
    session_name=$session_prefix$( rcmd "$remote_host" "if which tmux >/dev/null 2>&1; then tmux start-server; tmux list-sessions | sed 's/:.*//'; else screen -ls | sed -n 's/^\\t[1-9][0-9]*\\.\([^\\t]*\)\\t.*/\\1/p'; fi" | tr -d '\015' | next_suffix "$session_prefix" )
    echo "$session_name"
    ;;
  recite-function-remote)
    # recite a shell function for accessing remote sessions,
    # typically aliased to "@"
    echo '
        # Usage: tm_remote [host[:session_name]]
        tm_remote(){
          : ${_tm_host:=}
          : ${_tm_session:=}
          _tm_src_prefix=_${USER}@${HOST}__
          # no host[:session]? reconnect to the previously used host:session
          if [ $# = 0 ]
          then
            if [ -z "$_tm_host" -o -z "$_tm_session" ]
            then
              echo "$0: no current default remote session" >&2
              return 2
            fi
            set -- "$_tm_host:$_tm_session"
          fi
          _tm_host_session=$1; shift
          # parse [user@]host:session ==> [user@host] session
          case "$_tm_host_session" in
            *:*)
              _tm_host=${_tm_host_session%%:*}
              _tm_session=${_tm_host_session#*:}
              ;;
            *)_tm_host=$_tm_host_session
              _tm_session=
              ;;
          esac
          # allocate new session name if nothing specified
          [ -n "$_tm_session" ] \
          || _tm_session=$( tm pick-new-prefix-session-remote "$_tm_src_prefix" "$_tm_host" ) \
          || return 1
          $trace tm $xopt use-session-remote "$_tm_session" "$_tm_host"
    }'
    ;;
  rename)
    # rename session
    case "$session_name" in
      [1-9]*)
        session_name=$(
          "$0" list-sessions -n -F '#{session_name}' \
          | awk -v "session_number=$session_name" '$1 == session_number { print $2 }'
        )
        ;;
    esac
    if $trace tmux has-session -t "$session_name"
    then
      $trace tmux rename-session -t "$session_name" "$session_name_new"
    else
      echo "$cmd: $op: no such session: $session_name" >&2
      exit 1
    fi
    ;;
  start)
    # start initial screen sessions; just the named ones of names specified
    # obtains definitions from $HOME/.tmrc
    tmrc=$HOME/.tmrc
    if [ ! -f "$tmrc" ]
    then
      echo "$cmd: $op: no tmrc: $tmrc" >&2
      exit 1
    fi
    [ $# -gt 0 ] || set -- $(sed -n 's/^\([A-Z][^ ]*\) .*/\1/p' "$HOME/.tmrc")
    if [ $# = 0 ]
    then
      echo "$cmd: $op: no session names and nothing in \$HOME/.tmrc" >&2
      badopts=1
    else
      tmux start-server
      for session_name
      do
        found=
        lineno=0
        while read -r rc_name rc_etc
        do
          lineno=$(( lineno + 1 ))
          if [ "x$rc_name" = "x$session_name" ]
          then
            if [ $found ]
            then
              echo "$cmd: $op: $session_name: $tmrc:$lineno: repeated mention ignored" >&2
              xit=1
            else
              found=1
              shcmd=$( shqstr "$0" use-session "$session_name" -d )
              $trace sh $xopt -c "$shcmd $rc_etc" </dev/null || xit=1
            fi
          fi
        done <"$tmrc"
      done
    fi
    ;;
  use-session)
    # no tmux? use scr
    have_tmux || exec $trace scr "$session_name"
    tmux start-server
    case "$session_name" in
      [1-9]*)
        session_name=$(
          "$0" list-sessions -n -F '#{session_name}' \
          | awk -v "session_number=$session_name" '$1 == session_number { print $2 }'
        )
        ;;
    esac
    detached=
    if [ $# -gt 0 ] && [ "x$1" = x-d ]
    then
      detached=1
      shift
    fi
    if not $trace tmux has-session -t "$session_name" 2>/dev/null
    then
      cr=$( printf '\r' )
      keylines=
      while [ $# -gt 0 ] && [ "x$1" = x-K ]
      do
        keyline=$2
        shift; shift
        keylines=$keylines$keyline$cr
      done
      if [ $# = 0 ]
      then  set -- "$SHELL"
      else
        if [ "x$1" = x-c ]
        then  set -- "$SHELL" "$@"
        fi
      fi
      shcmd=$( shqstr "$@" )
      TMUX= $trace tmux new-session -d -s "$session_name" "$shcmd"
      [ -z "$keylines" ] || $trace tmux send-keys -l -t "$session_name" -- "$keylines"
    fi
    if [ -z "$detached" ]
    then
      if [ -n "$TMUX" ]
      then  $trace tmux switch-client -t "$session_name"
      else  $trace tmux attach-session -t "$session_name"
      fi
    fi
    ;;
  use-session-remote)
    # connect to remote session, tmux by choice, screen if no tmux
    rcmd "$remote_host" "set -ue; if which tmux >/dev/null 2>&1; then tmux start-server; tmux has-session -t $session_name && exec tmux attach-session -t $session_name || exec tmux new-session -s $session_name; else exec screen -x $session_name || exec screen -S $session_name; fi"
    ;;
  *)echo "$cmd: $op: unimplemented" >&2
    exit 1
    ;;
esac
