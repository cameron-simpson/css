#!/bin/sh -u
#
# Unfortunately, New File/Unlink Kills Hardlinks.
#
# Wrapper for vile programs that use the "make new file then rename onto old"
# form of edit, which breaks symlinks, hardlinks and permissions/ownership
# and of course any other metadata file may have.
#
# Procedure: copy filename to temp file, edit temp file, if ok then
# copy temp file back over filename. With lots of checking.
#	- Cameron Simpson <cs@zip.com.au> 27apr2005
#

cmd=`basename "$0"` || exit 1
usage="Usage: $cmd [-f] [arg1opts...] filename editcmd [editargs...]
  -f            Force. Rewrite filename even if editcmd exits non-zero.
                Some bogus programs do that.
  arg1opts      Options for the arg1 command to control how the temp file
                name is passed to editcmd. Default is to place the temp file
                name after the editargs."

arg1opts=
fixfail=1	# restore file if editor fails

badopts=

while [ $# -gt 0 ]
do
  case $1 in
    --)	shift; break ;;
    -f)	fixfail=
	;;
    -stdin)
	echo "$cmd: the arg1 $1 option is not supported" >&2
	badopts=1
	;;
    -discard|-end|-[0-9]*)
	arg1opts="$arg1opts $1"
	;;
    -?*)echo "$cmd: unrecognised option: $1" >&2
	badopts=1
	;;
    *)	break ;;
  esac
  shift
done

if [ $# = 0 ]
then
  echo "$cmd: missing filename" >&2
  badopts=1
else
  editfile=$1; shift
  case "$editfile" in
    -*)	editfile=./$editfile ;;
  esac
fi

if [ $# = 0 ]
then
  echo "$cmd: missing editcmd" >&2
  badopts=1
fi

[ $badopts ] && { echo "$usage" >&2; exit 2; }

wd=`dirname "$editfile"` || exit 1
base=`basename "$editfile"` || exit 1
tmplink=$wd/.$base.$cmd.$$

ln -i "$editfile" "$tmplink" \
|| { echo "$cmd: can't hardlink $editfile, aborting" >&2
     exit 1
   }

if arg1 $arg1opts -- "$editfile" "$@"
then
  cp "$editfile" "$tmplink" \
  || { echo "$cmd: can't copy new content to $tmplink" >&2
       exit 1
     }
  set -x
  rm -f "$editfile"
  exec mv "$tmplink" "$editfile"
fi

# editor failed
if [ $fixfail ]
then
  echo "$cmd: $editcmd fails, restoring $editfile from $tmplink" >&2
  rm -f "$editfile"
  mv "$tmplink" "$editfile"
  exit 1
fi

bak=$wd/.old.$base.$cmd.$$
echo "$cmd: $editcmd failed, applying change anyway" >&2
if cp "$tmplink" "$bak"
then
  echo "    original content in $bak" >&2
else
  echo "    warning: could not copy original to $bak" >&2
fi
cp "$editfile" "$tmplink" \
|| { echo "$cmd: can't copy new content to $tmplink" >&2
     exit 1
   } 
set -x
rm -f "$editfile"
exec mv "$tmplink" "$editfile"  
