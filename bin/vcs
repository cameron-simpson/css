#!/bin/sh -ue
#
# Do simple things with revision controlled source.
# - Cameron Simpson <cs@cskk.id.au> 25apr2007
#
# Huge revsision. - cameron 11may2017
#

set -ue

: ${TMPDIR:=/tmp}
: ${EDITOR:=vi}
: ${VCS_FORMAT_GLOG_GIT:='%<(25)%ae %s%n%ci %h<-%p%d%n'}
: ${VCS_FORMAT_GLOG_HG:='{author|email} {desc|firstline}\n{date|isodate} {rev}:{node|short}<-{ifeq(p2node|short,"000000000000",p1node|short,join(parents))}{ifeq(branch,"default",""," [{branch}]")}{ifeq(activebookmark,"","","@{activebookmark}")}{ifeq(count(tags),0,""," ({join(tags)})")}\n\n'}

cmd=$(basename "$0")
usage="Usage: $cmd [-V vcs_type] [command [args...]]
  -V vcs_type   Specify the VCS type to use.
                An empty string asks $cmd to figure this out.
  Commands:
    branch      Report current branch name.
    branches    Report all branch names.
    diff        Run the VCS diff command.
    glog        Report a graphical change log.
    info        Report VCS type, top and branch.
    modified    Report the names of modified files.
    report      (Default.) Report brief summary.
    status      Report tree status.
    tags        Report tag names.
    top [dir]   Report top of tree.
    type [dir]  Report type of tree."

vcs_type=
trace=command
##[ -t 2 ] && trace=set-x

badopts=

while [ $# -gt 0 ]
do
  case $1 in
    -V) vcs_type=$2; shift ;;
    --) shift; break ;;
    -?*)echo "$cmd: unrecognised option: $1" >&2
        badopts=1
        ;;
    *)  break ;;
  esac
  shift
done

if [ $# = 0 ]
then    op=report
else    op=$1; shift
fi

hg(){   $trace hg ${1+"$@"}; }
git(){  $trace git ${1+"$@"}; }

# Compute working directory VCS type.
# All other commands are split on type below.
case "$op" in
  info)
    # emit:
    #  type=vcs_type
    #  top=vcs_topdir
    dir=.
    [ $# = 0 ] || { dir=$1; shift; }
    if [ $# -gt 0 ]
    then
      echo "$cmd: $op: extra arguments after dir: $*" &2
      badopts=1
    else
      topdir=$( set -ue
                cd "$dir"
                findup -d . -c '[ -e "$FINDUP_DIR/.hg" -o -e "$FINDUP_DIR/.git" ]'
              ) || {
        echo "$cmd: $op $dir: cannot locate VCS top" >&2
        exit 1
      }
      if [ -d "$topdir/.hg" ]
      then  type=hg
      else
        if [ -e "$topdir/.git" ]
        then  type=git
        else  echo "$cmd: $op $dir: cannot determine VCS type at topdir=$topdir" >&2
              exit 1
        fi
      fi
      branch=$("$0" -V "$type" branch)
      printf 'top %s\ntype %s\nbranch %s\n' "$topdir" "$type" "$branch"
      case "$type" in
        hg)
          bookmark=$(hg bookmark | sed -n '/^ \* /!d; s///; s/ .*//; p')
          printf 'bookmark %s\n' "$bookmark"
          ;;
      esac
    fi
    ;;
  top)
    "$0" info ${1+"$@"} | awk '$1 == "top" { print $2; exit; }'
    ;;
  type)
    "$0" info ${1+"$@"} | awk '$1 == "type" { print $2; exit; }'
    ;;
  *)
    # other commands need the VCS type
    [ -n "$vcs_type" ] \
    || { vcs_type=$("$0" type) && [ -n "$vcs_type" ]; } \
    || {
      echo "$cmd: cannot infer VCS type" >&2
      exit 1
    }
    case "$op,$vcs_type" in
      branch,git)   git branch | sed -n 's/^\* //p' ;;
      branch,hg)    hg branch ;;
      branches,git) git branch ;;
      branches,hg)  hg branches ${1+"$@"} ;;
      diff,git)     git diff ${1+"$@"} ;;
      diff,hg)      hg diff ${1+"$@"} ;;
      glog,git)     git log \
                      --graph "--format=tformat:$VCS_FORMAT_GLOG_GIT" \
                      ${1+"$@"}
                    ;;
      glog,hg)      hg log -G --template "$VCS_FORMAT_GLOG_HG" \
                      ${1+"$@"}
                    ;;
      modified,git) ( cd "$vcs_top"
                      git status --porcelain | awk '$1 == "M" { print $2 }'
                    )
                    ;;
      modified,hg)  hg status -n -am ${1+"$@"} ;;
      report,git | status,git | st,git )
                    git status ${1+"$@"}
                    ;;
      report,hg)    hg summary
                    hg status -C ${1+"$@"} | grep '^[^?]'
                    ;;
      status,hg | st,hg)
                    hg status -C ${1+"$@"} ;;
      tags,git)     [ $# -gt 0 ] || set -- -l; git tag "$@" ;;
      tags,hg)      hg tags ${1+"$@"} ;;
      *)            echo "$cmd: unrecognised command for $vcs_type: $op" >&2
                    badopts=1
                    ;;
    esac
    ;;
esac

xit=$?

[ $badopts ] && { echo "$usage" >&2; exit 2; }

exit $xit
