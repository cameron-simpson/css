#!/usr/bin/perl
#
# Renumber items in mail directory to be consecutive from 1.
#	- Cameron Simpson, 17feb94
#
# -t Order by Date: (or mtime failing that) and drop duplicate msgids.
#	- Cameron Simpson <cs@cskk.id.au> 18oct94
#

use strict qw(vars);

use cs::Upd;
use cs::Source;
use cs::RFC822;
use cs::Pathname;

($::cmd=$0) =~ s:.*/::;
$::Usage="Usage: $::cmd [-t] [directory]
	-s	Silent (except for errors.)
	-v	Verbose (default if stdout is a tty).
	-t	Order by Date: (else mtime).
		Discard duplicate message-ids.
";

$::Tty=-t STDOUT;
$::Verbose=$::Tty;
$::Bytime=0;

if (@ARGV && $ARGV[0] eq '-t')
	{ $::Bytime=1;
	  shift;
	}

# die "bydate busted" if $::Bytime;

if (@ARGV == 0)
	{ $::Dir='.';
	}
elsif (@ARGV == 1)
	{ $::Dir=shift;
	}
else
	{ die $::Usage;
	}

chdir($::Dir) || die "$::cmd: chdir($::Dir): $!\n";

$::Xit=0;

{ my(@items);

  @items=grep(/^\d/,cs::Pathname::dirents('.'));
  if ($::Bytime)
	{ @items=bytime(@items);
	}
  else
  {
    @items=sort { $a <=> $b } @items;
  }

  my($map)={};
  my($n,$ext);
  local($_);

  for $n (1..@items)
	{ $_=$items[$n-1];
	  $ext=(/^\d+/ ? $' : '');
	  $map->{$_}=$n.$ext;
	}

  $::Verbose && nl("moving files ...");
  cs::Pathname::vrename('.',$map,$::Verbose) || ($::Xit=1);
}

exit $::Xit;

sub bytime
	{ my(@items)=@_;

	  $::Verbose && nl("scanning files ...");

	  my(%date,$mtime,$f,$srcarg,$hdrs);

	  F:
	    for $f (sort { $a <=> $b } @items)
		{ $::Verbose && out($f);

		  ($srcarg=$f) =~ s/\.(Z|gz)$//;

		  { my($s);

		    if (! defined ($s=new cs::Source (PATH, $srcarg)))
			{ err("$::cmd: open($srcarg): $!\n");
			  next F;
			}

		    { my($F,@stat);
		      $F=$s->{FILE};
		      @stat=stat $F;
		      $mtime=$stat[9];
		    }

		    $hdrs=new cs::RFC822 $s;
		  }

#		  if (defined($msgid=$hdrs->Hdr('Message-ID')))
#			{ if (defined($filebyid{$msgid}))
#				{ $::Verbose && nl("unlink $filebyid{$msgid}, superceded by $f");
#				  unlink($filebyid{$msgid})
#					|| err("$::cmd: unlink($filebyid{$msgid}): $!\n");
#				}
#
#			  $filebyid{$msgid}=$f;
#			}
#		  else	{ $filebyid{$msgid=$hdrs->ForceMsgID()}=$f;
#		  	}

		  { my($dateHdr,$gm);

		    if (defined($dateHdr=$hdrs->Hdr(DATE))
		     && defined($gm=cs::RFC822::date2gm($dateHdr)))
			{ $date{$f}=$gm;
			}
		    else
			{ $::Verbose && err("using mtime($mtime) for $f\n");
			  $date{$f}=$mtime;
			}
		  }
		}

	  $::Verbose && out("sorting files ...");
	  sort { $date{$a} == $date{$b}
			? $a == $b
				? $a cmp $b
				: $a <=> $b
			: $date{$a} <=> $date{$b}
	       } keys %date;
	}
