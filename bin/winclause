#!/bin/sh
#
# Grab a clause from a Windows-style .ini file, or edit it.
#	- Cameron Simpson <cs@cskk.id.au> 14jul2001
#

cmd=$0
usage="Usage: $cmd file [clausename [var=value...]]"

badopts=

if [ $# = 0 ]
then
  echo "$cmd: missing file" >&2
  badopts=1
else
  file=$1
  shift
  case "$file" in
    -*) file=./$file ;;
  esac
  if [ ! -s "$file" ]
  then
    echo "$cmd: expected nonempty file: $file" >&2
    badopts=1
  fi
  if [ $# = 0 ]
  then
    clause=
  else
    clause=$1
    shift
    # simple sanity check of var=value arguments
    for setting
    do
      var=$( expr "x$change" : 'x\([a-zA-Z_][a-zA-Z_0-9]*\)=.*' ) || var=
      if [ -z "$var" ]
      then
        echo "$cmd: bad var=value: $setting" >&2
        badopts=1
      fi
    done
  fi
fi

[ $badopts ] && { echo "$usage" >&2; exit 2; }

if [ -z "$clause" ]
then
  # no clause? recite clause names
  sed -n 'y/	/ /
          s/^ *\[ *\([^ ][^ ]*\) *\].*/\1/p
         ' "$file"
else
  if [ $# = 0 ]
  then
    # no args? just recite clause from file
    [ $# = 0 ] \
    && exec sed -n 's/^[ 	][ 	]*//
            /^#/d
            /^$/d
            /^\['"$clause"'\]/b begin
            d
            :begin
            n
            :loop
            /^\[/q
            s/^[ 	][ 	]*//
            /^#/b begin
            /^$/b begin
            p
            n
            b loop' "$file"
  else
    # modify the .ini file
    # compute editing commands from "var=val" strings
    append=
    prune=
    for setting
    do
      var=$( expr "x$setting" : 'x\([a-zA-Z_][a-zA-Z_0-9]*\)=.*' )
      val=$( expr "x$setting" : 'x[a-zA-Z_][a-zA-Z_0-9]*=\(.*\)' )
      append="$append
          a\\
  $setting"
      prune="$prune
         /^ *$var *=/{
           n
           b redo
         }"
    done

    # apply changes
    sedf=':top
          s/^[ 	][ 	]*//
          /^#/b next
          /^$/b next
          /^\['"$clause"'\]/b begin
          :next
          p
          n
          b top
          :begin
          '"$append"'
          :loop
          p
          n
          :redo
          /^\[/b last
          s/^[ 	][ 	]*//
          /^#/b loop
          /^$/b loop
          '"$prune"'
          b loop
          :last
          p
          n
          b top'

    exec bsed -n "$sedf" "$file"
  fi
fi
