#!/bin/sh
#
# Yet another audio CD ripper. Easiest way to learn the tools :-)
# Like mkcd and mkiso, this is meant to be a no brainer command line.
#	- Cameron Simpson <cs@zip.com.au> 12mar2001
#
# Add MP3 mode, basicly for my brother.	 -cameron 25aug2001
# Support multiple encodings, add -k option, switch to WAV as
# intermediate file format.		- cameron 16mar2003
#

EDITOR=${EDITOR:-vi}

dev=${CDRIP_DEV:-/dev/cdrom}
enclist=${CDRIP_ENC:-ogg}
bps=${CDRIP_BPS:-192}
qual=${CDRIP_QUAL:-6}
lock=$CDRIP_LOCK
oggencqual=
lamequal=
keep=
jobs=1
nice=10

cmd=`basename "$0"`
usage="Usage: $cmd [-b bps] [-d device] [-e enclist] [-l lock] [-j jobs] [-K]
	-q qual		Variable bitrate quality rating.
			Default: $qual
	-b kbps		Fixed bitrate kilobits per second for the encoding.
			Default: variable bit rate using quality.
	-d device	Device holding the CD. Default: $dev
	-e enclist	Select encoding(s), comma separated. Default: $enclist
	-K		Keep the WAV file around.
	-j jobs		Use this many CPUs for the encoding phase.
			(jobs > 1) implies \"-l $cmd\".
	-l lock		Do encoding completely asynchronously, using \"lock\"
			as the lock name basis.
	-n nice		Extra niceness for the encoder. Default: $nice"

set x -b "$bps" -q "$qual" $CDRIP_OPTS ${1+"$@"}; shift

badopts=
while :
do
    case $1 in
	-b)	oggencqual="-b $2" lamequal="-b $2"
		shift ;;
	-q)	oggencqual="-q $2" lamequal="-v -V `expr 9 - $2`"
		shift ;;
	-d)	dev=$2 ;shift ;;
	-e)	enclist=
		for e in `echo "$2" | tr , ' '`
		do
		  case $e in
		    mp3|ogg)	enclist="$enclist $e" ;;
		    *)		echo "$cmd: unrecognised encoding: $e" >&2
				echo "	I known ogg and mp3" >&2
				badopts=1
				;;
		  esac
		done
		shift
		;;
	-l)	lock=$2; shift ;;
	-j)	jobs=$2; shift ;;
	-K)	keep=1 ;;
	--)	shift ;break ;;
	-?*)	echo "$cmd: unrecognised option: $1" >&2
		badopts=1
		;;
	*)	break ;;
    esac
    shift
done

case "$lock" in
  *[\ \	]*)	echo "$cmd: no whitespace in lock names! (\"$lock\")" >&2
		badopts=1
		;;
esac

[ $# = 0 ] || { echo "$cmd: extra arguments: $* ">&2
		abdopts=1
	      }

[ $badopts ] && { echo "$usage" >&2; exit 2; }

if [ "$jobs" -gt 1 -a -z "$lock" ]
then
    lock=$cmd
fi

toc=/tmp/cdtoc.$$
cdtoc "$dev" >"$toc" || { rm -f "$toc"; exit 1; }

grep '^[^#]' <"$toc" | grep -v '^[0-9][0-9]* '
ask "Edit TOC before use" && $EDITOR "$toc"

exec <"$toc"
rm "$toc"

sed -e 's;//*; -- ;g' -e 's/   */ /g' \
| ( read artist	|| exit 1
    read album	|| exit 1

    encpid=
    xit=0
    nextjob=1
    while read track secs offset \
       && read title \
       && read xtra
    do
      dir=$artist/$album
      case $track in
	  [0-9])	wtrack=0$track ;;
	  *)		wtrack=$track ;;
      esac
      ftitle="$wtrack: $title"

      echo "Ripping track #$track: $dir/$ftitle ..."

      needenc=
      for enc in $enclist
      do  out=$dir/$ftitle.$enc
	  if [ -s "$out" ]
	  then  echo "$cmd: $out already exists" >&2
	  else  needenc="$needenc $enc"
	  fi
      done

      # skip if no encodings OR keep-raw mode on
      [ -n "$needenc" -o -n "$keep" ] || continue

      raw=$dir/$ftitle.wav

      [ -d "$dir/." ] || mkdir -p "$dir" || { xit=1; continue; }
      ripcomment="Ripped by $NAME with cdparanoia on `date`"

      [ -s "$raw" ] \
      || (set -x; cdparanoia -q -d "$dev" -e -w "$track" "$raw" 2>cdp.err) \
      || { echo "cdparanoia failed" >&2
	   tail -20 cdp.err >&2
	   [ $keep ] || rm -f "$raw"
	   xit=1
	   continue
	 }

      firstenc=1
      linksgood=1
      for enc in $needenc
      do
	out=$dir/$ftitle.$enc
	[ -s "$out" ] && { echo "$cmd: existing file $out, skipping" >&2
			   continue
			 }

	if [ -z "$lock" ]
	then
	    [ -n "$encpid" ] && kill -0 "$encpid" 2>/dev/null \
	      && { echo; echo "waiting for previous encoder ..."; }
	    wait
	fi

	if [ $firstenc ]; then firstenc=
			  else ls -ld "$raw"
	fi

	# set up command line for each encoding
	link=$raw-4$enc
	if ln "$raw" "$link"
	then
	    set rmafter $"link" "$@"
	    in=$link
	else
	    echo "$cmd: can't link raw to $link" >&2
	    linksgood=
	    link=
	    in=$raw
	fi
	case $enc in
	  ogg)
	    set oggenc $oggencqual -a "$artist" -N "$track" -t "$title" -l "$album"
	    # This fiddling is because oggenc blows up with long comments.
	    commentf=.tmp$$c
	    [ -n "$xtra" ] && echo "$xtra" >"$commentf"
	    echo "$ripcomment" >>"$commentf"
	    echo "Encoded by $NAME with `oggenc -v` [$oggencqual] on `date`" >>"$commentf"
	    while read -r comment
	    do  [ -n "$comment" ] && set "$@" -c "COMMENT=$comment"
	    done <$commentf
	    rm "$commentf"

	    set "$@" -o "$out" "$in"
	    ;;
	  mp3)
	    set lame -h $lamequal -p "$in" "$out"
	    if [ -n "$link" ]
	    then
	      ( # dispatch job to id3 tag the file after encoding
		while [ -s "$link" ]
		do  sleep 1
		done
		if [ -s "$out" ]
		then
		  set -x
		  id3ed -s "$title" -n "$artist" -a "$album" \
			-c "Encoded by $NAME with `lame -v 2>&1 | sed 1q` [$lamequal] on `date`" \
			-k "$track" "$out"
		fi
	      ) &
	    fi
	    ;;
	  *)
	    echo "$cmd: unimplemented encoding \"$enc\"!" >&2
	    xit=1
	    continue
	    ;;
	esac

	[ -n "$link" ] && set rmafter "$link" "$@"
	[ -n "$lock" ] && { set alog cdrip lock "$lock@$HOST-$nextjob" "$@"
			    nextjob=`expr \( $nextjob \) \% $jobs + 1`
			  }
	set nice -n "$nice" "$@"

	if ( set -x; exec "$@" )
	then :
	else echo "Encode of \"$raw\" fails." >&2
	     rm -f "$out"
	     exit 1
	fi &

	encpid=$!
      done

      [ $keep ] \
      || [ -z "$lock" -o -n "$linksgood" ] && (set -x; exec rm "$raw")
    done

    [ -z "$lock" ] && wait

    exit $xit
  )

xit=$?

eject "$dev"
necho ''

exit $xit
