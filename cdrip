#!/bin/sh
#
# Yet another audio CD ripper. Easiest way to learn the tools :-)
# Like mkcd and mkiso, this is meant to be a no brainer command line.
#	- Cameron Simpson <cs@zip.com.au> 12mar2001
#
# Add MP3 mode, basicly for my brother.	 -cameron 25aug2001
#

dev=${CDRIP_DEV:-/dev/cdrom}
bps=${CDRIP_BPS:-192}
enc=${CDRIP_ENC:-ogg}
lock=

cmd=`basename "$0"`
usage="Usage: $cmd [-b bps] [-d device] [-e enc] [-l lock]
	-b bps		Bits per second for the final bitstream.
			Default: ${bps}bps.
	-d device	Device holding the CD. Default: $dev
	-e enc		Select encoding. Default: $enc
	-l lock		Do encoding completely asynchronously, using \"lock\" as the lock name."

set x $CDRIP_OPTS ${1+"$@"}; shift

badopts=
while :
do
    case $1 in
	-b)	bps=$2; shift ;;
	-d)	dev=$2 ;shift ;;
	-e)	case $2 in
		    mp3|ogg)	enc=$2 ;;
		    *)		echo "$cmd: unrecognised encoder: $2" >&2
				echo "	I known ogg and mp3" >&2
				badopts=1
				;;
		esac
		shift
		;;
	-l)	lock=$2; shift ;;
	--)	shift ;break ;;
	-?*)	echo "$cmd: unrecognised option: $1" >&2
		badopts=1
		;;
	*)	break ;;
    esac
    shift
done

case "$lock" in
  *[\ \	]*)	echo "$cmd: no whitespace in lock names! (\"$lock\")" >&2
		badopts=1
		;;
esac

[ $# = 0 ] || { echo "$cmd: extra arguments: $* ">&2
		abdopts=1
	      }

[ $badopts ] && { echo "$usage" >&2; exit 2; }

cdtoc "$dev" \
| sed -e 's;//*; -- ;g' -e 's/   */ /g' \
| ( read artist	|| exit 1
    read album	|| exit 1

    encpid=
    xit=0
    while read track secs offset \
       && read title \
       && read xtra
    do
      dir=$artist/$album
      case $track in
	  [0-9])	wtrack=0$track ;;
	  *)		wtrack=$track ;;
      esac
      title="$wtrack: $title"

      raw=$dir/$title.raw
      case $enc in
	  ogg|mp3)
		out=$dir/$title.$enc
		;;
	  *)	echo "$cmd: unimplemented encoding \"$enc\"!" >&2
		xit=1
		;;
      esac
	  
      [ -s "$out" ] && { echo "$cmd: existing file $out, skipping track #$track" >&2
			 continue
		       }

      [ -d "$dir/." ] || mkdir -p "$dir" || { xit=1; continue; }

      echo "Ripping track #$track: $dir/$title ..."
      ripcomment="Ripped by $NAME with cdparanoia and oggenc on `date`"
      if (set -x; cdparanoia -q -d "$dev" -e -r "$track" "$raw" 2>cdp.err)
      then
	  if [ -z "$lock" ]
	  then
	      [ -n "$encpid" ] && kill -0 "$encpid" 2>/dev/null \
		&& { echo; echo "waiting for previous encoder ..."; }
	      wait
	  fi

	  ls -ld "$raw"
	  ( if case $enc in
		ogg)
		  # This fiddling is because oggenc blows up with long comments.
		  commentf=.tmp$$c
		  [ -n "$xtra" ] && echo "$xtra" >"$commentf"
		  echo "$ripcomment" >>"$commentf"

		  set oggenc -r -b $bps \
			 -a "$artist" -N "$track" -t "$title" -l "$album"

		  while read -r comment
		  do  [ -n "$comment" ] && set "$@" -c "$comment"
		  done <$commentf
		  rm "$commentf"

		  set "$@" -o "$out" "$raw"
		  ;;
		mp3)
		  set lame -r -b "$bps" -h -p "$raw" "$out"
		  ;;
	      esac
	      [ -n "$lock" ] && set alog cdrip lock "$lock" rmafter "$raw" nice "$@"
	      ( set -x; exec "$@" )
	    then :
	    else echo "Encode of \"$raw\" fails." >&2
		 rm -f "$out"; exit 1
	    fi
	  ) &
	  encpid=$!
      else
	  echo "cdparanoia failed" >*2
	  rm -f "$raw"
	  xit=1
      fi
    done

    [ -z "$lock" ] && wait

    exit $xit
  )

xit=$?

eject "$dev"
necho ''

exit $xit
