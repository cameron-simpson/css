#!/bin/sh
#
# Wrapper for CGI scripts which sets environment and captures and
# reports errors.
# For any perl CGI, move the real .cgi to .cgi-pl and symlink cgiwrap-stub to
# the old .cgi name.
# For any shell CGI, move the real .cgi to .cgi-sh and symlink cgiwrap-stub to
# the old .cgi name.
#	- Cameron Simpson <cs@zip.com.au> 03mar1999
#
# Make into a single wrapper for pl and sh.	- cameron 12feb2001
#
# =head1 NAME
#
# cgiwrap - wrapper for CGI scripts which sets environment and captures and reports errors to the browser
#
# =head1 SYNOPSIS
#
# mv cgi-script cgi-script-ext;
# ln -s /opt/css/bin/cgiwrap-stub cgi-script
#
# =head1 DESCRIPTION
#
# I<cgiwrap> and its partner script I<cgiwrap-stub>
# comprise a wrapper for CGI scripts
# for systems where the web server I<error_log> file
# is unavailable or simply inconvenient to the CGI author.
#
# Normal behaviour for a failing CGI script is to log error messages
# to the web server I<error_log> file
# and for the web server to return an unhelpful 500 series error code
# to the web browser.
# While this avoids leaking security sensitive error messages
# and prevents the semblance of a functioning script
# which would be bad for a production system),
# it is very unhelpful to the script developer.
#
# A script wrapped with cgiwrap 
# behaves normally when the script itself works correctly.
# If an error message escapes
# the wrapper presents it on the web page
# with some accompanying environment dump
# for rapid debugging.
#
# =head2 Deployment
#
# For an arbitrary CGI script I<cgi-script> go:
#
#	mv cgi-script cgi-script-ext
#	ln -s /opt/css/bin/cgiwrap-stub cgi-script
#
# where I<ext> is B<sh> for a script written in shell,
# B<pl> for Perl, B<py> for Python or B<ici> for ici.
#
# Additionally a Bourne shell file B<.cgienv.sh>
# may be provided in the directory containing the CGI script.
# If present, it is sourced to provide
# environment settings for the script
# beyond what the web server may provide.
#

: ${TMPDIR:=/tmp}

SCRIPT_FILENAME=${SCRIPT_FILENAME:-$0}
export SCRIPT_FILENAME
if [ "x$1" = "x-0" ]
then
    SCRIPT_FILENAME=$2; shift; shift
else
    echo "$0: missing mandatory -0 option" >&2
    exit 2
fi

# snapshot errors and attach to output bottom
STDERR=$TMPDIR/stderr.$USER.$$
DEBUG=1; export DEBUG
trap 'exec 2>&1
      if [ -n "$DEBUG" -a -s "$STDERR" ]
      then
	  echo "Content-Type: text/html"
	  echo
	  echo "<TITLE>Debugging Info for $0</TITLE>"
	  echo "<BR><HR><B>Debugging Info</B><P>"
	  echo "<B>STDERR of $0 $*</B><BR><PRE><SMALL>"
	  fold <"$STDERR"
	  echo "</SMALL></PRE>"
	  echo "<P><B>Environment</B><BR><PRE><SMALL>"
	  pwd; id; echo
	  env | sort
	  echo "</SMALL></PRE>"
      fi
      rm -f "$STDERR"' 0
exec 2>"$STDERR"

if [ -s "$SCRIPT_FILENAME-pl" ]
then  perl -I$HOME/rc/perl "$SCRIPT_FILENAME-pl" ${1+"$@"}
else  if [ -s "$SCRIPT_FILENAME-sh" ]
      then  /bin/sh "$SCRIPT_FILENAME-sh" ${1+"$@"}
      else  if [ -s "$SCRIPT_FILENAME-py" ]
	    then  python "$SCRIPT_FILENAME-py" ${1+"$@"}
	    else  if [ -s "$SCRIPT_FILENAME-ici" ]
		  then  ici "$SCRIPT_FILENAME-ici" ${1+"$@"}
		  else  echo "$0: can't find $SCRIPT_FILENAME-{sh,pl,py,ici}" >&2
		  fi
	    fi
      fi
fi

exit $?

# =head1 AUTHOR
#
# Cameron Simpson <cs@zip.com.au> 30mar1999
#
