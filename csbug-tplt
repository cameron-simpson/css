#!/bin/sh -u
#
# Construct a new bug based on a template bug.
#	- Cameron Simpson <cs@zip.com.au> 02jul2005
#

: ${CSBUG_ROOT:=$HOME/var/bugs}

cmd=`basename "$0"` || cmd=$0
usage="Usage: $cmd -b tplt-bugnum"

trace=set-x

bugnum=

badopts=

while [ $# -gt 0 ]
do
  case $1 in
    -b)	bugnum=$2; shift ;;
    -d)	CSBUG_ROOT=$2; export CSBUG_ROOT; shift ;;
    --)	shift; break ;;
    -?*)echo "$cmd: unrecognised option: $1" >&2
	badopts=1
	;;
    *)	break ;;
  esac
  shift
done

[ -n "$bugnum" ] || { echo "$cmd: missing bugnum" >&2; badopts=1; }

[ $# = 0 ] || { echo "$cmd: extra arguments: $*" >&2; badopts=1; }

[ $badopts ] && { echo "$usage" >&2; exit 2; }

# prevent stray output
exec 4>&1 1>&2

tpstatus=`csbug -b "$bugnum" GET status` || exit 1

[ "x$tpstatus" = xTEMPLATE ] \
|| { echo "$cmd: bug $bugnum does not have status TEMPLATE" >&2
     exit 1
   }

# set up bug queue, flush table of mapped bugs
set -- "$bugnum"
eval `set|sed -n 's/^\(didbug_[1-9][0-9]*\)=.*/unset \1/p'`

# prepare new bug
tpdir=`csbug -b "$bugnum" GET BUG-PATH` || exit 1
newbug=`$trace csbug NEW ''` || exit 1
CSBUG_BUGNUM=$newbug
export CSBUG_BUGNUM

echo "$newbug" >&4
exec 4>&-

# dup template bug onto new bug
newdir=`csbug GET BUG-PATH` || exit 1
$trace rsync -avH "$tpdir/." "$newdir/."

csbug SET status NEW

# now dup all the template children
for child in `csbug GET CHILDREN`
do
  chstatus=`csbug -b "$child" GET status`
  [ "x$chstatus" = xTEMPLATE ] || continue
  dupchild=`"$0" -b "$child"`
  $trace csbug CHILDREN "-$child" "+$dupchild"
done
