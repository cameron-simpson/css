#!/bin/sh
#
# Watch a set of link post pages (eg freshmeat) and report new links.
#	- Cameron Simpson <cs@cskk.id.au> 29jul2000
#

cmd=`basename "$0"`
usage="Usage: $cmd indexfile <linkpageurls
	-f sedf	Sed script to filter the \"url title\" stage.
	-p perlf Perl-p script to filter the \"url title\" stage."

sedf=
perlf=
if [ "x$1" = x-f ]
then
  sedf=$2; shift; shift
  perlf=
else
  if [ "x$1" = x-p ]
  then
    perlf=$2; shift; shift
    sedf=
  fi
fi

[ $# = 1 ] || { echo "$usage" >&2; exit 2; }

tmp=$HOME/tmp
[ -d "$tmp/." ] || mkdir -p "$tmp" || exit 1

oldposts=$1
case $oldposts in
    /*)	;;
    *)	oldposts=`pwd`/$oldposts ;;
esac

nowposts=$tmp/$cmd$$now
newposts=$tmp/$cmd$$new

[ -w "$oldposts" ] \
|| { echo "$cmd: $oldposts: indexfile must exist and be writable" >&2
     exit 1
   }

# get all links, with titles
sort -u \
| pageurls -# -x -t - \
| perl -ne 'chomp;
	    next unless /^(http:[^\t]*)\t/;
	    ($url,$title)=($1,$'\'');
	    next if length $url > 96;
	    $url.="/" if $url =~ m|^http://[^/]*$|;
	    $title=substr($title,$[,79) if length $title > 79;
	    $_="$url $title\n";
	    print
	   ' \
| if [ -n "$sedf" ]
  then  exec sed -f "$sedf"
  else
    if [ -n "$perlf" ]
    then  exec perl -p "$perlf"
    else  exec cat
    fi
  fi \
> $nowposts

# locate new URLs and merge into state file
# emit new URLs with titles on output
DATETAG=`daycode` \
	lock $oldposts \
	perl -e '
		 my $daytag=$ENV{DATETAG};
		 my($old,$new)=@ARGV;

		 # load state file
		 die "open($old): $!" if ! open(OLD,"< $old\0");
		 my %old;
		 my @F;
		 while (defined ($_=<OLD>))
		 { chomp;
		   @F=split(/\t/,$_,2);		# daytag url
		   @F=($daytag,@F) if @F < 2;	# legacy
		   $old{$F[1]}=$F[0];		# url -> daytag
		 }
		 close(OLD);

		 # load new URLs
		 die "open($new): $!" if ! open(NEW,"< $new\0");
		 while (defined ($_=<NEW>))
		 { chomp;
		   @F=split(/\s/,$_,2);		# url title
		   print "$_\n" if ! exists $old{$F[0]};
		   $old{$F[0]}=$daytag;		# update tag

		 }
		 close(NEW);

		 # rewrite state file
		 die "open($old,W): $!" if ! open(OLD,"> $old\0");
		 for my $url (sort { my $cmp = ($old{$a} cmp $old{$b});
				     $cmp == 0 ? $a cmp $b : $cmp;
				   } keys %old)
		 { print OLD "$old{$url}\t$url\n";
		 }
		 close(OLD);

		 # emit new URLs
		' $oldposts $nowposts

wait
rm -f $nowposts $newposts
