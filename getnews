#!/usr/bin/perl -w
#
# Collect USENET news articles and feed to procmail.
#	- Cameron Simpson <cs@zip.com.au>
#

use strict qw(vars);

use cs::Upd;
use cs::Misc;
use cs::Newsrc;
use cs::NNTP;
use cs::Sink;
use Getopt::Std;

sub fetchgroup($);

$::Server=(exists $ENV{NNTPSERVER} && length $ENV{NNTPSERVER} ? $ENV{NNTPSERVER} : 'nntp');
$::NDA='ng2to|procmail';
$::Newsrc="$ENV{HOME}/.getnews-state";
$::CatchUp=0;
$::Verbose=0;
$::Progress=0;
if (-t STDERR) { $::Progress=1; }

$::Usage="Usage: $::cmd [-s nntpserver] [-d nda] [newsgroup...]
	-c		Catch up the named group.
	-s nntpserver	Specify server. Default from \$NNTPSERVER: $::Server
	-n newsrc	Specify news file. Default: $::Newsrc.
	-d nda		Specify news delivery agent. Default: $::NDA
	-q		Quiet.
	-v		Verbose.
";

getopts('cs:d:n:qv') || die $::Usage;
$::CatchUp=$::opt_c if defined $::opt_c;
$::Server=$::opt_s if defined $::opt_s;
$::NDA=$::opt_d if defined $::opt_d;
$::Newsrc=$::opt_n if defined $::opt_n;
if ($::opt_q)	{ $::Progress=0; $Verbose=0; }
if ($::opt_v)	{ $::Progress=1; $Verbose=1; }

$::Conn=new cs::NNTP $::Server;
die "$::cmd: can't connect to server $::Server: $!\n" if ! defined $::Conn;

$::RC=new cs::Newsrc ($::Newsrc,$::Server);

if (! @ARGV)
{
  if ($::CatchUp)
  { die "$::cmd: no newsgroups! catch up mode can only be used with explicit groups\n";
  }

  @ARGV=sort grep(/\@$::Server$/ && $::RC->Subscribe($_), $::RC->Groups());
  if (! @ARGV)
  { warn "$::cmd: no subscribed groups known for server \"$::Server\"\n";
  }
  else
  { for (@ARGV)
    { s/\@$::Server$//;
    }
  }
}

$::Xit=0;

$::Count=0;
for my $group (@ARGV)
{ fetchgroup($group);
}

undef $::RC;

$::Conn->Quit();
undef $::Conn;

if ($::Count > 0)
{ $::Progress && nl("$::Count article".($::Count == 1 ? '' : 's')." retrieved");
}

exit $::Xit;

sub fetchgroup($)
{ my($group)=@_;

  $::Progress && out($group);

  my @r = $::Conn->Group($group);
  if (@r != 2)
  { warn "$::cmd: can't select group \"$group\" [@r]\n";
    $::Xit=1;
    return;
  }

  my($low,$high)=@r;
  
  my $R = $::RC->Range("$group\@$::Server");
  ## warn "range($group)=".$R->Text();

  if ($::CatchUp)
  { $R->Add(1,$high);
    $::RC->Sync();
    return;
  }

  my $M;
  my $na=0;

  N:
  for my $n ($low..$high)
  {
    next N if $R->InRange($n); ## we know it's not in the range
    $::Progress && out("$group: $n/$high");

    $R->Add($n);	# articles come in in sequence

    $M=$::Conn->Article($n);
    if (! defined $M)
    { ## warn "$::cmd: $group/$n missing\n";
      next N;
    }

    my $out = new cs::Sink(PIPE,$::NDA);
    $M->WriteItem($out);
    $na++;
  }

  $::RC->SetRange("$group\@$::Server", $R);
  $::RC->Sync();
  if ($na > 0)
  { $::Count+=$na;
    $::Progress && nl("$group: $na articles") if $na > 0;
  }
}
