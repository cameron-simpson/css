#!/bin/sh
#
# Edit a GPG encrypted file. Derived from gpgedit.
#	- Cameron Simpson <cs@zip.com.au> 28oct2003
#

cmd=`basename "$0"`

[ $# = 1 ] || { echo "Usage: $cmd file.gpg" >&2; exit 2; }

gpgfile=$1; shift

wkdir=`mkdirn "$HOME/private/tmp/$cmd"` || exit 1

xit=1
rmf=$wkdir
trap '[ -z "$rmf" ] || rm -rf $rmf; exit $xit' 0

gpgid=${GPGID:-$EMAIL}

bak=$gpgfile.`datecode`
cp "$gpgfile" "$bak" || { rm -f "$bak"; exit 1; }

wk=cleartext
echo "decrypting $gpgfile ..." >&2

# require GPG pass phrase
set-x gpg --decrypt <"$gpgfile" >"$wkdir/$wk" \
|| { echo "$cmd: decryption failed, aborting" >&2
     exit 1
   }

# conceal the dir with the cleartext
( cd "$wkdir" || exit $?
  "$EDITOR" "$wk"
  xit=$?
  echo clear
  exit $xit
) || exit 1

if [ ! -s "$tmpdir/$tmp" ]
then
    echo "$cmd: temp file is empty, leaving original untouched" >&2
    exit 1
fi

if echo "encrypting $gpgfile ..." >&2
   gpg -e -r "$gpgid" <"$wkdir/$wk" >"$gpgfile"
then
    rm -f "$bak"
    xit=0
else
    echo "$cmd: reencryption failed, restoring $gpgfile from snapshot" >&2
    if cp "$bak" "$gpgfile"
    then  rm -f "$bak"
    else  echo "$cmd: warning: couldn't restore $gpgfile from $bak" >&2
	  ls -ld "$gpgfile" "$bak" >&2
    fi
fi

exit $xit
