#!/bin/sh
#
# Backup a directory using an incremental technique.
# See also: histbackup-prune.
#	- Cameron Simpson <cs@zip.com.au> 03apr2000
#
# --inplace
#	Specify parent dir, backup parent/current to parent/datestamp.
#	- Cameron Simpson <cs@zip.com.au> 11apr2000
#
# --mono
#	Monotonic accumulation of data: just don't use --delete with rsync :-)
#	To be used for the downloads archive.
#	- Cameron Simpson <cs@zip.com.au> 17may2000
#
# --linkonly
#	Specify the parent backupdir only, and omit the rsync.
#	Emit backupdir linktree subdir name on stdout.
#	- Cameron Simpson <cs@zip.com.au> 28jun2001
#
# --no-copy
#	Passed to linktree.
#	- Cameron Simpson <cs@zip.com.au> 03jul2001
#
# --rsync-path rrsync
#	Passed to rsync.
#	- Cameron Simpson <cs@zip.com.au> 12jul2001
#

cmd=`basename "$0"`
usage="Usage:
	$cmd [options...] [host:]source backupdir [rsyncopts...]
	$cmd [options...] --inplace parent [rsyncopts...]
	$cmd [options...] --no-rsync parent

	-v, --verbose	Verbose. Passed to rsync.
	--inplace	In addition to the dated subdirectories in the backupdir,
			take the source to be backupdir/current.
	--no-delete, --mono
			Monotonic growth - don't pass --delete to the rsync pass.
	--no-rsync, --linkonly
			Don't do the rsync pass - just set up the new link tree
			and report its basename.
	--no-copy	Passed to linktree - don't fall back to copying the
			source file if the link fails (eg to link count
			overflow).
	--rsync-path rrsync Execute the command \"rrsync\" as the remote rsync.
			Passed to rsync.
	--symlink name	Make a symlink named \"name\" pointing at the latest backup."

badopts=
symlink=
src=
dest=
mono=
inplace=
linkonly=
ltargs=
rrsync=rsync
includefile=
rsopts=
verbose=
[ -t 1 ] && verbose=1

while :
do case $1 in
    -v|--verbose) verbose=1 ;;
    --inplace)	inplace=1 ;;
    --no-delete|--mono)
		mono=1 ;;
    --no-copy)	ltargs="$ltargs $1" ;;
    --no-rsync|--linkonly)
		linkonly=1
		exec 3>&1 1>&2	# ensure clean stdout
		;;
    --rsync-path) rrsync=$2; shift ;;
    --symlink)	symlink=$2; shift ;;
    --)		shift; break ;;
    -*)		echo "$cmd: unrecognised option: $1" >&2
		badopts=1
		;;
    *)		break ;;
   esac
   shift
done

if [ $linkonly ]
then
    if [ $# -lt 1 ]
    then
	echo "$cmd: missing parent" >&2
	badopts=1
    else
	dest=$1
	shift
    fi
else
    if [ $inplace ]
    then
	# src is the "current" subdir of the supplied dest
	if [ $# -lt 1 ]
	then
	    echo "$cmd: missing parent" >&2
	    badopts=1
	else
	    src=$1/current dest=$1
	    shift
	fi
    else
	if [ $# -lt 2 ]
	then
	    echo "$cmd: missing source or backupdir" >&2
	    badopts=1
	else
	    src=$1 dest=$2
	    shift; shift
	fi
    fi
fi

if [ $linkonly ] && [ $# -gt 0 ]
then
    echo "$cmd: --linkonly: extra arguments after parent: $*" >&2
    badopts=1
fi

[ -d "$dest/." ] || { echo "$cmd: backup dir $dest: not a directory" >&2
		      badopts=1
		    }
case "$src" in
    *:*)	# remote - don't check
		;;
    *)		[ -d "$src/."  ] || { echo "$cmd: source dir $src: not a directory" >&2
				      badopts=1
				    }
		;;
esac

[ $badopts ] && { echo "$usage" >&2; exit 2; }

if [ $verbose ]
then  echo=echo
      rsopts="$rsopts -v"
else  echo=:
fi

# use the dest/.hbinclude file if present
hbinclude=$dest/.hbinclude
[ -s "$hbinclude" ] && set -- ${1+"$@"} "--include-from=$hbinclude"

# locate to most recent backup, if any
lastbackup=`cd "$dest" || exit 1; ls -dr [0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]* 2>/dev/null | sed 1q`

today=`daycode`
thisbackup=$today
if [ -d "$dest/$thisbackup/." ]
then
    now=`datecode`
    thisbackup=$now
    if [ -d "$dest/$thisbackup/." ]
    then
	echo "$cmd: $dest/$today and $dest/$now already exist, aborting" >&2
	exit 1
    fi
fi

if [ $mono ]; then delete=
              else delete=--delete
fi

xit=0

if [ -n "$lastbackup" -a -d "$dest/$lastbackup/." ]
then
    $echo "existing backup: linking $lastbackup to $thisbackup ..."
    if not linktree $ltargs "$dest/$lastbackup" "$dest/$thisbackup"
    then
	echo "$cmd: warning: linktree $dest/$lastbackup $dest/$thisbackup fails" >&2
    fi

    if [ $linkonly ]
    then
	echo "$thisbackup" >&3
    else
	$echo "updating $thisbackup from $src ..."
	rsync $rsopts -aH $delete --rsync-path "$rrsync" ${1+"$@"} "$src/." "$dest/$thisbackup/."
	xit=$?
    fi
else
    if [ $linkonly ]
    then
	echo "$cmd: $dest: no subdirectory to link from" >&2
	ls -la "$dest" >&2
	exit 1
    else
	$echo "fresh backup, just copying source ..."
	use_rsync=
	case "$src" in
	    *:*) # probably remote directory - use rsync
		 use_rsync=1
		 ;;
	    *)   # check if they supplied rsync options
		 [ $# = 0 ] || use_rsync=1
		 ;;
	esac
	set -x
	if [ $use_rsync ]
	then
	    mkdir "$dest/$thisbackup" || exit 1
	    rsync $rsopts -aH --rsync-path "$rrsync" ${1+"$@"} "$src/." "$dest/$thisbackup/."
	else
	    cpdir "$src" "$dest/$thisbackup"
	fi
	xit=$?
    fi
fi

if [ "$xit" = 0 -a -z "$linkonly" -a -n "$symlink" ]
then
    ( cd "$dest" || exit 1
      rm -f "$symlink"
      ln -s "$thisbackup" "$symlink"
    )
fi

exit $xit
