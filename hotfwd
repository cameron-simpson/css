#!/bin/sh -u
#
# Fire up port forwarding ssh on demand.
# To be run as handler for tcpio to forward traffic as needed.
#	- Cameron Simpson <cs@zip.com.au> 16jul2005
#

: ${HOSTNAME:=`hostname`}
: ${LOCKDIR:=$HOME/var/locks}
: ${ENVFILES:="/etc/rc.mobile/env.sh $HOME/var/env.sh"}

trace=set-x	## ''
setx='set -x'	## :
pingsleep=10
conn=nc		## tcpio -k

cmd=$0
usage="Usage: $cmd [-l location:rhost:rport] localport fwdsite sshopts..."

badopts=

if [ $# -gt 0 ] && [ "x$1" = x-l ]
then
  locarg=$2
  shift; shift
  case "$locarg" in
    *:*:*)
      location=`expr "x$locarg" : 'x\([^:]*\):.*'`
      rhost=`expr "x$locarg" : 'x[^:]*:\([^:]*\):.*'`
      rport=`expr "x$locarg" : 'x[^:]*:[^:]*:\(.*\)'`
      ;;
    *)echo "$cmd: bad argument to -l: $locarg" >&2
      badopts=1
      ;;
  esac
fi

if [ $# -ge 3 ]
then
  localport=$1
  fwdsite=$2;
  shift; shift
else
  echo "$cmd: expected localport fwdsite sshopts, found: $*" >&2
  badopts=1
fi

[ $badopts ] && { echo "$usage" >&2; exit 2; }

# see if we've been teleported
for envfile in $ENVFILES
do  [ -s "$envfile" ] && . "$envfile"
done

# on site? no tunnel needed
[ -n "$location" ] && [ "x$location" = "x$LOCATION" ] && { $setx; exec $conn "$rhost" "$rport"; }

# getlock [-p pid] name
getlock()
{
  lockpid=$$
  [ $# -gt 0 ] && [ "x$1" = x-p ] && { shift; lockpid=$1; shift; }
  [ $# = 1 ] || { echo "$cmd: Usage: getlock [-p pid] name" >&2; return 2; }
  lockname=$1; shift

  lockdir=$LOCKDIR/hotfwd-$lockname
  while :
  do  $trace mkdir "$lockdir" 2>/dev/null && break
      sleep 1 || return 1
  done
  echo "$lockpid $HOSTNAME" >"$lockdir/info"
}
# freelock name
freelock()
{
  [ $# = 1 ] || { echo "$cmd: Usage: freelock name" >&2; return 2; }
  lockname=$1; shift

  lockdir=$LOCKDIR/hotfwd-$lockname
  [ -d "$lockdir/." ] || return 1
  $trace rm -r "$lockdir"
}
# locked name
locked()
{
  [ $# = 1 ] || { echo "$cmd: Usage: freelock name" >&2; return 2; }
  lockname=$1; shift

  lockdir=$LOCKDIR/hotfwd-$lockname
  [ -d "$lockdir/." ]
}

# short path if tunnel is up
locked "tunnel-$fwdsite" && { $setx; exec $conn localhost "$localport"; }

# do a locking check for the tunnel being active
getlock "test-$fwdsite" || exit 1

locked "tunnel-$fwdsite" \
|| \
  (
    getlock "wait-$fwdsite" || { freelock "test-$fwdsite"
				 exit 1
			       }

    ( exec </dev/null
      oldloc=$LOCATION
      while :
      do    echo . || break
	    sleep $pingsleep || break

	    # see if we've been teleported
	    # end tunnel if so
	    for envfile in $ENVFILES
	    do  [ -s "$envfile" ] && . "$envfile"
	    done
	    [ "x$LOCATION" = "x$oldloc" ] || break
      done
    ) \
    | $trace bgproc -s -i - -l - -p "$HOME/.hotfwd-$fwdsite.pid" ssh "$@" "$fwdsite" 'while read ping; do echo .; done' \
    | \
    ( exec >&2
      if read ack && getlock "tunnel-$fwdsite"
      then
	freelock "wait-$fwdsite"
	while read ack
	do    :
	done
	freelock "tunnel-$fwdsite"
      else
	freelock "wait-$fwdsite"
      fi
    ) \
    &

    # wait for the tunnel to come up or to fail
    while locked "wait-$fwdsite"
    do  sleep 1
    done
  )

freelock "test-$fwdsite"

$setx
exec $conn localhost "$localport"
