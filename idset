#!/bin/sh
#
# Manage a list of identifiers and their attributes.
# Generalised from desktop 01apr2003.
#	- Cameron Simpson <cs@zip.com.au> 18jul2002
#
# Method:
# We keep a directory of numbered subdirs.
# Each subdir has a "name" file (and other attrs as desired).
#

idsetsbase=$HOME/var/idsets
idset=

cmd=$0
usage="Usage: $cmd [-a] -i idset [-l] [[-r] idname [param [value]]]
	-a		List all ids.
	-i idset	Idset.
	-l		Long: list all attributes of ids.
	-r		Remove specified id or parameter."

badopts=

all= aflag=
idname=
rmid=
long=

while :
do
  case $1 in
    -a)	all=1 aflag=$1 ;;
    -i)	idset=$2; shift ;;
    -l)	long=1 ;;
    -r)	rmid=1 ;;
    -?*)echo "$cmd: unrecognised option: $1" >&2; badopts=1 ;;
    --)	shift; break ;;
    *)	break ;;
  esac
  shift
done

if [ -z "$idset" ]
then
    echo "$cmd: -i idset must be supplied" >&2
    badopts=1
else
    case "$idset" in
      /* | ./* | ../* )
	;;
      *)idset=$idsetsbase/$idset
	;;
    esac
fi

if [ $# -gt 0 ]
then
    idname=$1; shift
    if [ $# = 0 ]
    then  param=
    else  param=$1; shift
	  case "$param" in
	    */* | . | ..) echo "$cmd: bad parameter name \"$param\"" >&2
			  badopts=1 ;;
	  esac
	  if [ $# = 0 ]
	  then haspvalue=
	       pvalue=
	  else haspvalue=1
	       pvalue=$1; shift
	       [ $rmid ] && { echo "$cmd: can't use -r with parameter values" >&2
				badopts=1
			      }
	       [ $# = 0 ] || { echo "$cmd: extra arguments: $*" >&2; badopts=1; }
	  fi
    fi
fi

[ $badopts ] && { echo "$usage" >&2; exit 2; }

[ -d "$idset/." ] || needdir "$idset" || exit 1
cd "$idset" || exit 1

# no id or name specified - list stuff
if [ -z "$idname" ]
then
    if [ $rmid ]
    then
	echo "$cmd: -r: missing idname" >&2
	echo "$usage" >&2
	exit 2
    fi

    # list ids
    if [ $long ]
    then
	# list every attribute of every id; output is
	#	id\tattr\tvalue
	for f in [0-9]*/*
	do  [ -s "$f" ] || continue
	    necho "$f	" | tr / '	'; tail -1 "$f"
	done
    else
	# list the name for every id; output is
	#	id\tname
	if [ $all ]
	then  idfilter='s/^\([0-9][0-9]*	\)\./\1/'
	else  idfilter='/^[0-9][0-9]*	\./d'
	fi

	ls -ld *[^0-9]* 2>/dev/null \
	| sed -e 's/^l.* \([^ ][^ ]*\) -> \([0-9][0-9]*\)$/\2	\1/' \
	      -e 't islink' \
	      -e 'd' \
	      -e ':islink' \
	      -e "$idfilter"
    fi

    exit 0
fi

case "$idname" in
    *[^0-9]*)
	# must be a name
	if [ ! -d "$idname/." ]
	then
	    idnum=`mkdirn ''` || exit 1
	    rm -f "$idname"
	    ln -s "$idnum" "$idname" || exit 1
	    echo "$idname" >"$idnum/name"
	else
	    idnum=
	fi
	;;
    *)  # must be a number
	idnum=$idname
	idname=
	[ -d "$idnum/." ] || needdir "$idnum" || exit 1
	;;
esac

# remove param or whole idnum
if [ $rmid ]
then
  if [ -n "$param" ]
  then
      # remove parameter
      if [ -n "$idnum" ]
      then pfile=$idnum/$param
      else pfile=$idname/$param
      fi
      rm -f "$pfile" || exit 1
  else
      # remove whole id
      [ -n "$idnum" ] || idnum=`readsymlink "$idname"` || exit 1
      [ -n "$idname" ] || idname=`tail -1 "$idnum/name" 2>/dev/null`
      [ -n "$idname" ] && { rm -- "$idname" || exit 1; }
      rm -r "$idnum" || exit 1
  fi
  exit 0
fi

# no param? just report id
if [ -z "$param" ]
then
    [ -n "$idnum" ] || idnum=`readsymlink "$idname"` || exit 1
    echo "$idnum"
    exit 0
fi

# parameter - locate the file
if [ -n "$idnum" ]
then pfile=$idnum/$param
else pfile=$idname/$param
fi

# not setting it? report current value if any
if [ -z "$haspvalue" ]
then
  if [ -s "$pfile" ]
  then pvalue=`tail -1 "$pfile" 2>/dev/null`
  else pvalue=
  fi
  echo "$pvalue"
  exit $?
fi

# setting the name has to redo the symlinks
if [ "x$param" = "xname" ]
then
    case "$pvalue" in
      */*)	echo "$cmd: $pvalue: illegal name - slashes forbidden" >&2
		exit 2
		;;
      *[^0-9]*)	;;
      *)	echo "$cmd: $pvalue: illegal name - may not be a number" >&2
		exit 2
		;;
    esac

    [ -n "$idnum"  ] || idnum=`readsymlink "$idname"` || exit 1
    [ -n "$idname" ] || idname=`tail -1 "$idnum/name" 2>/dev/null`

    # adjust name pointer, even if changed
    [ -z "$idname" ] || rm -f "$idname"
    idname=$pvalue
    [ -z "$idname" ] || ln -s "$idnum" "$idname"

    # propagate desktop names to window manager
    if [ -n "$DISPLAY" ]
    then
	idsetbase=`basename "$idset"`
	if [ "x$idsetbase" = xdesktop ]
	then
	    # convert private names to display names
	    case "$pvalue" in
	      .*)	name=`expr "x$pvalue" : 'x.\(.*\)'` ;;
	      *)	name=$pvalue ;;
	    esac
	    fvwmcmd "desktopName $idnum '$idname'" &
	fi
    fi
fi

# store new parameter
echo "$pvalue" >>"$pfile"
