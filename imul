#!/usr/bin/perl -w
#
# Annotate a PNG image file, writing result to stdout.
#	- Cameron Simpson <cs@zip.com.au> 08jan2002
#

use strict qw(vars);

use cs::Misc;
use GD;

sub xval($);
sub yval($);

$::Usage="Usage: $::cmd [-M cgi] srcimage.png < commands
	-M cgi	Emit HTML client-side image map data to call the specified cgi.
";

my $png;
my $mapmode=0;
my $mapcgi;

{ my $badopts = 0;

  if (@ARGV && $ARGV[0] eq '-M')
  { $mapmode=1;
    shift(@ARGV);
    $mapcgi=shift(@ARGV);
  }

  if (! @ARGV)
  { warn "$::cmd: missing srcimage.png\n";
    $badopts=1;
  }
  else
  { $png=shift(@ARGV);
  }

  if (@ARGV)
  { warn "$::cmd: extra arguments: @ARGV\n";
    $badopts=1;
  }

  die $::Usage if $badopts;
}

my $im = GD::Image->newFromPng($png);
($::DX,$::DY)=$im->getBounds();

my $bg = $im->colorAllocate(255,255,255);
my $fg = $im->colorAllocate(0,0,0);
my $border = $im->colorAllocate(0,0,0);
my $font = gdSmallFont();
my $fwidth = $font->width();
my $fheight = $font->height();

my $ok=1;

COMMAND:
while (defined($_=<STDIN>))
{ chomp;
  s/^\s+//;
  s/^#.*//;
  next COMMAND if ! length;

  my $pfx="$::cmd: stdin, line $.: ";

  /^(\S+)\s*/;
  my $op=uc($1);
  $_=$';
  my @args = grep(length,split(/\s+/));

  $pfx="$pfx$op: ";

  if ($op eq FG)
  { if (@args != 3)
    { warn "$pfx: expected 3 arguments (R B G)\n";
      $ok=0;
    }
    else
    { $fg=$im->colorAllocate(@args);
      warn "new FG = $fg";
    }
  }
  elsif ($op eq BG)
  { if (@args != 3)
    { warn "$pfx: expected 3 arguments (R B G)\n";
      $ok=0;
    }
    else
    { $bg=$im->colorAllocate(@args);
    }
  }
  elsif ($op eq BORDER)
  { if (@args != 3)
    { warn "$pfx: expected 3 arguments (R B G)\n";
      $ok=0;
    }
    else
    { $border=$im->colorAllocate(@args);
    }
  }
  elsif ($op eq LABEL)
  { 
    my $hint = 'C';
    if (@args && $args[0] =~ /^-(n|s|e|w|ne|se|nw|sw|c)$/i)
    { $hint=uc($1);
      shift(@args);
    }

    if (@args < 3)
    { warn "$pfx: expected [-hint] X Y LABELTEXT...\n";
      $ok=0;
    }
    else
    { my($x,$y)=(xval(shift(@args)),yval(shift(@args)));
      my $txt = "@args";
      my $dx = length($txt)*$fwidth+4;
      my $dy = $fheight+4;

      if (! $mapmode)
      { $im->filledRectangle($x-2,$y-2,$x+2,$y+2,$border);
      }

      if ($hint eq 'C')	{ $x-=$dx/2; $y-=$dy/2; }
      elsif ($hint eq 'N'){ $x-=$dx/2; $y-=$dy; }
      elsif ($hint eq 'S'){ $x-=$dx/2; }
      elsif ($hint eq 'E'){ $y-=$dy/2; }
      elsif ($hint eq 'W'){ $x-=$dx; $y-=$dy/2; }
      elsif ($hint eq 'NE'){ $y-=$dy; }
      elsif ($hint eq 'SE'){ }
      elsif ($hint eq 'NW'){ $x-=$dx; $y-=$dy; }
      elsif ($hint eq 'SW'){ $x-=$dx; }

      my $x1=$x;
      my $y1=$y;
      my $x2=$x+$dx;
      my $y2=$y+$dy;

      if ($mapmode)
      { my $txtval = "$mapcgi?$txt";
	$txtval =~ s/[^ !-~]|"/sprintf("%%%02x",ord($&))/eg;
        print "<AREA ALT=\"$txt\" COORDS=\"$x1,$y1,$x2,$y2\" HREF=\"$txtval\" SHAPE=\"RECT\"></AREA>\n";
      }
      else
      {
	$im->rectangle($x1,$y1,$x2,$y2,$border);
        $im->filledRectangle($x1+1,$y1+1,$x2-1,$y2-1,$bg);
	$im->string($font,$x1+2,$y1+2,$txt,$fg);
      }
    }
  }
  elsif ($op eq CENTRE)
  { if (@args != 4)
    { warn "$pfx: expected CX CY DX DY\n";
      $ok=0;
    }
    else
    { my($cx,$cy,$dx,$dy)=(xval(shift(@args)),yval(shift(@args)),
			   xval(shift(@args)),yval(shift(@args)));

      my $lx = int($cx - $dx/2 + 0.5);	$lx=0 if $lx < 0;
      my $rx = int($cx + $dx/2 + 0.5);	$rx=$::DX-1 if $rx >= $::DX;

      my $ly = int($cy - $dy/2 + 0.5);	$ly=0 if $ly < 0;
      my $ry = int($cy + $dy/2 + 0.5);	$ry=$::DY-1 if $ry >= $::DY;

      $dx = $rx-$lx+1;
      $dy = $ry-$ly+1;

      my $nim = new GD::Image($dx,$dy);
      $nim->copy($im,0,0,$lx,$ly,$dx,$dy);
      $im=$nim;
      ($::DX,$::DY)=$im->getBounds();
    }
  }
  else
  { warn "$pfx: unknown operation\n";
    $ok=0;
  }
}

die if ! $ok;

if (! $mapmode)
{ print $im->png();
}

exit 0;

sub xval($)
{ my($x)=@_;
  $x=int(0.5+$::DX*$x) if $x =~ /^0\./;
  return $x;
}

sub yval($)
{ my($y)=@_;
  $y=int(0.5+$::DY*$y) if $y =~ /^0\./;
  return $y;
}
