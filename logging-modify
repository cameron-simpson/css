#!/bin/sh -u
#
# Modify something and record the diff.
#	- Cameron Simpson <cs@zip.com.au> 04aug2004
#

: ${TMPDIR:=/tmp}

cmd=`basename "$0"`
usage="Usage: $cmd [args1-opts...] -r report-command [-m message] itemname editcommand [editargs...]
	arg1opts	Used to control passing itemname to editcommand.
	-r report-command Shell command to report on itemname.
			%s within the string will be replaced by quoted itemname.
	-m message	Supply change log line."

badopts=

reportcmd=
arg1opts=-end
message=

while [ $# -gt 0 ]
do
  case $1 in
    -r)	reportcmd=$2; shift ;;
    -m)	message=$2; shift ;;
    -[0-9]*|-end|-discard)
      arg1opts="$arg1opts $1"
      ;;
    --)	shift; break ;;
    -?*)echo "$cmd: unrecognised option: $1" >&2; badopts=1 ;;
    *)	break ;;
  esac
  shift
done

[ -n "$reportcmd" ] || { echo "$cmd: missing report-command" >&2; badopts=1; }

if [ $# = 0 ]
then
  echo "$cmd: missing itemname" >&2
  badopts=1
else
  itemname=$1; shift
  if [ $# = 0 ]
  then
    echo "$cmd: missing editcommand" >&2
    badopts=1
  else
    editcommand=$1; shift
  fi
fi

[ $badopts ] && { echo "$usage" >&2; exit 2; }

tmpf=$TMPDIR/$cmd$$
trap 'rm -f "$tmpf"' 0
trap 'rm -f "$tmpf"; exit 1' 1 2 13 15

[ -n "$message" ] \
|| message=`needbugline` \
|| { echo "$cmd: message rejected" >&2; exit 1; }

case "$reportcmd" in
  *'%'[as]*)
    reportcmd=`reportcmd=$reportcmd q=$itemname perl -e '
		use cs::Shell;
		$q=cs::Shell::quote($ENV{q});
		$a=cs::Shell::quote(@ARGV);
		$ENV{reportcmd} =~ s/\%a/$a/g;
		$ENV{reportcmd} =~ s/\%s/$q/g;
		print $ENV{reportcmd}, "\n";
	       ' -- ${1+"$@"}
	      `
		;;
esac

sh -c "$reportcmd" >"$tmpf" || exit 1

arg1 $arg1opts "$itemname" "$editcommand" ${1+"$@"}
xit=$?

sh -c "$reportcmd" | diffu "$tmpf" - | buglog "$itemname:$editcommand: $message"

exit $xit
