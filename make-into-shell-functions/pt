#!/usr/bin/perl
#
# Print a process tree.
#	- Cameron Simpson <cs@zip.com.au> 25sep2000
#

=head1 NAME

pt - print process tree

=head1 SYNOPSIS

ps [+column...] [ps-options...]

=head1 DESCRIPTION

I<pt>
is a wrapper for the ps(1) command
(any ps(1) command which supports the B<-o> option).
It prints out a listing showing parent-child ralationships
in much the same fashion as the B<-f> option in GNU ps.

=cut

use strict vars;

use cs::Misc;
use cs::Shell;

$::Usage="Usage: $::cmd [+fmt...] [ps-args...]";

$::ARGS='ARGS';
my @PSFields=qw(USER GROUP PID PPID SID TTY  WCHAN VSZ RSS NICE TIME ARGS);
# NB: never suppress PID or PPID
my @PSOptFs =qw(     GROUP          SID TTY  WCHAN         NICE TIME     );
# NB: PrfFmts widths must be at least as wide as the column title
my @PrfFmts =qw(%7s  %7s   %5d %5d  %5d %-5s %11s  %5d %5d %4d  %8s  %s);
my %PrfFmt  =();	for my $i (0..$#PSFields)
			{ $PrfFmt{$PSFields[$i]}=$PrfFmts[$i];
			}
my $Use     ={};	map(($Use->{$_}=1), @PSFields);
			map(($Use->{$_}=0), @PSOptFs);
my $FmtRegExp=join('|',@PSFields);

=head1 OPTIONS

=over 4

=item B<+I<column>>

Include the named I<column> in the output.
I<column> must be
a) a valid format name in the native ps(1)'s B<-o> option
and b) known to I<pt> itself
(because I have a list of printf(3) format strings to match up).

Currently I<pt> knows about:
B<USER GROUP PID PPID SID WCHAN VSZ RSS NICE TIME ARGS>,
and of these
B<GROUP SID TTY WCHAN NICE TIME> are suppressed by default.

=cut

# collect leading +fmt
while (@ARGV && $ARGV[0] =~ /^\+($FmtRegExp)$/oi)
{ my $xtra = uc($1);
  $Use->{$xtra}=1;
  shift(@ARGV);
}

my @PSUseFmts=();
my @PrfUseFmts=();
for (@PSFields)
{ if ($Use->{$_})
  { push(@PSUseFmts, $_);
    push(@PrfUseFmts, $PrfFmt{$_});
  }
}

my @PSUseFmts1=@PSUseFmts;	pop(@PSUseFmts1);
my @PrfHFmts =@PrfUseFmts;	for (@PrfHFmts) { s/[a-z]$/s/; }
my @PrfFmts1=@PrfUseFmts;	pop(@PrfFmts1);

=back

Remaining options are passed to the native ps(1) command.

=cut

if ($::ENV{OS} eq 'darwin') {
  $::ARGS='COMMAND';
  my %macfmt=(ARGS => COMMAND,
              SID  => TPGID);
  @PSUseFmts=map(exists $macfmt{uc($_)} ? $macfmt{uc($_)} : $_, @PSUseFmts);
}
my @args = ('ps',@ARGV,'-o',lc("@PSUseFmts"));
##warn "ps=[@args]";
my $shcmd = cs::Shell::quote(@args);

# collect listing
if (! open(PS," $shcmd |"))
{ die "$::cmd: can't pipe from ps: $!\n";
}

$_=<PS>;	# skip headers
while (<PS>)
{
  chomp;
  s/^\s+//;
  s/\s+$//;
  s/\s+/ /g;

  my @ps = split(/ /,$_,scalar(@PSUseFmts));
  my $P = {};

  for my $f (@PSUseFmts)
  { $P->{$f}=shift(@ps);
  }
  $P->{_CHILDREN}=[];

  $::PS{$P->{PID}}=$P;
}
close(PS);

# compute children
for my $pid (keys %::PS)
{
  my $P = $::PS{$pid};

  if (exists $::PS{$P->{PPID}})
  { my $PP = $::PS{$P->{PPID}};
    push(@{$PP->{_CHILDREN}}, $pid);
  }
}

# print tree
printf("@PrfHFmts\n", @PSUseFmts);

for my $pid (sort { $a <=> $b } keys %::PS)
{ my $P = $::PS{$pid};
  if (! exists $::PS{$P->{PPID}} || $P->{PID} == $P->{PPID})
  { pstree($pid);
  }
}

sub pstree($;$)
{ my($pid,$indent)=@_;
  $indent=0 if ! defined $indent;

  my $P=$::PS{$pid};

  printf("@PrfFmts1 ", map($P->{$_}, @PSUseFmts1));

  if ($indent > 0)
  { if ($indent > 2)
    { print " " x ($indent-2);
    }
    print "\\_ ";
  }
  print $P->{$::ARGS}, "\n";

  for my $subpid (sort { $a <=> $b } @{$P->{_CHILDREN}})
  { pstree($subpid,$indent+2) if $subpid != $pid;
  }
}

=head1 SEE ALSO

ps(1)

=head1 AUTHOR

Cameron Simpson E<lt>cs@zip.com.auE<gt>

=cut
