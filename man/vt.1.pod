=head1 NAME

vt - access vt stores, a Venti-like content addressed storage pool

=head1 SYNOPSIS

  vt [options...] ar tar-options paths...
  vt [options...] cat filerefs...
  vt [options...] catblock [-i] hashcodes...
  vt [options...] listen {-|host:port}
  vt [options...] ls [-R] dirrefs...
  vt [options...] mount special mountpoint
  vt [options...] scan datafile
  vt [options...] pull stores...
  vt [options...] unpack dirrefs...

=head1 DESCRIPTION

I<vt> is a command accessing vt stores in various ways.

A store is a content addressed pool of blocks
with a filesystem abstraction layered on top of it.

=head1 OPTIONS

=over 4

=item B<-C> I<store>

Specify a caching store.
The special name "-" means no caching store should be used.
If B<-C> is not used
the environment variable B<VT_STORE_CACHE> may specify the caching store.

=item B<-M>

Do not use the in-memory caching store.
Default is to place an in-memory cache ahead of the other stores.

=item B<-S> I<store>

Use the specified I<store>.
If B<-S> is not used
the environment variable B<VT_STORE> specifies the store.

=item B<-q>

Quiet; not verbose. Default if stdout is not a tty.

=item B<-v>

Verbose; not quiet. Default it stdout is a tty.

=back

=head1 Store Names

Three of four planned store names are supported at present:

=over 4

=item B</>I<pathname>

A full path to a directory specifies a local filesystem store
in the directory B</>I<pathname>.

=item B<tcp:>[I<host>]B<:>I<port>

A name commencing with B<tcp:> specifies a TCP connection to a vt daemon
listening on the specified I<host> and I<port>.
If I<host> is omitted, B<127.0.0.1> is assumed.

=item B<unix:/>I<pathname>

B<UNIMPLEMENTED>.
A name commencing with B<unix:> specifies the pathname of a UNIX domain
socket on which a vt daemon is listening.

=item B<|>I<shell-command>

A name commencing with shell pipe symbol specifies a proxy command
to connect to a vt daemon. The command string is handed to B</bin/sh>
and should accept vt requests on standard input and write vt responses to
standard output.

=back

=head1 COMMANDS

=over 4

=item B<ar> tar-like-options I<pathnames...>

Archive or retrieve files. Options: B<v> - verbose, B<A> - all
files, not just ones with new size/mtime, B<f> - specify archive
file.

=item B<cat> I<filerefs...>

Emit the data content of the supplied I<filerefs> on the standard output.

=item B<catblock> [B<-i>] I<hashcodes...>

Emit the content of the blocks specified by the supplied I<hashcodes>.
If the B<-i> (indirect) option is supplied,
consider the hashcode to specify an indirect block and emit
the data content of the leaf blocks.

=item B<dump> I<filerefs...>

Do a Block dump of the filerefs.

=item B<init> <dirpath>

Initialise a directory for use as a store, using the GDBM backend.

=item B<listen> {B<->|[I<host>]B<:>I<port>}

Start a vt daemon.

The argument "-" specifies a single use daemon reading vt
requests from its standard input and writing replies to its
standard output, as it might run from inetd(8) or
xinetd(8), or directly from a proxy shell command.

An argument of the form I<host>B<:>I<port> specifies that the
daemon should listen on the specified I<host> address and I<port>
for connections.  if I<host> is omitted it defaults to B<127.0.0.1>.

=item B<ls> [B<-R>] I<dirrefs...>

Do a directory listing of the specified I<dirrefs>.
The B<-R> (recursive) option requests a recurive directory listing.

=item B<mount> I<special> I<mountpoint>

Mount the specified I<special> as on the specified I<mountpoint> directory.
Requires FUSE support.

=item B<pack> I<paths>...

Replace each I<path> with an archive file I<path>B<.vt> referring
to the stored content of I<path>.

=item B<pull> I<stores...>

Update our store with all the available content from the specified I<stores>.
Note that some stores may not list all their content, or any.
This is mostly useful for updating a master store from a store
which has been updated offline.

=item B<scan> I<datafile>

Read the specified I<datafile> as a vt block storage file,
a sequence of compressed data blocks.
Report on standard output
the block hashcode, I<datafile> file offset and compressed size.

=item B<unpack> I<archive>B<.vt>

Unpack the archive file I<archive>B<.vt> as I<archive>.

=back

=head1 EXAMPLES

Run a daemon for a master store:

 vt -C - -S /var/spool/venti listen :9999

Store a directory in that store:

 vt -S tcp:127.0.0.1:9999 vt pack directory-name

Run a local store on a roaming laptop with internet connectivity,
pushing updates back to the master store, keeping a local on-disc cache
in B<~/.venti/store>:

 vt -C ~/.venti/store -M -S '|exec ssh home-server exec nc 127.0.0.1 9999' listen 9999

Use the store on the roaming laptop via the local daemon:

 VT_STORE=tcp:127.0.0.1:9999
 export VT_STORE
 vt command...

Use the remote store and local cache without an intermediate daemon:

 VT_STORE='|exec ssh home-server exec nc 127.0.0.1 9999'
 VT_STORE_CACHE=$HOME/.venti/store
 export VT_STORE VT_STORE_CACHE
 vt command...

This last has more efficient operations at the price of a larger startup
latency (the ssh connection) and the downside that only one command can
use the cache store at a time because it is not a sharable data structure
except via a vt daemon.

=head1 BUGS

The TODO list is very long, see:

 http://csbp.backpackit.com/pub/1356606

The command does not cope well with an incomplete store if it traverses
into the missing portion;
one example is using a cache without the more complete backend master store.

=head1 ENVIRONMENT VARIABLES

B<VT_STORE>, the default store to use.

B<VT_STORE_CACHE>, a default cache store.

=head1 SEE ALSO

The Venti file storage system: http://en.wikipedia.org/wiki/Venti

=head1 AUTHOR

Cameron Simpson E<lt>cs@cskk.id.auE<gt>

