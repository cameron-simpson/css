#!/usr/bin/perl -w
#
# Read ssh host keys from stdin and rewrite the named known_host file
# with the new keys.
#	- Cameron Simpson <cs@zip.com.au> 25jun2003
#

use strict qw(vars);

use cs::Misc;

$::Usage="Usage: $::cmd known_hosts_file localdomains...\n";

my $badopts=0;

if (! @ARGV)
{ warn "$::cmd: missing known_hosts_file\n";
  $badopts=1;
}
else
{ $::KnownHosts=shift(@ARGV);
  if (! @ARGV)
  { warn "$::cmd: missing localdomains\n";
    $badopts=1;
  }
  else
  { @::Domains=@ARGV;
  }
}

die $::Usage if $badopts;

my %keysets;

# load old keys first
if (! open(KNOWN, "< $::KnownHosts\0"))
{ die "$::cmd: open $::KnownHosts: $!\n";
}

my $pretext='';
OLDKEY:
while (defined($_=<KNOWN>))
{ keyline($_,@::Domains);
}
close(KNOWN);

# overwrite old keys with new keys
$pretext='';
NEWKEY:
while (defined($_=<STDIN>))
{ keyline($_,@::Domains);
}
##close(STDIN);

# collate ids by key value

my %keypart2id = ();
KEYTYPE:
for my $keytype (keys %keysets)
{
  my $keys = $keysets{$keytype};

  ID:
  for my $id (keys %$keys)
  {
    warn "collate $keytype $id\n";
    my $keypart = $keys->{$id};
    if (! exists $keypart2id{$keypart})
    { $keypart2id{$keypart}=[];
    }
    push(@{$keypart2id{$keypart}},$id);
  }
}

if (! open(KNOWN, "> $::KnownHosts\0"))
{ die "$::cmd: open $::KnownHosts: $!\n";
}
for my $keypart (sort keys %keypart2id)
{
  print KNOWN join(',',sort @{$keypart2id{$keypart}}), " $keypart\n";
}
close(KNOWN) || die "$::cmd: close $::KnownHosts: $!";

exit 0;

sub keyline
{ my($line,@domains)=@_;

  local($_)=$line;
  chomp;
  s/\s+$//;

  if (! /^([^#\s]\S+)\s+(\S+)\s+/)
  { warn "$::cmd: bad key line: $_";
    return;
  }

  my $ids=$1;
  my $keytype=$2;
  my $keypart="$2 $'";

  if ($keytype =~ /^\d+$/)
  { $keytype='RSA1';
  }

  for my $id (grep(length,split(/,+/, $ids)))
  { warn "note $keytype $id\n";
    $keysets{$keytype}->{$id}=$keypart;
    if ($id =~ /\./)
    { my $iddom=$';
      my $idshort=$`;
      if (grep($_ eq $iddom, @domains))
      { warn "note $keytype $idshort\n";
	$keysets{$keytype}->{$idshort}=$keypart;
      }
    }
    else
    { for my $dom (@domains)
      { warn "note $keytype $id.$dom\n";
	$keysets{$keytype}->{"$id.$dom"}=$keypart;
      }
    }
  }
}
