#!/bin/sh
#
# Create a simple index of every HTML file that should be made from the PODs
# in the current directory.
#	- Cameron Simpson <cs@zip.com.au> 01jul2003
#

indextitle="Index of `pwd`"
dotersefn=1
doauthinfo=1
linkfile=
bykeys=
skipkeys=
usekey=

cmd=$0
usage="Usage: $cmd [+a] [-j] [-k] [+k keywords,...] [-K key] [-l linkfile] [-t title] [podfiles...]
	+a		Don't show author info.
	-j		Skip JavaScript tersify() function.
			Useful if you're making several indices in one file.
	-k		By keywords.
	+k keywords,...	By keywords, skipping the specified categories (comma separated).
	-K key		Select POD files and links with the specified key.
	-l linkfile	Pull plain links from linkfile.
	-t title 	Set title."

badopts=
subopts=

while :
do
  case $1 in
    +a)	doauthinfo= subopts="$subopts $1" ;;
    -j)	dotersefn= ;;
    -k)	bykeys=1 ;;
    +k)	bykeys=1 skipkeys="$skipkeys,$2"; shift ;;
    -K)	usekey=$2; shift ;;
    -l)	linkfile=$2 subopts="$subopts -l $2"; shift ;;
    -t)	title=$2; shift ;;
    --)	shift; break ;;
    -?*)echo "$cmd: unrecognisedoption: $1" >&2
	badopts=1
	;;
    *)	break ;;
  esac
  shift
done

[ $badopts ] && { echo "$usage" >&2; exit 2; }

[ $# = 0 ] && set -- *.pod
[ -n "$usekey" ] && set -- `podsbykey "$usekey" "$@"`

# javascript for "terse" button
if [ $dotersefn ]
then
  cat <<-'X'
	<SCRIPT><!--
	var displaymode;
	function tersify()
	{
	  if (displaymode == "none")
	    displaymode="inline";
	  else
	    displaymode="none";
	  bquotes=document.getElementsByTagName("SPAN");
	  for (i=0; i<bquotes.length; i++)
	  { el=bquotes[i];
	    if (el.className == "overview-para")
	      el.style.display=displaymode;
	  }
	}
	document.write("[&nbsp;<A HREF=\"javascript:tersify()\">Terse</A>&nbsp;]<BR>\n");
	--></SCRIPT>
X
fi

if [ $bykeys ]
then
  xit=0

  awkf="BEGIN {"
  for skipkey in `echo "$skipkeys" | tr , ' '`
  do awkf="$awkf
	skipkey[\"$skipkey\"]=1"
  done
  awkf="$awkf
	}
	{
	  for (k in keys)
	    delete keys[k]
	  split(\$2,keys,\",\")

	  for (k in keys)
	    if (!(key in skipkeys))
	      print key
	}"

  keys=`( podkeywords "$@"
	  [ -n "$linkfile" ] && awk "$awkf" <"$linkfile"
	) | sort -u
       `
  # generate TOC
  for key in $keys
  do
    case ",$skipkeys," in *",$key,"*) continue ;; esac

    label=$key
    defn=`sed -n "s/^$key[ 	]//p" keywords 2>/dev/null`
    echo "<A HREF=\"#key-$key\">$key</A>"
    [ -n "$defn" ] && echo " - $defn"
    echo "<BR>"
  done

  echo "<P>"

  # generate per-keyword TOCs
  for key in $keys
  do
    case ",$skipkeys," in *",$key,"*) continue ;; esac

    label=$key
    defn=`sed -n "s/^$key[ 	]//p" keywords 2>/dev/null`

    echo "<H2><A NAME=\"key-$key\">$key</A>"
    [ -n "$defn" ] && echo " - $defn"
    echo "</H2>"

    ##grep "^$key[      ]" keywords
    "$0" $subopts -j -K "$key" -- "$@" || xit=1
  done
  exit $xit
fi

echo "<UL>"

{
  for podfile
  do
    title=`sed -n 's/^=head1  *//p' "$podfile" | sed 1q`
    [ -n "$title" ] || title="[$podfile]"

    author=`awk '/^=author /{print$2}' "$podfile" | sed 1q`
    [ -n "$author" ] || author=`ls -ld "$podfile" | awk '{print$3}'`

    echo "$podfile $author $title"
  done

  # list HREFs if supplied
  # replace keywords with "HREF" in output
  if [ -n "$linkfile" ]
  then
    if [ -n "$usekey" ]
    then
      # just the specified keyword
      sed 'y/	/ /
	   s/^\([^ ]*\)  *\([^ ]*\)/\1 ,\2,/
	 '"/^[^ ]*  *[^ ]*,$usekey,/!d" <"$linkfile"
    else
      # all HREFs
      tr '	' ' ' <"$linkfile"
    fi \
    | sed 's/^\([^ ]*\)  *[^ ]*/\1 HREF/'
  fi
} \
| sort +2 \
| while read podfile author title
  do
    if [ "x$author" = xHREF ]
    then
	# HREFs come from the $linkfile
	case "$title" in
	  *,*) anchor=`expr "x$title" : 'x\([^,]*\),.*'`
	       tail=`expr "x$title" : 'x[^,]*\(,.*\)'`
	       ;;
	  *)   anchor=$title
	       tail=
	       ;;
	esac
	echo "    <LI><A HREF=\"$podfile\">$anchor</A>$tail"
    else
	htfile=`basename "$podfile" .pod`.html

	## dbuser "$author" FULLNAME
	fullname=
	for auth in `echo "$author" | tr , ' '`
	do
	  [ -n "$fullname" ] && fullname="$fullname, "
	  fn=`{ grep "^$auth:" /etc/passwd || ypmatch "$auth" passwd; } | awk -F: '{print$5}' | sed 's/,.*//'`
	  [ -n "$fn" ] || fn=$auth
	  fullname=$fullname$fn
	done

	modtime=`awk "\$2 == \"$podfile\" { print \$4 }" CVS/Entries`
	[ -n "$modtime" ] || modtime=`ls -ld "$podfile" | awk '{print $6, $7, $8}'`

	echo "    <LI><A HREF=\"$htfile\">$title</A>"
	[ $doauthinfo ] \
	&& echo "        <SMALL>- last change $modtime, author <A HREF=\"mailto:$author\">$fullname</A></SMALL>"

	overview_cache=.cache/overview/`basename "$podfile" .pod`.html
	[ -s "$overview_cache" -a "$overview_cache" -nt "$podfile" ] \
		|| myke "$overview_cache" >&2

	if [ -s "$overview_cache" ]
	then
	  cat "$overview_cache"
	fi
    fi
  done

echo "</UL>"
