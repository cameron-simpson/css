#!/bin/sh -u
#
# Emit cache_peer and never_direct directives for insertion into a squid.conf.
#	- Cameron Simpson <cs@zip.com.au> 26dec2004
#

: ${MKSQUIDPEERS_OPTS:=''}

trace=set-x
fwmode=
dfltport=3128
dflticp=3130
peercfg=$HOME/rc/squid/peers
peerprv=

cmd=$0
usage="Usage: $cmd [-fw] [private=peer] [=][peer:[port][:[icpport]]...
	-fw	Emit suitable firewall control commands instead.
	private=peer Send private URLs via specified peer instead of direct.
	Leading \"=\" implies sibling cache instead of parent.
	Omitted port defaults to \"$dfltport\".
	Omitted icp defaults to \"$dflticp\"."

set -- $MKSQUIDPEERS_OPTS ${1+"$@"}

while [ $# -gt 0 ]
do
  case $1 in
    -fw)	fwmode=1 ;;
    *)		break ;;
  esac
  shift
done

if [ $# -gt 0 ]
then
  case $1 in
    private=*:*)
	peerprv=`expr "$1" : 'private=\(.*\)'` || exit 1
	peerprv_host=`expr "x$peerprv" : 'x\(.*\):.*'` || exit 1
	peerprv_port=`expr "x$peerprv" : 'x.*:\(.*\)'` || exit 1
	##echo "prv=$peerprv ph=$peerprv_host pp=$peerprv_port"
	shift
	;;
  esac
fi

if [ $# = 0 ]
then
  echo "$cmd: no squid peers!" >&2
  exit 1
fi

# the direct no-peer ACLs
pr_direct()
{ sed -n 's/^DIRECT[ \t][ \t]*//p' "$peercfg"
}
# the private peer ACLs
pr_private()
{ sed -n 's/^PRIVATE[ \t][ \t]*//p' "$peercfg"
}
# the per-peer allow ACLs
pr_via()
{ sed -n 's/^VIA[ \t][ \t]*'"$1"'[ \t][ \t]*//p' "$peercfg"
}
pr_other()
{ sed '/^DIRECT[ \t]/d
       /^PRIVATE[ \t]/d
       /^VIA[ \t]/d' "$peercfg"
}
pr_peer_vars()
{
  icpport=
  isparent=1
  for peer
  do
    case $peer in
      =*)	isparent=
		peer=`expr "x$peer" : '..\(.*\)'`
		;;
    esac
    case $peer in
      *:*:*)	icp=`expr "x$peer" : 'x.*:\(.*\)'`
		[ -n "$icp" ] || icp=$dflticp
		peer=`expr "x$peer" : 'x\(.*\):.*'`
		;;
    esac
    case $peer in
      *:*)	port=`expr "x$peer" : 'x.*:\(.*\)' | tr , ' '`
		[ -n "$port" ] || port=$dfltport
		peer=`expr "x$peer" : 'x\(.*\):.*'`
		;;
      *)	port=$dfltport
		;;
    esac
    echo "peer=$peer isparent=$isparent port=$port icpport=$icpport"
  done
}

# recite acl definitions
pr_direct  | awk '{ print "acl DIRECT" NR, $0 }'
pr_private | awk '{ print "acl PRIVATE" NR, $0 }'
pr_peer_vars "$@" \
| while read -r vars
  do
    eval "$vars"
    pr_via "$peer" | awk "{ print \"acl VIA_$peer\" NR, \$0 }"
  done

# control direct access to stuff
if [ -n "$peerprv" ]
then
  echo "cache_peer $peerprv_host parent $peerprv_port 0 weight=0 no-query"
  pr_private | awk '{ print "always_direct deny PRIVATE" NR
		      print "never_direct allow PRIVATE" NR
		    }'
else
  pr_private | awk '{ print "always_direct allow PRIVATE" NR
		      print "never_direct deny PRIVATE" NR
		    }'
fi

# recite main config
pr_other

pr_peer_vars "$@" \
| while read -r vars
  do
    eval "$vars"

    options=weight=2
    if [ $isparent ]
    then  peertype=parent
    else  peertype=sibling
    fi
    [ -n "$icpport" ] || { icpport=0 options="$options no-query"; }
    echo "cache_peer $peer $peertype $port $icpport $options"

    # force per-peer stuff to this peer, overriding PRIVATE
    pr_via "$peer" | awk -v "peer=$peer" '{ print "cache_peer_access", peer, "allow VIA_" peer NR }'

    # prevent PRIVATE stuff using this peer
    pr_private | awk -v "peer=$peer" '{ print "cache_peer_access", peer, "deny PRIVATE" NR }'

    # prevent stuff for specific other peers from using this peer
    for opeer in "$@"
    do
      [ "x$peer" = "x$opeer" ] && continue
      pr_via "$opeer" | awk -v "peer=$peer" -v "opeer=$opeer" '{ print "cache_peer_access", peer, "deny VIA_" opeer NR }'
    done
  done
