#!/bin/sh -u
#
# Emit cache_peer and never_direct directives for insertion into a squid.conf.
#	- Cameron Simpson <cs@zip.com.au> 26dec2004
#

trace=set-x
fwmode=
nodirect=
dfltports='8080 3128'
dflticp=3130
peercfg=$HOME/rc/squid/peers

cmd=$0
usage="Usage: $cmd [-fw] [-nodirect] [=][peer:[ports][:[icpport]]...
	-fw	Emit suitable firewall control commands instead.
	-nodirect Don't try to send anything directly.
	Leading \"=\" implies sibling cache instead of parent.
	Omitted ports default to \"$dfltports\".
	Omitted icp defaults to \"$dflticp\"."

while [ $# -gt 0 ]
do
  case $1 in
    -fw)	fwmode=1 ;;
    -nodirect)	nodirect=1 ;;
    *)		break ;;
  esac
  shift
done

if [ $# = 0 ]
then
  echo "$cmd: no squid peers!" >&2
  exit 0
fi

if [ $nodirect ]
then
  echo always_direct deny all
  echo never_direct allow all
else
  direct_acls=`awk '$1 == "acl" && $2 ~ /^peer_DIRECT/ { print $2; }' "$peercfg" | sort -u`
  for direct in $direct_acls
  do  echo always_direct allow $direct
      echo never_direct deny $direct
  done
fi

for peer
do
  icp=
  ports=
  isparent=1
  case $peer in
    =*)		isparent=
		peer=`expr "x$peer" : '..\(.*\)'`
		;;
  esac
  case $peer in
    *:*:*)	icp=`expr "x$peer" : 'x.*:\(.*\)'`
		[ -n "$icp" ] || icp=$dflticp
		peer=`expr "x$peer" : 'x\(.*\):.*'`
		;;
  esac
  case $peer in
    *:*)	ports=`expr "x$peer" : 'x.*:\(.*\)' | tr , ' '`
		[ -n "$ports" ] || ports=$dfltports
		peer=`expr "x$peer" : 'x\(.*\):.*'`
		;;
    *)		ports=$dfltports
		;;
  esac

  if [ $fwmode ]
  then
    for port in $ports
    do  $trace fw-tcp-out "$port" "$peer"
    done
    [ -n "$icp" ] && $trace fw-udp-out "$icp" "$peer"
    continue
  fi

  for port in $ports
  do
    options=weight=2
    if [ $isparent ]
    then  peertype=parent
    else  peertype=sibling
    fi
    if [ -n "$icp" ]
    then  icpport=$icp
    else  icpport=0 options="$options no-query"
    fi
    echo "cache_peer $peer $peertype $port $icpport $options"
  done
  if [ -s "$peercfg" ]
  then
    if [ -z "$nodirect" ]
    then
      for direct in $direct_acls
      do echo cache_peer_access $peer deny $direct
      done
    fi
    for other in `awk '$1 == "acl" && !($2 ~ /^peer_DIRECT/) { print $2 }' "$peercfg" | sort -u`
    do
      echo "cache_peer_access $peer deny $other"
    done
    echo cache_peer_access $peer allow all
  fi
done
