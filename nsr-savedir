#!/bin/sh -u
#
# =head1 NAME
#
# nsr-savedir - save a particular directory path using Legato Networker
#
# =head1 SYNOPSIS
#
# nsr-savedir [-a] [B<-n>] [B<-x>] [B<-g> I<savegroup>] [B<-l> I<logfile>] [B<-s> I<server>] I<dirs>...
#
# =head1 DESCRIPTION
#
# I<nsr-savedir> invokes Networker's save(1) command
# for the specified directories.
# This is useful for large areas where the default
# "save the whole volume" simply takes too long
# or where you want to backup some new data immediately.
#

full=
doit=1
trace=set-x
savegroup=
logfile=.nsr-savedir.log
server=
masq=`hostname` || exit 1
saveopts='-LL -B -E'
pool=Staging
archivemode=
browse_time=
reten_time=

cmd=`basename "$0"` || cmd=$0
usage="Usage: $cmd [-a] [-n] [-x] [-g savegroup] [-l logfile] [-s server] dirs...
	-a		Backup all files - do not get a timestamp from the
			logfile or honour .nsr directive files.
	-A		Archive mode. After a successful save write a .nsr
			file to prevent Networker backing up this content again.
			Does not imply -a.
	-b pool		Specify the tape pool to use. Default: $pool
	-g savegroup	Specify the savegroup to use.
	-l logfile	Specify the logfile to store timestamps.
			A non-absolute path will be relative to each backup
			directory. Default: $logfile in each directory.
			An empty logfile name suppresses this facility.
	-n		No action. Passed to save(1) to simply report planned
			backup.
	-s server	Specify the Legato server to use.
	-w browse_time	Specify the browse time for this save set.
	-x		Trace - report save(1) commands issued.
	-y reten_time	Specify the retention time for this save set."

badopts=

# =head1 OPTIONS
#
# =over 4
#

badopts=

while [ $# -gt 0 ]
do
  case $1 in

    # =item B<-a>
    #
    # Backup all files / full dump.
    # Do not do an incremental backup using a timestamp from the I<logfile>;
    # also passes the B<-i> (ignore B<.nsr> directive files) to save(1).
    #
    -a)	full=1 saveopts="$saveopts -i" ;;

    # =item B<-A>
    #
    # Archive mode. After a successful save write a B<.nsr> file
    # containing the directive "B<+skip: .?* *>"
    # to prevent Networker backing up this content again.
    # If the archived path is not a directory,
    # append "B<+skip:> I<base>" to the B<.nsr> file in the enclosing directory,
    # where I<base> is the basename of the path.
    #
    # B<Note>: this option does not imply the B<-a> option.
    #
    -A)	archivemode=1 ;;

    # =item B<-b> I<pool>
    #
    # Specify the pool to use.
    #
    -b)	pool=$2; shift ;;

    # =item B<-g> I<savegroup>
    #
    # Specify savegroup.
    #
    -g)	savegroup=$2; shift ;;

    # =item B<-l> I<logfile>
    #
    # Specify the I<logfile> in which to store backup timestamps.
    #
    -l)	logfile=$2; shift ;;

    # =item B<-n>
    #
    # No action. Passed to save(1); reports proposed backup.
    #
    -n)	doit= ;;

    # =item B<-s> I<server>
    #
    # Specify the Legato server to use.
    #
    -s)	server=$2; shift ;;

    # =item B<-w> I<browse_time>
    #
    # Specify the browse time for this save set. See save(1).
    # It should not contain whitespace.
    #
    -w)	browse_time=$2; shift ;;

    # =item B<-x>
    #
    # Trace execution of save commands.
    #
    -x)	trace=set-x ;;

    # =item B<-y> I<reten_time>
    #
    # Specify the retention time for this save set. See save(1).
    # It should not contain whitespace.
    #
    -y)	reten_time=$2; shift ;;

    --)	shift; break ;;
    -?*)echo "$cmd: unrecognised option: $1" >&2
	badopts=1
	;;
    *)	break ;;
  esac
  shift
done

# =back
#

if [ $# = 0 ]
then
  echo "$cmd: missing dirs" >&2
  badopts=1
fi

[ $badopts ] && { echo "$usage" >&2; exit 2; }

xit=0

for dir
do
  case "$logfile" in
    '')	dlogfile=
    	;;
    /*)	dlogfile=$logfile
	;;
    *)  [ -d "$dir" ] || { echo "$cmd: $dir: not a directory, can't put logfile inside" >&2
			   xit=1
			   continue
			 }
	dlogfile=$dir/$logfile
	;;
  esac

  if [ $full ] || [ -z "$flogfile" ]
  then
    lastdump=
  else
    lastdump=`awk -v "dir=$dir" '$2 == dir	{ lastdump=$1 }
				 END		{ if (lastdump) print lastdump }' "$dlogfile"`
  fi

  thisdump=`now` || { xit=1; continue; }

  if 
    ( set -x
      set save $saveopts
      [ $doit           ] || set -- "$@" -n
      [ -n "$pool"      ] && set -- "$@" -b "$pool"
      [ -n "$lastdump"  ] && set -- "$@" -t "$lastdump"
      [ -n "$server"    ] && set -- "$@" -s "$server"
      [ -n "$savegroup" ] && set -- "$@" -g "$savegroup"
      [ -n "$browse_time" ] && set -- "$@" -w "$browse_time"
      [ -n "$reten_time" ] && set -- "$@" -y "$reten_time"
      printf '%s\n' "args=[$*]" >&2
      exec $trace "$@" -m "$masq" -W 78 "$dir"
    )
  then
    if [ $doit ]
    then
      [ -n "$dlogfile" ] && echo "$thisdump $dir" >>"$dlogfile"
      if [ $archivemode ]
      then
        if [ -d "$dir" ]
	then
	  echo '+skip: .?* *' >"$dir/.nsr"
	else
	  dirbase=`basename "$dir"`
	  dirdir=`dirname "$dir"`
	  echo "+skip: $dirbase" >>"$dirdir/.nsr"
	fi
      fi
    fi
  else
    xit=1
  fi
  break
done

exit $xit

# =head1 SEE ALSO
#
# save(1)
#
# =head1 CREDITS
#
# Siobhan Ellis for the per-directory save idea and the archive mode suggestion.
#
# =head1 AUTHOR
#
# Cameron Simpson E<lt>cs@zip.com.auE<gt>
#
