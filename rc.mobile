#!/bin/sh
#
# rc.mobile	Site specific network config.
#
# For a roving laptop.
# Some more doco here:
#	http://www.cskk.ezoshosting.com/cs/css/#rc.mobile
# - Cameron Simpson <cs@zip.com.au>
#

cmd=$0
usage="Usage: $cmd [-n] {start|stop|restart}"

trace=set-x
[ "x$1" = x-n ] && { trace=echo; shift; }

LC_ALL=C
PATH=$PATH:/sbin:/opt/css/bin
export PATH LC_ALL

# See how we were called.
mode=$1; shift

case "$mode" in
  start)action=up
	int=1
        ;;
  stop) action=down
        ;;
  restart)
	$trace "$cmd" stop && $trace "$cmd" start ${1+"$@"}
	exit $?
	;;
  *)	echo "$usage" >&2
        exit 1
esac

where=${SYSTEMID:-home}
cf=/etc/rc.mobile.conf

badopts=
while :
do  case $1 in
	-i)   int=1 ;;
	-a)   action=$2; shift ;;
	-f)   cf=$2; shift ;;
	-h)   HOST=$2; shift ;;
	--)   shift; break ;;
	-?*)  echo "$cmd: unrecognised option: $1" >&2
	      badopts=1
	      ;;
	*)    break
	      ;;
    esac
    shift
done

[ $badopts ] && { echo "$usage" >&2; exit 2; }

[ -s "$cf" ] || { echo "$cmd: missing config file $cf" >&2; exit 1; }

# we want the short hostname
[ -n "$HOST" ] || { HOST=${HOST:-`hostname`}
		    case $HOST in
			*.*) HOST=`expr "x$HOST" : 'x\([^.]*\).*'` ;;
		    esac
		  }
export HOST

locations=`sed -n -e '/^#/d' -e 's/^\\[\\([a-z].*\\)\\]$/\\1/p' "$cf"`

# ask for info if interactive
if [ $int ]
then
    echo "$cmd - bring up interface according to location"
    echo -n "I know ["$locations"] Where am I [$where]? "
    read iwhere || { echo; exit 1; }
    [ -n "$iwhere" ] && where=$iwhere
fi

doclause()
{
  for clause
  do
    winclause "$cf" "$clause" \
    | sed -e 'y/	/ /' \
	  -e 's/^  *//' \
	  -e '/^#/d' \
	  -e '/^$/d' \
    | while read op etc
      do
	if [ "x$op" = xuse ]
	then
	  doclause $etc
	else
	  echo "$op $etc"
	fi
      done
  done
}

doops()
{
  while read op etc
  do
    case "$op" in
      [a-zA-Z]*=*)
	      eval "$op"
	      ;;
      /*/)    to=`expr "x$op" : 'x\(.*\)/'`
	      from=
	      for d in $from.$where $from.DFLT
	      do  [ -d "$d/." ] && { from=$d; break; }
	      done
	      if [ -n "$from" ]
	      then
		$trace rsync -aH "$from/." "$to/."
	      else
		echo "no master dir @$where for $to" >&2
	      fi
	      ;;
      /*)     to=$op
	      from=
	      for f in $to.$where $to.DFLT
	      do  [ -f "$f" ] && { from=$f; break; }
	      done
	      if [ -n "$from" ]
	      then
		$trace cp -p "$from" "$to"
	      else
		echo "no master file @$where for $to" >&2
	      fi
	      ;;
      \!*)	shcmd=`expr "x$op $etc" : 'x.\(.*\)'`
	      $trace /bin/sh -c "$shcmd"
	      ;;
      svc)    bgsvc $etc
	      ;;
      need)   needsvc $etc
	      ;;
      *)      echo "$cmd: unrecognised operator \"$op\": $op $etc" >&2
	      ;;
    esac
  done
}

bgsvc()
{
  for bgsvc
  do
    bgrc=/etc/init.d/$bgsvc
    if [ -s "$bgrc" ]
    then
      $trace "$bgrc" "$mode" &
      eval "pid_$bgsvc=$!"
    else
      echo "$cmd: no init file named $bgrc" >&2
    fi
  done
}

needsvc()
{
  for needsvc
  do
    eval "nsvcpid=\$pid_$needsvc"
    [ -n "$nsvcpid" ] || bgsvc "$needsvc"
    wait4svc "$needsvc" 
  done
}
  
wait4svc()
{
  for waitsvc
  do  eval "wsvcpid=\$pid_$waitsvc"
      if [ -n "$wsvcpid" ]
      then  echo "Wait for $waitsvc ..."
	    wait4pid "$wsvcpid"
      fi
  done
}

wait4pid()
{
  for waitpid
  do
    while kill -0 "$waitpid" 2>/dev/null
    do  sleep 1
    done
  done
}

doclause GLOBAL "$where" | doops
