#!/bin/sh
#
# rc.mobile	Site specific network config.
#
# For a roving laptop.
# Some more doco here:
#	http://www.cskk.ezoshosting.com/cs/css/#rc.mobile
# - Cameron Simpson <cs@zip.com.au>
#
# =head1 NAME
#
# rc.mobile - run system startup scripts in various combinations for mobile hosts
#
# =head1 SYNOPSIS
#
# rc.mobile {start|stop|restart} [-n] [-y] [-s] [-S] [-f config] [-E envfile] [@where]
#
# =head1 DESCRIPTION
#
# I<rc.mobile> runs startup scripts
# for a machine that may startup in various locations,
# and therefore require multiple configurations and combinations of services.
# There is a little discussion of its installation here:
#
#	http://www.cskk.ezoshosting.com/cs/css/rc.mobile.html
#
# In addition to choosing different configurations based on location or circumstance,
# I<rc.mobile> also starts the services in parallel,
# yielding significantly faster boot times.
# There are facilities for specifying that one service depends on another
# and for running arbitrary shell commands
# for actions not encapsulated in standard startup files.
# In a sense
# the location clauses represent a generalisation of the idea of run levels.
#

where=${SYSTEMID:-home}
cf=/etc/rc.mobile.conf
envfile=
async=1
asyncall=1
trace=set-x
noaction=
int=1
raw=

cmd=$0
usage="Usage: $cmd {start|stop|restart} [options...] [@where]
	-r		Raw. Run only the named clause.
	-n		No action. Recite proposed actions.
	-y		Yes: proceed with the default location without asking.
	-s		Synchronous. Default: asynchronous.
	-S		Really synchronous. Default: asynchronous.
	-E envfile	File in which to record environment values.
	-f config	Specify config file.
			Default: $cf
	@where		Default location. Falls back to \$SYSTEMID or \"home\".
			Default: $where"

LC_ALL=C
PATH=$PATH:/sbin:/opt/css/bin
export PATH LC_ALL

# See how we were called.
mode=$1; shift

# =head1 ACTIONS
#
# =over 4
#
case "$mode" in
  # =item start
  #
  # Run the startup actions.
  # 
  start)action=up
	int=1
        ;;
  # =item stop
  #
  # Unimplemented.
  #
  stop) action=down
	echo "$cmd: action $mode unsupported" >&2
	exit 2
        ;;
  # =item restart
  #
  # Run B<rc.mobile stop> and then B<rc.mobile start>.
  #
  restart)
	$trace "$cmd" stop && $trace "$cmd" start ${1+"$@"}
	exit $?
	;;
  *)	echo "$cmd: unsupported action \"$mode\"" >&2
	echo "$usage" >&2
        exit 1
esac

# =back
#
# =head1 OPTIONS
#
# =over 4
#

badopts=
while :
do  case $1 in
	# =item B<-f> I<config>
	#
	# Specify a configuration file to use instead of B</etc/rc.mobile.conf>.
	#
	-f)   cf=$2; shift ;;
	# =item B<-n>
	#
	# No action.
	# Recite proposed actions.
	# handy for debugging configuration file changes.
	#
	-n)   trace=echo noaction=1 ;;
	# =item B<-y>
	#
	# Yes.
	# Proceed with the default location without asking.
	#
	-y)   int= ;;
	# =item B<-r>
	#
	# Raw.
	# Run only the named clauses.
	# The trailing clause name is now mandatory and need not start with an B<@>.
	# 
	-r)   raw=1 ;;
	#
	# =item B<-s>
	#
	# Synchronous.
	# Wait for all dispatched actions to complete before exiting B<rc.mobile>.
	# Normally the script will quit after everything is dispatched
	# so as to have the system offer a login prompt as soon as possible.
	# Some users find the completion messages appearing after the
	# login prompt annoying, thus this option.
	#
	-s)   async= ;;
	# =item B<-S>
	#
	# Really synchronous.
	# In addition to waiting before exit,
	# wait for each service script to complete.
	# This pretty much obviates the speed advantages of B<rc.mobile>
	# but might be useful during debugging.
	#
	-S)   async= asyncall= ;;
	# =item B<-E> I<envfile>
	#
	# Save environment settings to the file I<envfile>.
	# Configuration lines of the form "I<var>B<=>I<value>"
	# set environment variables
	# available to further startup actions issued by B<rc.mobile>.
	# If the B<-E> option is supplied
	# a shell script named I<envfile> is created containing
	# these settings.
	# For example, the option
	#
	#	-E /etc/profile.d/rc.mobile.sh
	#
	# might be used to stash these settings where (on RedHat machines)
	# login shells will automatically use them.
	# Further, the first line of the file defines a shell function called
	# B<setenv> that acts like the csh directive of that name,
	# and the settings are then performed with that function.
	# Therefore, the C</etc/login> file may obtain the same
	# startup settings with the simple incantation:
	#
	#	eval `sed 1d /etc/profile.d/rc.mobile.sh`
	#
	# suitably adjusted to match your B<-E> option setting,
	# thus performing this function for csh(1) and tcsh(1) users.
	#
	# In L<Startup Mode> this file is truncated before the startup.
	# In L<Raw Mode> this file is simply extended,
	# this allowing the raw run to override previous values,
	# typically wanted by @nw(1cs).
	# 
	-E)   envfile=$2; shift ;;
	--)   shift; break ;;
	-?*)  echo "$cmd: unrecognised option: $1" >&2
	      badopts=1
	      ;;
	*)    break
	      ;;
    esac
    shift
done

# =back
#

if [ $raw ]
then
    int=
    async=
    if [ $# = 0 ]
    then
      echo "$cmd: missing clause names" >&2
      echo "I know the following clauses:" >&2
      sed -n 's/^\[\(.*\)\]$/	\1/p' "$cf" | sort >&2
      badopts=1
    else
      rawclauses=$*
    fi
else
    # =head1 LOCATION
    #
    # If the optional argument B<@I<where>> is supplied after the options above,
    # use that as the default location.
    #
    case "$1" in
      @?*)
	where=`expr "x$1" : 'x@\(.*\)'`
	shift
	;;
    esac
    [ $# = 0 ] || { echo "$cmd: extra arguments after @where: $*" >&2; badopts=1; }
fi

[ -s "$cf" ] || { echo "$cmd: missing config file $cf" >&2
		  badopts=1
		}

[ $badopts ] && { echo "$usage" >&2; exit 2; }

setenv()
{
  setenv_var=$1
  setenv_val=$2
  eval "$setenv_var=\$setenv_val; export $setenv_var"
  if [ -n "$envfile" ]
  then
      # make sure the setenv function is present
      [ -s "$envfile" ] \
      || echo 'setenv(){ eval "$1=\$2; export $1"; }' >>"$envfile" \
      || { echo "$cmd: can't write to $envfile" >&2
	   envfile=
	 }

      case "$setenv_val" in
	  *\'*) setenv_val=`echo "$setenv_val" | sed "s/'/'\\\\\\\\''/g"` ;;
      esac
      echo "setenv $setenv_var '$setenv_val';" >>"$envfile"
  fi
}

# list a clause with syntax cleaning
listclause()
{
  winclause "$cf" "$1" \
  | sed -e 'y/	/ /' \
	-e 's/^  *//' \
	-e '/^#/d' \
	-e '/^$/d'
}

# list a clause as a set of shell-safe strings for evaluation
shqclause()
{
  listclause "$1" \
  | sed -e "s/'/'\\\\''/g" -e "s/.*/'&'/" \
  | tr '\012' ' '
}

# =head1 CONFIGURATION FILE FORMAT
#
# The configuration file
# resembles a Windows ".ini" file.
# Blank lines and lines commencing with an octothorpe (`#')
# are considered comments and discarded.
#
# The remainder consists of clauses marked out by lines of the form:
#
#	[name]
#
# where I<name> is the clause name.
#
# Clauses contain the following types of lines:
#
# =over 4
#
runqueue()
{
  while [ $# -gt 0 ]
  do
    opline=$1; shift
    echo "POPQUEUE $opline" >&2
    case "$opline" in
	*' '*)	op=` expr "x$opline" : 'x\([^ ]*\) .*'`
		etc=`expr "x$opline" : 'x[^ ]*  *\(.*\)'`
		;;
	*)	op=$opline etc= ;;
    esac
    case "$op" in
      # =item B<use> I<clauses...>
      #
      # Process the named I<clauses> in order at this point.
      #
      use)
	[ $noaction ] && echo "$opline"
	use1=`   expr "x$etc" : 'x\([^ ]*\).*'`
	if [ -n "$use1" ]
	then
	  usemore=`expr "x$etc" : 'x[^ ]* *\(.*\)'`
	  if [ -n "$usemore" ]
	  then
	    ##echo "PUSHQUEUE USE $usemore"
	    set -- "use $usemore" ${1+"$@"}
	  fi
	  eval "use1=$use1"
	  shuse=`shqclause "$use1"`
	  ##echo "PUSHQUEUE $shuse"
	  eval "set -- $shuse "'${1+"$@"}'
	  ##echo "use $use1:" >&2
	  ##for _arg; do echo "  arg: [$_arg]" >&2; done
	fi
	;;

      # =item I<var>B<=>I<value>
      #
      # Set the environment variable named I<var> to the value I<value>.
      # If the B<-E> option was used, also record the value in I<envfile>.
      #
      [a-zA-Z]*=*)
	var=`expr "$op" : '\([^=]*\)=.*'`
	eval "$opline"
	export $var
	eval "val=\$$var"
	setenv "$var" "$val"
	;;

      # =item /path/to/dir/ [template-dir]
      #
      # Prepare the specified directory from a template.
      # If a template is not specified,
      # the template is taken to be the directory named
      # B</path/to/dir.>I<where> or B</path/to/dir.DFLT>
      # if the former is not present.
      # If neither is present, the target directory is unchanged.
      # Otherwise, the directory is made identical to the template
      # with rsync(1).
      #
      /*/)
	: ${where:=$LOCATION}
	: ${where:=$RC_MOBILE_WHERE}

	to=`expr "x$op" : 'x\(.*\)/'`
	tplt=$etc
	[ -n "$tplt" ] || tplt=$to

	from=
	for d in "$tplt.$where" "$tplt.DFLT" "$tplt"
	do  [ "x$d" = "x$to" ] && continue
	    [ -d "$d/." ] && { from=$d; break; }
	done

	if [ -n "$from" ]
	then
	  $trace rsync -aH "$from/." "$to/."
	else
	  echo "$cmd: no master dir @$where for $to" >&2
	fi
	;;

      # =item /path/to/file [template-file]
      #
      # Prepare the specified file from a template.
      # Files and directories are distinguished
      # by the directory's trailing slash (`/').
      # If not specified,
      # the template is the file named
      # B</path/to/file.>I<where> or B</path/to/file.DFLT>
      # if the former is not present.
      # If neither is present, the target file is unchanged.
      # Otherwise, the file is made identical to the template with cp(1).
      #
      /*)
	: ${where:=$LOCATION}
	: ${where:=$RC_MOBILE_WHERE}

	to=$op
	tplt=$etc
	[ -n "$tplt" ] || tplt=$to

	from=
	for f in "$tplt.$where" "$tplt.DFLT" "$tplt"
	do  [ "x$f" = "x$to" ] && continue
	    [ -f "$f" ] && { from=$f; break; }
	done

	if [ -n "$from" ]
	then
	  $trace cp -p "$from" "$to"
	else
	  echo "$cmd: no master file @$where for $to" >&2
	fi
	;;

      # =item ! I<shell command...>
      #
      # The specified I<shell command> is run synchronously.
      #
      \!*)
	shcmd=`expr "x$opline" : 'x.\(.*\)'`
	$trace /bin/sh -c "$shcmd"
	;;

      # =item svc I<service...>
      #
      # The named I<service>s are started asynchronously.
      # They are dispatched by running the command:
      #
      #	/etc/init.d/service start
      #
      # in the background.
      #
      # Note that I<service> names must be identifiers
      # because of their use as part of shell variables
      # internally to B<rc.mobile>.
      # For example, the names B<foo>, B<foo_bah> and B<foo123> are usable
      # while the name B<foo-bah> is not because of the dash.
      # It is possible you may need to rename some startup scripts
      # to accomodate this,
      # or simply make symbolic links of suitable names;
      # I have not yet needed to do this myself.
      #
      svc)
	bgsvc $etc
	;;

      # =item need I<service...>
      #
      # Require the named I<service>s' startup scripts
      # to have completed before proceeding.
      # If any of the I<service>s have not been dispatched,
      # dispatch them as for the B<svc> directive
      # and then wait for them.
      #
      need)
	needsvc $etc
	;;

      *)
	echo "$cmd: unrecognised operator \"$op\": $opline" >&2
	;;

    esac
    # =back
    #
  done
}

bgsvc()
{
  for bgsvc
  do
    bgrc=/etc/init.d/$bgsvc
    if [ -s "$bgrc" ]
    then
      $trace "$bgrc" "$mode" &
      eval "pid_$bgsvc=$!"
      [ $asyncall ] || wait4pid $!
    else
      echo "$cmd: no init file named $bgrc" >&2
    fi
  done
}

needsvc()
{
  # dispatch undispatched services
  for needsvc
  do
    eval "nsvcpid=\$pid_$needsvc"
    [ -n "$nsvcpid" ] || bgsvc "$needsvc"
  done

  # wait for all the services
  for needsvc
  do
    wait4svc "$needsvc" 
  done
}
  
wait4svc()
{
  for waitsvc
  do  eval "wsvcpid=\$pid_$waitsvc"
      if [ -n "$wsvcpid" ]
      then  echo "Wait for $waitsvc ..."
	    wait4pid "$wsvcpid"
      fi
  done
}

wait4pid()
{
  for waitpid
  do
    while kill -0 "$waitpid" 2>/dev/null
    do  sleep 1
    done
  done
}

# =head1 OPERATION
#
if [ $raw ]
then
    # =head2 Raw Mode
    #
    # In raw mode
    # just the specified clause and its subsidiaries are run.
    #
    where=
    set -- "use $rawclauses"
else
    # =head2 Startup Mode
    #
    # In startup (normal) mode
    # B<rc.mobile> asks the user where it it running
    # (unless the B<-y> or B<-r> option is supplied).
    # The locations offered
    # are taken from the clauses whose names commence with an "@",
    # discarding the "@".
    # The default location comes from the environment variable B<$SYSTEMID>,
    # defaulting to "B<home>" if this is not set.
    #
    # After obtaining the current location
    # (referred to as "I<where>" below)
    # the clauses B<GLOBAL>, I<where> and B<FINAL> are run in that order.
    #
    locations=`sed -n 's/^\\[@\\([a-z].*\\)\\]$/\\1/p' "$cf" | sort | tr '\012' ' '`
    if [ $int ]
    then
	echo "$cmd - bring up interface according to location"
	while echo "I know [$locations]"
	      echo -n "Where am I [$where]? "
	      read iwhere || { echo; exit 1; }
	do
	  [ -z "$iwhere" ] && iwhere=$where
	  case " $locations " in
	    *" $iwhere "*)
	      where=$iwhere
	      break
	      ;;
	    *)echo "$cmd: unknown location \"$iwhere\""
	      ;;
	  esac
	done
    fi

    # truncate env file for fresh starts
    [ -z "$envfile" ] || >"$envfile"

    # make available to subprocesses and user environment
    setenv RC_MOBILE_WHERE "$where"

    set -- "use GLOBAL @$where FINAL"
fi

runqueue "$@"
[ $async ] || wait

# =head1 FILES
#
# B</etc/rc.mobile.conf>, the default configuration file
#
# =head1 ENVIRONMENT
#
# B<$SYSTEMID>, the default boot location
#
# =head1 SEE ALSO
#
# nw@(1cs), rsync(1), cp(1), winclause(1cs)
#
# =head1 AUTHOR
#
# Cameron Simpson E<lt>cs@zip.com.auE<gt> July 2003
#
