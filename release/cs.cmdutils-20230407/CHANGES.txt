lib/python/cs/cmdutils.py: cs.cmdutils: BaseCOmmand: use @uses_runstate when preparing the command, store as self.options.runstate; cascading adjustments elsewhere
lib/python/cs/cmdutils.py: merge default ==> vt
lib/python/cs/cmdutils.py: merge default => vt
lib/python/cs/cmdutils.py: cs.cmdutils: make BaseCommandOptions a data class, upgrade subclasses elsewhere
lib/python/cs/cmdutils.py: cs.cmdutils: use cs.typingutils.subtype to define a BaseCommandSubType
lib/python/cs/cmdutils.py: cs.cmdutils: drop any pretence at python 2 support, we're long past that; make _BaseSubCommand an abstract class
lib/python/cs/cmdutils.py: cs.cmdutils: BaseCommand: new cmdloop method to run a cmd.Cmd instance to run subcommand interactively, rename shell to repl, add cmd_shell to call cmdloop()
lib/python/cs/cmdutils.py: cs.cmdutils: tidy imports, add some type annotations, tweak comment and docstring
lib/python/cs/cmdutils.py: cs.cmdutils: BaseCommand.__init__: in addition to "help", also ignore "shell" when checking for subcommands
lib/python/cs/cmdutils.py: cs.*: drop BaseCommand.apply_defaults in favour of the Options dataclass
lib/python/cs/cmdutils.py: cs.cmdutils: BaseCommand: do setup_logging before initiating the Options instance, expunge the last of the apply_default() method
lib/python/cs/cmdutils.py: cs.cmdutils: BaseCommand.run_context: minor tidy
lib/python/cs/cmdutils.py: cs.cmdutils: _ClassSubCommand.__call__: merge cmd into the command options cleanly
lib/python/cs/cmdutils.py: cs.cmdutils: DISTINFO: install_requires + cs.typingutils, typeguard
