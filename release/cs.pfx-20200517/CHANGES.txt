lib/python/cs/pfx.py: cs.pfx: docstring tweak
lib/python/cs/pfx.py: cs.pfx: Pfx.__exit__: pull out prefixify and prefixify_exception and expose as class methods, also making __exit__ far more understandable
lib/python/cs/pfx.py: cs.pfx: fix calls to prefixify and prefixify_exception
lib/python/cs/pfx.py: cs.pfx: pull old @pfx decorator from the top of the module, insert below the Pfx class and accomodate generators and ordinary functions automatically
lib/python/cs/pfx.py: cs.Pfx: @pfx_method: decorator for class methods, not yet supporting generators
lib/python/cs/pfx.py: cs.pfx: @pfx: tidy arguments, improve docstring
lib/python/cs/pfx.py: cs.pfx: XP: rename internal variable from "file" to "f", reduces confusion
lib/python/cs/pfx.py: cs.pfx: drop @pfxtag, now supplanted by @pfx(..,message=tag)
lib/python/cs/pfx.py: cs.pfx: docstring updates
lib/python/cs/pfx.py: cs.pfx: autoformat
lib/python/cs/pfx.py: cs.pfx: renaem variable to make linter happy
lib/python/cs/pfx.py: cs.pfx: @pfx: do not mangle the original function docstring, breaks auto documentationand is anyway confusing
lib/python/cs/pfx.py: cs.pfx: @pfx_method: set the wrapper function name to the original function name, otherwise @locked_property chooses the wrong attribute name
lib/python/cs/pfx.py: cs.pfx,cs.logutils: wrap logging call wrapers in @logging_wrapper
lib/python/cs/pfx.py: merge default ==> vt
lib/python/cs/pfx.py: cs.pfx: @pfx: use cs.py.func.funcname to obtain the name of the wrapped callable
lib/python/cs/pfx.py: merge default ==> vt
lib/python/cs/pfx.py: merge default ==> vt
