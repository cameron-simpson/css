#!/bin/sh -u
#
# Maintain mirrors of rsync repositories.
#	- Cameron Simpson <cs@zip.com.au> 25aug2000
#
# =head1 NAME
#
# rsmirror - maintain a local mirror of portions of rsync/http/ftp servers
#
# =head1 SYNOPSIS
#
# B<rsmirror> [B<-d> I<dir>] [B<-f> I<config>] [B<-n>] [B<-P>] [B<-v>] [B<-t> I<secs>] [[I<server>]B<::>I<root>...]
#
# =head1 DESCRIPTION
#
# I<rsmirror> reads a configuration file
# to obtain a list of rsync servers and repository information
# and keeps a local mirror up to date.
# It will also handle B<http:> and B<ftp:> servers
# although rsync(1) is much to be preferred if available.
#

: ${TMPDIR:=/tmp}

cf=.mirror
where=.
verbose=
trace=
##[ -t 1 ] && verbose=1
timeout=
rsync=rsync

cmd=`basename "$0"`
usage="Usage: $cmd [-n] [-v] [-P] [-B blocksize] [-f config] [-d dir] [[server]::rootpfx...]
	-n -v -P -W	Passed to rsync.
	-B blocksize	Passed to rsync.
	-R rsync-cmd	Rsync command. Default: $rsync
	-f config	Read config from this file. Default: $cf
	-d dir		Install mirrors here. Default: $where
	-t secs		Timeout each update after secs seconds.
	-x		Trace subcommand execution.
	-z		Use compression.
	+z		Don't use compression."

rsopts=
rszopt=-z
rsxopts=

# =head1 OPTIONS
#
# =over 4
#

badopts=
while [ $# -gt 0 ]
do  case $1 in

	# =item B<-n>
	#
	# No action. Passed to the rsync command.
	#
	-n)	trace=set-x rsopts="$rsopts $1" ;;
	# =item B<-P>
	#
	# Rsync's shorthand for B<--progress --partial>.
	# Passed to the rsync command.
	#
	-P)	trace=set-x verbose=1 rsxopts="$rsxopts $1" ;;
	# =item B<-v>
	#
	# Verbose. Passed to the rsync command.
	#
	-v)	trace=set-x verbose=1 rsxopts="$rsxopts $1" ;;
	# =item B<-x>
	#
	# Trace subcommand execution.
	#
	-x)	trace=set-x ;;
	# =item B<-W>
	#
	# Whole file copies.
	# Passed to the rsync command.
	#
	-W)	rsxopts="$rsxopts $1" ;;

	# =item B<-B> I<blocksize>
	#
	# Checksum blocksize. Passwd to the rsync command.
	#
	-B)	rsopts="$rsopts $1 $2"; shift ;;

	# =item B<-R>
	#
	# Specify the rsync command to use.
	#
	-R)	rsync=$2; shift ;;

	# =item B<-z>
	#
	# Use rsync compression.
	#
	# =item B<+z>
	#
	# Don't use rsync compression.
	#
	-z)	rszopt=-z ;;
	+z)	rszopt= ;;

	# =item B<-f> I<config>
	#
	# Read the configuration information from the file I<config>
	# instead of from the B<.mirror> file.
	#
	-f)	cf=$2; shift ;;

	# =item B<-d> I<dir>
	#
	# Make the root of the mirror I<dir>.
	# By default the current directory is the root.
	#
	-d)	where=$2; shift ;;

	# =item B<-t> I<secs>
	#
	# Timeout each update after I<secs> seconds.
	# Note: this prepends the B<--partial> option
	# to the rsync command options
	# so that you can pick up where you left off later.
	#
	-t)	timeout=$2; shift ;;

	# =item B<--I<long-option>>
	#
	# Any B<--I<long-option>> is also passed to I<rsync>.
	#
	--?*)	rsxopts="$rsxopts $1" ;;
	--)	shift; break ;;
	-?*)	echo "$cmd: unrecognised option: $1" >&2
		badopts=1
		;;
	*)	break ;;
    esac
    shift
done

# =item [I<server>]B<::>I<rootpfx>
#
# If any B<I<server>::I<rootpfx>> or B<::I<rootpfx>> arguments are present,
# act only on those lines in the configuration file.
# I<rootpfx> may match any complete local path component prefix
# i.e. B<::foo> would match the local trees B<foo> and B<foo/bar> but not B<foobar>.
#
# =back
#
mirrorlist=$*

[ -d "$where/." ] || { echo "$cmd: directory \"$where\" missing" >&2
		       badopts=1
		     }

[ $badopts ] && { echo "$usage" >&2; exit 2; }

timelimit=
[ -n "$timeout" ] && { timelimit="timeout -- $timeout"
		       rsopts="--partial $rsopts"
		     }

[ "x$cf" = x- ] || exec <"$cf"

# =head1 CONFIGURATION FILE FORMAT
#
# The configuration file
# is normally named B<.mirror>
# and contains lines describing repositories to mirror.
# Blank lines and lines commencing with an octothorpe (B<#>)
# are discarded.
#
# A line of the form:
#
#	umask octal-value
#
# sets the umask for the script as specified (see umask(1)).
# A typical umask for a public mirror with a group of people
# who may maintain it would be B<002>.
#
# Other lines specify datasets to mirror
# and take the forms:
#
#	[I<method>] I<server> I<root> [I<localroot>] [I<options>...]
#
# or
#
#	I<URL> [I<localroot>] [I<options>...]
#
# The latter format is preferred, and takes a URL of the form:
#
#	I<method>://I<server>/I<root>
#
# In the former format
# an omitted I<method> defaults to B<rsync>.
# In consequence, I<server> should be a FQDN so that it does not resemble a I<method> name.
# The other methods known are B<http> and B<ftp>, for which the wget(1) command is used
# in mirror mode.
#
# The I<server> is an IP address or hostname
# as may be passed to the rsync(1) command.
#
# The I<root> is the subtree of the I<server>'s mirror
# that is to be copied.
#
# The optional I<localroot>
# specifies where to place the subtree at this end.
# If omitted, the value of I<root> is used.
# I<localroot> may not commence with a dash(B<->)
# (in order to distinguish it from I<options>).
# If I<localroot> does not commence with a slash (B</>)
# it is taken relative to I<dir>.
#
# I<Option>s specific to this particular line
# may then follow,
# typically I<rsync>'s B<--include=> and B<--exclude=> options
# or wget(1)'s B<--accept> and B<--reject> options.
#
# For the B<rsync> method, the special option B<--latest>
# may be specified as the first of these options;
# it causes the mirror to only include the latest version
# of versioned files
# (eg "B<foo-1.2.tar.gz>")
# from mirrors such as the GNU one
# which keep multiple instances of software releases,
# which eases your local disc space burden.
# See the latest(1) script.
#

xit=0
lineno=0
found=
while read words
do
    unset how host rpath lpath
    set -- $words

    lineno=`expr $lineno + 1`
    pfx="$cmd: $cf, line $lineno"

    # skip comments and blanks
    [ $# = 0 ] && continue
    case "$1" in
      \#*)	continue ;;
    esac

    pfx="$pfx: $1"

    if [ "x$1" = xumask ]
    then
      # set umask - 002 is a common choice
      if [ $# -lt 2 ]
      then
	echo "$pfx: missing umask value" >&2
	continue
      fi

      umask=$2; shift; shift

      if [ $# -gt 0 ]
      then
	echo "$pfx: extra arguments after umask value: $*" >&2
	continue
      fi

      [ $verbose ] && echo "umask $umask"
      umask "$umask"
      continue
    fi

    lpath=
    case "$1" in
      http://* | ftp://* | rsync://* )
	how=`expr "$1" : '\([^:]*\)://.*'`
	host=`expr "$1" : '[^:]*://\([^/]*\)/.*'`
	rpath=`expr "$1" : '[^:]*://[^/]*\(/.*\)'`
	shift
	;;

      *.*)
	how=rsync
	host=$1
	rpath=$2
	shift; shift
	;;
      *)
	how=$1
	host=$2
	rpath=$3
	shift; shift; shift
	;;
    esac

    if [ $# -gt 0 ]
    then
      case "$1" in
	-*)	;;
	*)	lpath=$1; shift ;;
      esac
    fi

    # special option "--latest" - must be first
    latest=
    [ $# -gt 0 ] && [ "x$1" = x--latest ] && { latest=1; shift; }

    # lpath == rpath, normally
    [ -n "$lpath" ] || lpath=`basename "$rpath"` || exit 1

    # check if only doing some mirrors
    if [ -n "$mirrorlist" ]
    then
      yep=
      for arg in $mirrorlist
      do
	case "$host::$lpath" in
	  "$arg" | "$arg"/* )
	    yep=1; break ;;
	esac
	case "::$lpath" in
	  "$arg" | "$arg"/* )
	    yep=1; break ;;
	esac
      done
      [ "$yep" ] || { [ $verbose ] && echo "$pfx: skipping $host::$rpath"
		      continue
		    }
    fi

    # compute full path
    fpath=$lpath
    case $fpath in /*) ;; *) fpath=$where/$fpath ;; esac
    [ -d "$fpath/." ] \
	|| $trace mkdir -p "$fpath" \
	|| { echo "$pfx: mkdir $fpath fails, skipping $host::$rpath" >&2
	     xit=1
	     continue
	   }

    # =head2 Per Mirror Configuration
    #
    # There is an additional facility for overly complex I<options>.
    # For each line a check is made for a file named:
    #
    #	I<config>-I<method>-I<server>-I<root-trans>
    #
    # where I<config> is the name of the main configuration file
    # and I<root-trans> is the I<root> string with slashes (B</>)
    # replaced by colons (B<:>).
    #
    # For the I<method> B<rsync>
    # the presence of this file causes the option:
    #
    #	B<--include-from=>I<config>-I<method>-I<server>-I<root-trans>
    #
    # to be prepended to the options passed to rsync, and so it should be an
    # rsync(1) include/exclude file.
    # This is a I<much> more succinct and readable way to pass complicated
    # include/exclude patterns to I<rsync>.
    #
    # Also, the presence of the file:
    #
    #	I<config>-I<method>
    #
    # is sought for all lines, and used if present.
    # This is for global specifications.
    # Mine says:
    #
    #	- .nfs*
    #
    # to ignore NFS transient files, which are always noise.
    #
    allcf=$cf-$how
    extracf=$cf-$how-$host-`echo $rpath|tr / :`
    case $how in
      rsync)
	[ -s "$allcf" ] && set -- "--include-from=$allcf" ${1+"$@"}
	[ -s "$extracf" ] && set -- "--include-from=$extracf" ${1+"$@"}

	if [ $latest ]
	then
	    latelist=$TMPDIR/$cmd-late$$
	    latedir=$TMPDIR/latest$$
	    if $trace mkdir "$latedir"
	    then
		$trace rsync -n -rlHt $rsopts ${1+"$@"} "$host::$rpath/." "$latedir/." \
		| fgrep -v ' -> ' \
		| latest -V -o >$latelist
		$trace rmdir "$latedir"

		set -- "--include-from=$latelist" '--include=*/' '--exclude=*' --delete-excluded ${1+"$@"}
	    fi
	fi

	set -- $rsync -rlHt $rsopts ${1+"$@"} $rszopt $rsxopts "$host::$rpath/." "$fpath/."
	;;
      http|ftp)
	ncut=`IFS=/; set -- $rpath; echo $#`
	set -- wget --mirror -D "$host" -L -nH "--cut-dirs=$ncut" -np -P "$fpath" "$how://$host/$rpath"
	;;
      *)echo "$pfx: method \"$how\" not supported" >&2
	xit=1
	continue
	;;
    esac

    found=1
    $trace $timelimit "$@" || xit=1
    [ $latest ] && $trace rm -f "$latelist"
done

[ $found ] || { echo "$cmd: nothing to mirror?" >&2; xit=1; }

exit $xit

# =head1 EXAMPLES AND TIPS
#
# A nightly mirror run might read:
#
# 	rsmirror -v -t 1200
#
# This produces a log of the update in my email
# and prevents a huge update or a misconfiguration at my end
# from using my link forever.
#
# You can find out what is available like this:
#
#	rsync mirror.aarnet.edu.au::
#
# (That's a shell command, not a line from the B<.mirror> file).
# You can then check out what's inside by putting a simple
# line in your B<.mirror> file:
#
#	rsync mirror.aarnet.edu.au redhat
#
# and saying:
#
#	rsmirror -v -n mirror.aarnet.edu.au::redhat
#
# which runs a verbose no-action run of just that line.
# Examine the output and start tuning your include/exclude list.
#
# For anything complex you'll probably want to make a per-mirror
# config file, which for the above example would be named:
#
#	.mirror-rsync-mirror.aarnet.edu.au-redhat
#
# See the B<--include-from=> option from the rsync(1) manual entry
# for details on the format.
#
# There is also an optional config file:
#
#	.mirror-rsync
#
# which will be used before the per-mirror file.
# Ours just says:
#
#	- .nfs[0-9]*
#
# which ignores NFS tempoprary files.
#
# =head1 CAUTION
#
# It is I<very> easy to request ludicrous quantities of data with this program.
# Always make trial runs with the B<-n> and B<-v> flags
# before using in any noninteractive context.
# Also, think carefully about what you mirror.
# It is easy to waste more bandwidth by mirroring
# unnecessary stuff instead of only what you will really benefit from.
# Finally,
# try to mirror from a nearby host
# such as your local country or ISP mirror service
# if possible.
#
# =head1 CAVEATS
#
# As you may imagine,
# the rsync protocol does not use your web proxy.
# If you're mirroring popular stuff you may wish to do the initial
# fetch of a lot of the big stuff with an HTTP-based tool like
# I<wget> or I<curl> or I<lynx>.
# That way the data are in your web cache
# in case someone does a fetch before your mirror is up to speed.
#
# Remember, mirrors are a waste of resources if not used.
# Make sure your site's population is well aware of your mirror
# and encouraged to consult first it and then your nearest archive site
# before hammering the origin server of any significant data
# they want.
#
# The rsync(1) invocation used in rsmirror
# does not preserve permissions or owners or groups
# (because they are meaningless for public data like this).
# I run our nightly mirror with a umask(1) of B<002>
# and arrange group access to allow our sysadmin team
# to manipulate the mirror.
#
# =head1 SEE ALSO
#
# rsync(1), wget(1), curl(1), lynx(1), latest(1cs), timeout(1cs)
#
# =head1 AUTHOR
#
# Cameron Simpson E<lt>cs@zip.com.auE<gt> 25 August 2000
#
