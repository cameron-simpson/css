#!/usr/bin/perl
#
# Nab header and then feed rest to "restore tf -" and parse the output,
# emitting stuff for the budtool file history.
#	- Cameron Simpson <cs@zip.com.au> 24sep96
#

@Restore=('restore','tf','-');
$Root='/';

@hdr=();
HDR:
  while (1)
	{ $_=getcbcline(STDIN);
	  die "unexpected EOF" if ! length;

	  push(@hdr,$_);
	  last HDR if /^This is last line in header/;
	}

if (! defined ($pid=open(RESTORE,"-|")))
	{ die "pipe/fork: $!";
	}

if ($pid == 0)
	# child - exec restore
	{ print STDERR "exec(@Restore)\n";
	  exec(@Restore);
	  die "exec(@Restore): $!";
	}

# parent
close(STDIN);

$xit=0;

print @hdr;

while (defined ($_=<RESTORE>))
	{ chomp;

	  if (/^\s*\d+\s+(\.\/+)?/)
		{ procfile($root,$');
		}
	  else	{ print STDERR "@Restore, line $.: bad format: $_\n";
		  $xit=1;
		}
	}

print "TOC_TRAILER\n";

exit $xit;

sub procfile
	{ my($dir,$path)=@_;
	  my(@s);

	  $path="$dir/$path";
	  if (! (@s=lstat($path)))
		{ warn "lstat($path): $!\n";
		  $xit=1;
		  return;
		}

	  $path =~ s/[\000-\010\012-\037]/?/g;
	  $path =~ tr:/:\003:;
	  $path.="\002";

	  my($bf)="\80\80\80\80";	# four byte marker
	}

sub getcbcline
	{ my($F)=shift;
	  local($_)='';
	  my($c,$n);

	  while (defined($n=sysread($F,$c,1)) > 0 && $c ne "\n")
		{ $_.=$c;
		}

	  return undef if $n == 0;	# EOF

	  $_."\n";
	}
