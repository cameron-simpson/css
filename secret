#!/usr/bin/perl
#
# Fetch or secrete a secret.
#	- Cameron Simpson <cs@zip.com.au> 09nov1999
#

use strict vars;

use cs::Misc;
use cs::Secret;
use cs::Shell;

$::Usage="Usage: $::cmd [key [field=value]...]";

# no args - list secrets
if (! @ARGV)
{ for my $key (cs::Secret::list())
  { print "$key\n";
  }
  exit 0;
}

my $key = shift(@ARGV);

# no settings? list values
if (! @ARGV)
{ my $s = cs::Secret::get($key);
  die "$::cmd: no secret named \"$key\"\n" if ! defined $s;

  my $sep="";
  for my $skey (sort $s->Keys())
  { print $sep, 'secret', $skey, '=', cs::Shell::quote($s->{$skey});
    $sep=" ";
  }

  print "\n";

  exit 0;
}

$::Xit=0;

my $s = cs::Secret::get($key);
$s = new cs::Secret $key if ! defined $s;

SETTING:
for (@ARGV)
{ if (! /^([a-z_]\w*)=/i)
  { warn "$::cmd: bad setting: \"$_\"\n";
    $::Xit=1;
    next SETTING;
  }

  $s->Set($1,$');
}

exit $::Xit;
