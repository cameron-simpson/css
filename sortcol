#!/usr/bin/perl
#
# Read a titled listing (such as from ps) from stdin and sort on the named
# columns. Functions by translating column names into sort(1) arguments and
# passing the header line through directly.
#	- Cameron Simpson <cs@zip.com.au> 28sep2000
#

use strict vars;

require 'flush.pl';

use cs::Misc;
use cs::Shell;

$::Usage="Usage: $::cmd [sort-options...]\n";

my $headline = <STDIN>;
die "$::cmd: empty input!\n" if ! defined $headline;
printflush(STDOUT, $headline);

$_=$headline;
chomp;
s/^\s+//;
s/\s+$//;

my @hdrs = split(/\s+/);

for my $i (0..$#hdrs)
{ my $hdr = $hdrs[$i];
  $::Ndx{$hdr}=$i if ! exists $::Ndx{$hdr};
}

my $badopts = 0;

my @args;

{ my $arg;
  my $ndx;

  ARGV:
  while (defined ($arg=shift(@ARGV)))
  {

    if ($arg eq '--')
    { last ARGV;
    }
    elsif ($arg =~ /^\+/)
    # handle +pos1
    { my $pos = $';
      if (defined($ndx=ndx($pos))) { $pos=$ndx; }
      push(@args,'-k',$pos+1);
    }
    elsif ($arg =~ /^[^-]/ && defined ($ndx=ndx($arg)))
    { push(@args,'-k',$ndx+1);
    }
  }
}

if (@ARGV)
{ warn "$::cmd: extra arguments: @ARGV\n";
  $badopts=1;
}

die $::Usage if $badopts;

my $shcmd = cs::Shell::quote('sort',@args);

open(SORT, "| exec $shcmd ") || die "$::cmd: can't pipe to sort: $!\n";
while (defined ($_=<STDIN>))
{ print SORT $_;
}
close(SORT);

exit $?;


sub ndx($)
{ my($hdr)=@_;
  return undef if ! exists $::Ndx{$hdr};
  $::Ndx{$hdr};
}
