#!/usr/bin/perl
#

($cmd=$0) =~ s:.*/::;
$usage="Usage: $cmd pathname\n";

die $usage unless @ARGV == 1;

use POSIX;
use cs::RFC822;

$path=shift;
$s=&dirinfo($path);

exit 1 unless defined $s;

print "$path: s=$s, $s->{Type}, fileds=[", join(" ", keys %$s), "]\n";

exit 0;

sub Stat
	{ local($filename,$dolstat)=@_;
	  local(@stat) = $dolstat ? lstat($filename) : stat($filename);

	  if (!@stat)
		{ print STDERR "$cmd: Stat(@_): $!\n";
	  	  return undef;
		}

	  local($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
		$atime,$mtime,$ctime,$blksize,$blocks)=@stat;
	  local($s)={};

	  $s->{Stat}=@stat;
	  $s->{Mtime}=$mtime;
	  $s->{Uid}=$uid;
	  $s->{Gid}=$gid;

	  if (POSIX::S_ISDIR($mode))
		{ $s->{Type}=DIR;
		  if (!opendir(DIR,$filename))
			{ print STDERR "$cmd: Stat(@_): opendir($filename): $!\n";
			}
		  else
		  { $s->{Dirents}=[];
		    @{$s->{Dirents}}=readdir(DIR);
		    closedir(DIR);
		  }
		}
	  elsif (POSIX::S_ISREG($mode))
		{ $s->{Type}=FILE;
		  $s->{Size}=$size;
		  $s->{Atime}=$atime;
		}
	  else
	  { $s->{Type}=UNKNOWN;
	  }

	  $s;
	}

sub dirinfo	# dirname -> stat (with RFC822 pointing at info file)
	{ local($dirname)=@_;
	  local($s)=&Stat($dirname);

	  return undef unless defined($s) && $s->{Type} eq DIR;

	  $s->{InfoHdrs}=new cs::RFC822;
	  $s->{InfoLines}=[];
	  @{$s->{InfoLines}}=$s->{InfoHdrs}->FileExtract("$dirname/.info");

	  $s;
	}
