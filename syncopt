#!/bin/sh
#
# Keep per-machine /opt in sync with shared one.
#
# Homepage:
#	http://www.zip.com.au/~cs/syncopt/index.html
#
# The scheme is that things get built and installed as /opt/thing-version,
# then copied to /usr/local/opt/thing-version in the central spot, with a
# symlink from there to /usr/local/opt/thing. That way things think they
# live in /opt and become local or remote by either symlinking from /opt
# to /usr/local/opt or installing an exact copy of
# /usr/local/opt/thing-version in /opt.
#	- Cameron Simpson <cs@zip.com.au> 13feb1999
#
# Use /usr/local/opt-common as a secondary source.
#	- cameron 18jun1999
#
# /opt/.syncopt config file.
#	- cameron 14feb2001
#
# "nosync" in .syncopt.
#	- cameron 31may2001
# "remote" in .syncopt.
#	- cameron 22apr2002
# 

pathadd=:/usr/bin:/opt/bin:/opt/script
PATH=$PATH$pathadd
export PATH

rsync=rsync
remote=

cmd=`basename "$0"`
usage="Usage: $cmd [-n] [-f] [l] [-R rsync-path] [-x] [-v] [items...]
	-n	No action (default) - echo necessary actions.
	-f	Force action.
	-l	Localise the specified items.
	-R rsync-path Rsync command path. Default: $rsync
	-r [user@]host Remote host with the master files.
	-x	Force action with tracing.
	-v	Verbose."

trace=echo	# set-x	# set to nothing when debugged
localise=

slashopt=/opt
archopt=/usr/local/opt
commonopt=$archopt-common
subdirs=${SYNCOPT_SUBDIRS:="."}

cf=$slashopt/.syncopt

vflag=
[ -t 1 ] && vflag=-v

badopts=
while :
do  case $1 in
	-f)	trace= ;;
	-x)	trace=set-x ;;
	-l)	localise=1 ;;
	-n)	trace=echo ;;
	-R)	rsync=$2; shift ;;
	-r)	remote=$2; shift ;;
	-v)	verbose=1 vflag=-v ;;
	--)	shift; break ;;
	-?*)	echo "$cmd: unrecognised option: $1" >&2; badopts=1 ;;
	*)	break ;;
    esac
    shift
done

# because the master repository may be remote
# everything remote has an eval layer so it can be passed through ssh
if [ -z "$remote" ]
then
    remotepfx=
    atremote=eval
    remote()
    { eval "$*"
    }
else
    remotepfx=$remote:
    atremote="ssh $remote"
    remote()
    { ssh "$remote" "PATH=\$PATH:$pathadd; export PATH; $*"
    }
fi

if [ $# = 0 ] && [ $localise ]
then
    echo "$cmd: -l requires specific targets" >&2
    badopts=1
fi

[ $badopts ] && { echo "$usage" >&2; exit 2; }

# ensure there is a real local /opt
[ -d "$slashopt/." ] \
	|| { $trace mkdir $slashopt && $trace chmod 755 $slashopt; } \
	|| exit 1

# locate the master copy for every target
#
# look for /usr/local/opt-$ARCH or failing that /usr/local/opt
resolve="cmd=$cmd
	 subdirs='$subdirs'
	 commonopt='$commonopt'
         if [ -d '$archopt-$ARCH/.' ]
         then archopt='$archopt-$ARCH'
	 else archopt='$archopt'
	 fi"
# get target list if not specified
if [ $# = 0 ]
then
    resolve=$resolve'
	    set x `for subdir in $subdirs
                    do ls "$archopt/$subdir/." 2>/dev/null
                       ls "$commonopt/$subdir/." 2>/dev/null
	            done | sort -u`; shift'
else
    resolve="$resolve; set x $*; shift"
fi
# resolve every target into a master directory
resolve=$resolve'
	first=1
        for target
	do  [ $first ] && { first=; set x; shift; }
	    fullpath=
	    for dir in $archopt $commonopt
	    do  for subdir in $subdirs
		do  if [ -d "$dir/$subdir/$target/." ]
		    then  if [ "x$subdir" = x. ]
			  then  fullpath=$dir/$target
			  else  fullpath=$dir/$subdir/$target
			  fi
			  break
		    fi
		done
		[ -n "$fullpath" ] && break
	    done
	    if [ -n "$fullpath" ]
	    then  set x ${1+"$@"} "$fullpath"; shift
	    else  echo "$cmd: can'\''t locate master for \"$target\"" >&2
	    fi
	done
	[ $# = 0 ] || ls -d "$@"'
set x `remote "$resolve"`; shift

xit=0

# for everything in the central opt dirs
for thingpath
do
    thing=`basename "$thingpath"`
    ## echo "sync $thing ..."
    ## case "$thing" in gimp*) set -x ;; esac

    # local iinstance of thing
    ldir=$slashopt
    l=$ldir/$thing

    # remote instance of thing
    r=$thingpath

    # get unversioned name for $thing
    case "$thing" in
	*-*) nvthing=`expr "x$thing" : 'x\([^\-]*\)-.*'` ;;
	*)   nvthing=$thing ;;
    esac

    # determine default behaviour:
    # whether to localise by default
    makelocal=$localise
    issymlink "$l" || [ ! -d "$l" ] || makelocal=1
    # what version to make the default for this host
    version=
    # leave this item alone?
    nosync=

    # check config file
    sedscript="y/	/ /
	       s/^  *//
	       s/^#.*//
	       /^$/d
	       s/  *\$//
	       s/   */ /g

	       # outright mode settings
	       /^$thing local\$/b local
	       /^$thing remote\$/b remote
	       /^$thing nosync\$/b nosync

	       # unversioned mode settings
	       /^$nvthing local\$/b local
	       /^$nvthing remote\$/b remote
	       /^$nvthing nosync\$/b nosync

	       # wildcard mode settings
	       /^\* local\$/b local
	       /^\* remote\$/b remote
	       /^\* nosync\$/b nosync

	       # set version and mode
	       /^$nvthing [^ ][^ ]* local\$/b vlocal
	       /^$nvthing [^ ][^ ]* remote\$/b vremote

	       # just set version
	       /^$nvthing [^ ][^ ]*\$/b vers

	       # discard unrecognised stuff
	       d
	       :local
	       s/.*/makelocal=1 nosync=/
	       b done
	       :remote
	       s/.*/makelocal= nosync=/
	       b done
	       :nosync
	       s/.*/nosync=1 makelocal=/
	       b done
	       :vlocal
	       s/^[^ ]* \\([^ ]*\\).*/makelocal=1 version=\\1 nosync=/
	       b done
	       :vremote
	       s/^[^ ]* \\([^ ]*\\).*/makelocal= version=\\1 nosync=/
	       b done
	       :vers
	       s/^$thing /nosync= version=/
	       :done"
    ## echo "$thing:"
    opts=`2>/dev/null sed -e "$sedscript" "$cf"`
    eval "$opts"

    # skip this?
    [ $nosync ] && { echo "NOSYNC $thing"; continue; }

    # files - basicly /opt/ARCH really
    if remote "test -f '$r'"
    then
	$trace $rsync -aH $vflag "$remotepfx$r" "$l"
	continue
    fi

    # maintain generic links
    rlink=`remote "readsymlink '$r' 2>/dev/null"`
    if [ -n "$rlink" ]
    then
	# make thing into symlink to right version
	if [ -n "$version" ]
	then  sym=$thing-$version
	else  sym=$rlink
	fi

	if llink=`readsymlink "$l"` \
	&& [ "x$sym" = "x$llink" ]
	then
	    :
	else
	    $trace rm -rf "$l"
	    $trace ln -s "$sym" "$l" || xit=1
	fi

	# ensure appropriate version is local
	if [ $makelocal ] && issymlink "$ldir/$sym"
	then
	    $trace rm "$ldir/$sym"
	    $trace mkdir "$ldir/$sym"
	fi
    else
	# remote end is real - must be the versioned thing
	if [ $makelocal ]
	then
	    issymlink "$l" && rm "$l"
	    [ -d "$l/." ] || $trace mkdir "$l" || xit=1
	else
	    if [ -d "$l/." ]
	    then
		:
	    else
		# link to remote
		$trace rm -f "$l"
		$trace ln -s "$r" "$ldir/." || xit=$?
	    fi
	fi
    fi

    issymlink "$l" \
    || $trace $rsync -aHW $vflag --delete "$remotepfx$r/." "$l/." | sed "s|^|$l: |"

    set +x
done

exit $xit
