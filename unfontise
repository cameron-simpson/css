#!/usr/bin/perl
#
# Take a fontised string as appears in Subject: lines and attachment descriptions
# and convert it to raw form. See RFC2047.
#	- Cameron Simpson <cs@zip.com.au> 01feb2002
#
# -c chregexp - cameron 26jun2002
# -C - cameron 12jul2002
# Add ?B? support. - cameron, 16aug2005
#

use Getopt::Std;
use cs::MIME::Base64;
use cs::Misc;

($::cmd=$0) =~ s:.*/::;
$::Usage="Usage: $::cmd [-r regexp] [strings...]
	-r regexp	Only modify strings matching regexp (case insensitive).
			Pass others through unchanged.
			Intended for modifying particular header lines.
	-c csregexp	Only unfontise if the charset matches chregexp.
	-C		RFC822 line continuations.
";

my $regexp;
my $csregexp = '';
my $linecont = 0;

{ my $badopts = 0;

  getopts('r:c:C') || ($badopts=1);
  $regexp=$::opt_r if defined $::opt_r;
  $csregexp=$::opt_c if defined $::opt_c;
  $linecont=$::Opt_C if defined $::opt_C;

  die $::Usage if $badopts;
}

if (@ARGV)
{ for my $arg (@ARGV)
  { $arg=unfontise($arg) if !defined($regexp) || $arg =~ /$regexp/oi;
    print "$arg\n";
  }
}
else
{
  my $line;
  my $arg;

  while (defined($arg=<STDIN>))
  { chomp($arg);
    if (defined $line && $linecont && $arg =~ /^[ \t]/)
    { $line.="\n$arg";
    }
    else
    { if (defined $line)
      { $line=unfontise($line) if !defined($regexp) || $line =~ /$regexp/oi;
	print "$line\n";
      }
      $line=$arg;
    }
  }

  if (defined $line)
  { $line=unfontise($line) if !defined($regexp) || $line =~ /$regexp/oi;
    print "$line\n";
  }
}

exit 0;

sub unfontise
{ local($_)=@_;

  my $dec = '';
  my $charset;
  my $enc;
  my $encwords;
  my $m;

  #          charset  encoding encoded-text	rfc2047.2
  while (/=\?([^?]+)\?([QB])\?([^?]*)\?=/i)
  {
    ($charset,$enc,$encwords)=(uc($1),uc($2),$3);
    $m=$&;
    $dec.=$`;
    $_=$';

    if (length $csregexp && $charset !~ /^$csregexp$/oi)
    # don't touch this charset
    {
    }
    elsif ($enc eq 'Q')
    { $encwords =~ tr/_/ /;
      $encwords =~ s/=([\da-f][\da-f])/(($code=eval "0x$1") >= 32 && $code < 255 ? chr($code) : $&)/egi;
      $m=$encwords;
    }
    elsif ($enc eq 'B')
    { if ($encwords =~ m:^([a-z0-9+/=]{4})*$:)	# valid base64
      { $m=cs::MIME::Base64::decode($encwords);
      }
      else
      { warn "$::cmd: bad =?...?B?...?= encoded-text: $encwords";
      }
    }
    else
    { warn "$::cmd: unsupported encoding: \"$enc\"";
    }

    $dec.=$m;
  }

  return $dec.$_;
}
