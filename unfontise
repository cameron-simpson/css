#!/usr/bin/perl
#
# Take a fontised string as appears in Subject: lines and attachment descriptions
# and convert it to raw form. See RFC2047.
#	- Cameron Simpson <cs@zip.com.au> 01feb2002
#

($::cmd=$0) =~ s:.*/::;
$::Usage="Usage: $::cmd [-r regexp] [strings...]
	-r regexp	Only modify strings matching regexp (case insensitive).
			Pass others through unchanged.
			Intended for modifying particular header lines.
";

my $regexp;

{ my $badopts = 0;

  if (@ARGV && $ARGV[0] eq '-r')
  { shift(@ARGV);
    if (! @ARGV)
    { warn "$::cmd: missing regexp\n";
      $badopts=1;
    }
    else
    { $regexp=shift(@ARGV);
    }
  }

  die $::Usage if $badopts;
}

if (@ARGV)
{ for my $arg (@ARGV)
  { $arg=unfontise($arg) if !defined($regexp) || $arg =~ /$regexp/oi;
    print "$arg\n";
  }
}
else
{
  my $arg;

  while (defined($arg=<STDIN>))
  { chomp($arg);
    $arg=unfontise($arg) if !defined($regexp) || $arg =~ /$regexp/oi;
    print "$arg\n";
  }
}

exit 0;

sub unfontise
{ local($_)=@_;

  my $dec = '';
  my $charset;
  my $enc;
  my $encwords;

  while (/=\?([^?]+)\?([QB])\?([^?]*)\?=/i)
  {
    ($charset,$enc,$encwords)=(uc($1),uc($2),$3);
    $dec.=$`;
    $_=$';

    if ($enc eq 'Q')
    { $encwords =~ tr/_/ /;
      $encwords =~ s/=([\da-f][\da-f])/eval "chr(0x$1)"/egi;
    }
    else
    { warn "$0: unsupported encoding: \"$enc\"";
    }

    $dec.=$encwords;
  }

  return $dec.$_;
}
