#!/bin/sh -u
#
# Generic handler for untyped data to be displayed inline (as for mailcap
# "copiousoutput' entries).
#	- Cameron Simpson <cs@zip.com.au> 24jul2002
#

: ${TMPDIR:=/tmp}
: ${VIEW_UNKNOWN_FILENAME:=''}

cmd=$0
usage="Usage: $cmd [-x] [-t mimetype] {file|-} [[!]attribute...]
	-x		trace execution of view subcommand.
	-t mimetype	Supply type."

##echo "$cmd: pid $$: argv=$*" >&2
##echo "$cmd: pid $$: VIEW_UNKNOWN_FILENAME=$VIEW_UNKNOWN_FILENAME" >&2

mtype=
trace=	##set-x

badopts=
while [ $# -gt 0 ]
do
  case $1 in
    -t) mtype=$2; shift ;;
    -x)	trace=set-x ;;
    --)	shift; break ;;
    -?*)echo "$cmd: unrecognised option: $1" >&2; badopts=1 ;;
    *)	break ;;
  esac
  shift
done

if [ $# = 0 ]
then
  echo "$cmd: missing file" >&2
  badopts=1
else
  file=$1; shift
fi

[ $badopts ] && { echo "$usage" >&2; exit 2; }

# fix up the file name
case "$file" in
  http://* | \
  https://* | \
  ftp://* | \
  - )
      # URL or stdin: grab it and use as file
      file=`fileof "$file"` || exit 1
      exec $trace "$0" -t "$mtype" "$file" ${1+"$@"}
      ;;
  /*|./*|../*) ;;
  *)  file=./$file ;;
esac

exec 3<"$file"
[ -t 3 ] && { echo "$cmd: won't read from a terminal" >&2
	      exit 1
	    }

if [ -z "$mtype" ]
then
  # if not regular file sniff as a pipeline
  if [ ! -f "$file" ]
  then
    # sniff first 1k of file
    hdr=$TMPDIR/blk$$
    dd bs=1024 count=1 <&3 >$hdr 2>/dev/null || exit 1
    mtype=`file2mime "$hdr"` || mtype=
    [ "$mtype" = application/octet-stream ] && mtype=

    if [ -z "$mtype" ]
    then
      mtype=text/plain
      echo "$cmd: pid $$: stdin: unrecognised MIME type, pretending $mtype" >&2
    fi

    # feed block and rest of file into ourself now we know the type
    echo "$cmd: pid $$: mtype=$mtype" >&2
    ( rm "$hdr"
      cat
      exec cat <&3
    ) <"$hdr" | $trace "$0" -t "$mtype" - ${1+"$@"}
    exit $?
  fi

  # regular file - sniff directly
  mtype=`file2mime "$file"` || mtype=
fi

if [ -n "$VIEW_UNKNOWN_FILENAME" ] \
&& [ "x$VIEW_UNKNOWN_FILENAME" = "x$file" ]
then
    echo "$cmd: pid $$: recursive call on file \"$file\", aborting" >&2
    exit 1
fi
VIEW_UNKNOWN_FILENAME=$file
export VIEW_UNKNOWN_FILENAME

# ok, we have a type and the file on fd 3 (remember, may be a pipe)
case "$mtype" in
    ''|application/octet-stream)
		mtype=application/x-dont-parse ;;
    text/plain)
	case "$file" in
	  *.csv)
		mtype=text/x-csv ;;
	esac
	;;
esac

# no action? bail out
for gui in `[ -n "$DISPLAY" ] && echo gui` !gui
do action=`mailcap -s "$file" "$mtype" $gui ${1+"$@"}` && break
done

[ -n "$action" ] && exec $trace sh -c "$action"

action=`mailcap -s "$file" "$mtype" decode`
if [ -n "$action" ]
then
  ##echo "decode using \"$action\"" >&2
  unset VIEW_UNKNOWN_FILENAME
  $trace sh -c "$action" | $trace "$0" - ${1+"$@"}
  exit $?
fi

echo "$mtype"
file "$file" | noesc
